
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Wave
 * 
 */
export type Wave = $Result.DefaultSelection<Prisma.$WavePayload>
/**
 * Model Ripple
 * 
 */
export type Ripple = $Result.DefaultSelection<Prisma.$RipplePayload>
/**
 * Model MicroAction
 * 
 */
export type MicroAction = $Result.DefaultSelection<Prisma.$MicroActionPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Waves
 * const waves = await prisma.wave.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Waves
   * const waves = await prisma.wave.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.wave`: Exposes CRUD operations for the **Wave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Waves
    * const waves = await prisma.wave.findMany()
    * ```
    */
  get wave(): Prisma.WaveDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ripple`: Exposes CRUD operations for the **Ripple** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ripples
    * const ripples = await prisma.ripple.findMany()
    * ```
    */
  get ripple(): Prisma.RippleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.microAction`: Exposes CRUD operations for the **MicroAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MicroActions
    * const microActions = await prisma.microAction.findMany()
    * ```
    */
  get microAction(): Prisma.MicroActionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Wave: 'Wave',
    Ripple: 'Ripple',
    MicroAction: 'MicroAction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "wave" | "ripple" | "microAction"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Wave: {
        payload: Prisma.$WavePayload<ExtArgs>
        fields: Prisma.WaveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WaveFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WaveFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          findFirst: {
            args: Prisma.WaveFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WaveFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          findMany: {
            args: Prisma.WaveFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>[]
          }
          create: {
            args: Prisma.WaveCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          createMany: {
            args: Prisma.WaveCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WaveCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>[]
          }
          delete: {
            args: Prisma.WaveDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          update: {
            args: Prisma.WaveUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          deleteMany: {
            args: Prisma.WaveDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WaveUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WaveUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>[]
          }
          upsert: {
            args: Prisma.WaveUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          aggregate: {
            args: Prisma.WaveAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWave>
          }
          groupBy: {
            args: Prisma.WaveGroupByArgs<ExtArgs>
            result: $Utils.Optional<WaveGroupByOutputType>[]
          }
          count: {
            args: Prisma.WaveCountArgs<ExtArgs>
            result: $Utils.Optional<WaveCountAggregateOutputType> | number
          }
        }
      }
      Ripple: {
        payload: Prisma.$RipplePayload<ExtArgs>
        fields: Prisma.RippleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RippleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RippleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          findFirst: {
            args: Prisma.RippleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RippleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          findMany: {
            args: Prisma.RippleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>[]
          }
          create: {
            args: Prisma.RippleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          createMany: {
            args: Prisma.RippleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RippleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>[]
          }
          delete: {
            args: Prisma.RippleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          update: {
            args: Prisma.RippleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          deleteMany: {
            args: Prisma.RippleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RippleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RippleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>[]
          }
          upsert: {
            args: Prisma.RippleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          aggregate: {
            args: Prisma.RippleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRipple>
          }
          groupBy: {
            args: Prisma.RippleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RippleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RippleCountArgs<ExtArgs>
            result: $Utils.Optional<RippleCountAggregateOutputType> | number
          }
        }
      }
      MicroAction: {
        payload: Prisma.$MicroActionPayload<ExtArgs>
        fields: Prisma.MicroActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MicroActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MicroActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          findFirst: {
            args: Prisma.MicroActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MicroActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          findMany: {
            args: Prisma.MicroActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>[]
          }
          create: {
            args: Prisma.MicroActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          createMany: {
            args: Prisma.MicroActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MicroActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>[]
          }
          delete: {
            args: Prisma.MicroActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          update: {
            args: Prisma.MicroActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          deleteMany: {
            args: Prisma.MicroActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MicroActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MicroActionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>[]
          }
          upsert: {
            args: Prisma.MicroActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          aggregate: {
            args: Prisma.MicroActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMicroAction>
          }
          groupBy: {
            args: Prisma.MicroActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MicroActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MicroActionCountArgs<ExtArgs>
            result: $Utils.Optional<MicroActionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    wave?: WaveOmit
    ripple?: RippleOmit
    microAction?: MicroActionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type WaveCountOutputType
   */

  export type WaveCountOutputType = {
    ripples: number
  }

  export type WaveCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripples?: boolean | WaveCountOutputTypeCountRipplesArgs
  }

  // Custom InputTypes
  /**
   * WaveCountOutputType without action
   */
  export type WaveCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveCountOutputType
     */
    select?: WaveCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WaveCountOutputType without action
   */
  export type WaveCountOutputTypeCountRipplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RippleWhereInput
  }


  /**
   * Count Type RippleCountOutputType
   */

  export type RippleCountOutputType = {
    microActions: number
  }

  export type RippleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    microActions?: boolean | RippleCountOutputTypeCountMicroActionsArgs
  }

  // Custom InputTypes
  /**
   * RippleCountOutputType without action
   */
  export type RippleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleCountOutputType
     */
    select?: RippleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RippleCountOutputType without action
   */
  export type RippleCountOutputTypeCountMicroActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MicroActionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Wave
   */

  export type AggregateWave = {
    _count: WaveCountAggregateOutputType | null
    _avg: WaveAvgAggregateOutputType | null
    _sum: WaveSumAggregateOutputType | null
    _min: WaveMinAggregateOutputType | null
    _max: WaveMaxAggregateOutputType | null
  }

  export type WaveAvgAggregateOutputType = {
    impactCoef: number | null
  }

  export type WaveSumAggregateOutputType = {
    impactCoef: number | null
  }

  export type WaveMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    impactCoef: number | null
    impactUnit: string | null
    impactSource: string | null
    allowedBuckets: string | null
  }

  export type WaveMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    impactCoef: number | null
    impactUnit: string | null
    impactSource: string | null
    allowedBuckets: string | null
  }

  export type WaveCountAggregateOutputType = {
    id: number
    name: number
    description: number
    icon: number
    impactCoef: number
    impactUnit: number
    impactSource: number
    allowedBuckets: number
    _all: number
  }


  export type WaveAvgAggregateInputType = {
    impactCoef?: true
  }

  export type WaveSumAggregateInputType = {
    impactCoef?: true
  }

  export type WaveMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    impactCoef?: true
    impactUnit?: true
    impactSource?: true
    allowedBuckets?: true
  }

  export type WaveMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    impactCoef?: true
    impactUnit?: true
    impactSource?: true
    allowedBuckets?: true
  }

  export type WaveCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    impactCoef?: true
    impactUnit?: true
    impactSource?: true
    allowedBuckets?: true
    _all?: true
  }

  export type WaveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wave to aggregate.
     */
    where?: WaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Waves to fetch.
     */
    orderBy?: WaveOrderByWithRelationInput | WaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Waves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Waves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Waves
    **/
    _count?: true | WaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WaveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WaveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WaveMaxAggregateInputType
  }

  export type GetWaveAggregateType<T extends WaveAggregateArgs> = {
        [P in keyof T & keyof AggregateWave]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWave[P]>
      : GetScalarType<T[P], AggregateWave[P]>
  }




  export type WaveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WaveWhereInput
    orderBy?: WaveOrderByWithAggregationInput | WaveOrderByWithAggregationInput[]
    by: WaveScalarFieldEnum[] | WaveScalarFieldEnum
    having?: WaveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WaveCountAggregateInputType | true
    _avg?: WaveAvgAggregateInputType
    _sum?: WaveSumAggregateInputType
    _min?: WaveMinAggregateInputType
    _max?: WaveMaxAggregateInputType
  }

  export type WaveGroupByOutputType = {
    id: string
    name: string
    description: string
    icon: string | null
    impactCoef: number
    impactUnit: string
    impactSource: string
    allowedBuckets: string
    _count: WaveCountAggregateOutputType | null
    _avg: WaveAvgAggregateOutputType | null
    _sum: WaveSumAggregateOutputType | null
    _min: WaveMinAggregateOutputType | null
    _max: WaveMaxAggregateOutputType | null
  }

  type GetWaveGroupByPayload<T extends WaveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WaveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WaveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WaveGroupByOutputType[P]>
            : GetScalarType<T[P], WaveGroupByOutputType[P]>
        }
      >
    >


  export type WaveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    impactCoef?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    allowedBuckets?: boolean
    ripples?: boolean | Wave$ripplesArgs<ExtArgs>
    _count?: boolean | WaveCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wave"]>

  export type WaveSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    impactCoef?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    allowedBuckets?: boolean
  }, ExtArgs["result"]["wave"]>

  export type WaveSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    impactCoef?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    allowedBuckets?: boolean
  }, ExtArgs["result"]["wave"]>

  export type WaveSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    impactCoef?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    allowedBuckets?: boolean
  }

  export type WaveOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "icon" | "impactCoef" | "impactUnit" | "impactSource" | "allowedBuckets", ExtArgs["result"]["wave"]>
  export type WaveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripples?: boolean | Wave$ripplesArgs<ExtArgs>
    _count?: boolean | WaveCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WaveIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WaveIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WavePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wave"
    objects: {
      ripples: Prisma.$RipplePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      icon: string | null
      impactCoef: number
      impactUnit: string
      impactSource: string
      allowedBuckets: string
    }, ExtArgs["result"]["wave"]>
    composites: {}
  }

  type WaveGetPayload<S extends boolean | null | undefined | WaveDefaultArgs> = $Result.GetResult<Prisma.$WavePayload, S>

  type WaveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WaveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WaveCountAggregateInputType | true
    }

  export interface WaveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wave'], meta: { name: 'Wave' } }
    /**
     * Find zero or one Wave that matches the filter.
     * @param {WaveFindUniqueArgs} args - Arguments to find a Wave
     * @example
     * // Get one Wave
     * const wave = await prisma.wave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WaveFindUniqueArgs>(args: SelectSubset<T, WaveFindUniqueArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Wave that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WaveFindUniqueOrThrowArgs} args - Arguments to find a Wave
     * @example
     * // Get one Wave
     * const wave = await prisma.wave.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WaveFindUniqueOrThrowArgs>(args: SelectSubset<T, WaveFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wave that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveFindFirstArgs} args - Arguments to find a Wave
     * @example
     * // Get one Wave
     * const wave = await prisma.wave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WaveFindFirstArgs>(args?: SelectSubset<T, WaveFindFirstArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wave that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveFindFirstOrThrowArgs} args - Arguments to find a Wave
     * @example
     * // Get one Wave
     * const wave = await prisma.wave.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WaveFindFirstOrThrowArgs>(args?: SelectSubset<T, WaveFindFirstOrThrowArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Waves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Waves
     * const waves = await prisma.wave.findMany()
     * 
     * // Get first 10 Waves
     * const waves = await prisma.wave.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const waveWithIdOnly = await prisma.wave.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WaveFindManyArgs>(args?: SelectSubset<T, WaveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Wave.
     * @param {WaveCreateArgs} args - Arguments to create a Wave.
     * @example
     * // Create one Wave
     * const Wave = await prisma.wave.create({
     *   data: {
     *     // ... data to create a Wave
     *   }
     * })
     * 
     */
    create<T extends WaveCreateArgs>(args: SelectSubset<T, WaveCreateArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Waves.
     * @param {WaveCreateManyArgs} args - Arguments to create many Waves.
     * @example
     * // Create many Waves
     * const wave = await prisma.wave.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WaveCreateManyArgs>(args?: SelectSubset<T, WaveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Waves and returns the data saved in the database.
     * @param {WaveCreateManyAndReturnArgs} args - Arguments to create many Waves.
     * @example
     * // Create many Waves
     * const wave = await prisma.wave.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Waves and only return the `id`
     * const waveWithIdOnly = await prisma.wave.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WaveCreateManyAndReturnArgs>(args?: SelectSubset<T, WaveCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Wave.
     * @param {WaveDeleteArgs} args - Arguments to delete one Wave.
     * @example
     * // Delete one Wave
     * const Wave = await prisma.wave.delete({
     *   where: {
     *     // ... filter to delete one Wave
     *   }
     * })
     * 
     */
    delete<T extends WaveDeleteArgs>(args: SelectSubset<T, WaveDeleteArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Wave.
     * @param {WaveUpdateArgs} args - Arguments to update one Wave.
     * @example
     * // Update one Wave
     * const wave = await prisma.wave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WaveUpdateArgs>(args: SelectSubset<T, WaveUpdateArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Waves.
     * @param {WaveDeleteManyArgs} args - Arguments to filter Waves to delete.
     * @example
     * // Delete a few Waves
     * const { count } = await prisma.wave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WaveDeleteManyArgs>(args?: SelectSubset<T, WaveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Waves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Waves
     * const wave = await prisma.wave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WaveUpdateManyArgs>(args: SelectSubset<T, WaveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Waves and returns the data updated in the database.
     * @param {WaveUpdateManyAndReturnArgs} args - Arguments to update many Waves.
     * @example
     * // Update many Waves
     * const wave = await prisma.wave.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Waves and only return the `id`
     * const waveWithIdOnly = await prisma.wave.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WaveUpdateManyAndReturnArgs>(args: SelectSubset<T, WaveUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Wave.
     * @param {WaveUpsertArgs} args - Arguments to update or create a Wave.
     * @example
     * // Update or create a Wave
     * const wave = await prisma.wave.upsert({
     *   create: {
     *     // ... data to create a Wave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wave we want to update
     *   }
     * })
     */
    upsert<T extends WaveUpsertArgs>(args: SelectSubset<T, WaveUpsertArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Waves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveCountArgs} args - Arguments to filter Waves to count.
     * @example
     * // Count the number of Waves
     * const count = await prisma.wave.count({
     *   where: {
     *     // ... the filter for the Waves we want to count
     *   }
     * })
    **/
    count<T extends WaveCountArgs>(
      args?: Subset<T, WaveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WaveAggregateArgs>(args: Subset<T, WaveAggregateArgs>): Prisma.PrismaPromise<GetWaveAggregateType<T>>

    /**
     * Group by Wave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WaveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WaveGroupByArgs['orderBy'] }
        : { orderBy?: WaveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wave model
   */
  readonly fields: WaveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WaveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ripples<T extends Wave$ripplesArgs<ExtArgs> = {}>(args?: Subset<T, Wave$ripplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wave model
   */
  interface WaveFieldRefs {
    readonly id: FieldRef<"Wave", 'String'>
    readonly name: FieldRef<"Wave", 'String'>
    readonly description: FieldRef<"Wave", 'String'>
    readonly icon: FieldRef<"Wave", 'String'>
    readonly impactCoef: FieldRef<"Wave", 'Float'>
    readonly impactUnit: FieldRef<"Wave", 'String'>
    readonly impactSource: FieldRef<"Wave", 'String'>
    readonly allowedBuckets: FieldRef<"Wave", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Wave findUnique
   */
  export type WaveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter, which Wave to fetch.
     */
    where: WaveWhereUniqueInput
  }

  /**
   * Wave findUniqueOrThrow
   */
  export type WaveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter, which Wave to fetch.
     */
    where: WaveWhereUniqueInput
  }

  /**
   * Wave findFirst
   */
  export type WaveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter, which Wave to fetch.
     */
    where?: WaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Waves to fetch.
     */
    orderBy?: WaveOrderByWithRelationInput | WaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Waves.
     */
    cursor?: WaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Waves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Waves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Waves.
     */
    distinct?: WaveScalarFieldEnum | WaveScalarFieldEnum[]
  }

  /**
   * Wave findFirstOrThrow
   */
  export type WaveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter, which Wave to fetch.
     */
    where?: WaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Waves to fetch.
     */
    orderBy?: WaveOrderByWithRelationInput | WaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Waves.
     */
    cursor?: WaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Waves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Waves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Waves.
     */
    distinct?: WaveScalarFieldEnum | WaveScalarFieldEnum[]
  }

  /**
   * Wave findMany
   */
  export type WaveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter, which Waves to fetch.
     */
    where?: WaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Waves to fetch.
     */
    orderBy?: WaveOrderByWithRelationInput | WaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Waves.
     */
    cursor?: WaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Waves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Waves.
     */
    skip?: number
    distinct?: WaveScalarFieldEnum | WaveScalarFieldEnum[]
  }

  /**
   * Wave create
   */
  export type WaveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * The data needed to create a Wave.
     */
    data: XOR<WaveCreateInput, WaveUncheckedCreateInput>
  }

  /**
   * Wave createMany
   */
  export type WaveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Waves.
     */
    data: WaveCreateManyInput | WaveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wave createManyAndReturn
   */
  export type WaveCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * The data used to create many Waves.
     */
    data: WaveCreateManyInput | WaveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wave update
   */
  export type WaveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * The data needed to update a Wave.
     */
    data: XOR<WaveUpdateInput, WaveUncheckedUpdateInput>
    /**
     * Choose, which Wave to update.
     */
    where: WaveWhereUniqueInput
  }

  /**
   * Wave updateMany
   */
  export type WaveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Waves.
     */
    data: XOR<WaveUpdateManyMutationInput, WaveUncheckedUpdateManyInput>
    /**
     * Filter which Waves to update
     */
    where?: WaveWhereInput
    /**
     * Limit how many Waves to update.
     */
    limit?: number
  }

  /**
   * Wave updateManyAndReturn
   */
  export type WaveUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * The data used to update Waves.
     */
    data: XOR<WaveUpdateManyMutationInput, WaveUncheckedUpdateManyInput>
    /**
     * Filter which Waves to update
     */
    where?: WaveWhereInput
    /**
     * Limit how many Waves to update.
     */
    limit?: number
  }

  /**
   * Wave upsert
   */
  export type WaveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * The filter to search for the Wave to update in case it exists.
     */
    where: WaveWhereUniqueInput
    /**
     * In case the Wave found by the `where` argument doesn't exist, create a new Wave with this data.
     */
    create: XOR<WaveCreateInput, WaveUncheckedCreateInput>
    /**
     * In case the Wave was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WaveUpdateInput, WaveUncheckedUpdateInput>
  }

  /**
   * Wave delete
   */
  export type WaveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter which Wave to delete.
     */
    where: WaveWhereUniqueInput
  }

  /**
   * Wave deleteMany
   */
  export type WaveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Waves to delete
     */
    where?: WaveWhereInput
    /**
     * Limit how many Waves to delete.
     */
    limit?: number
  }

  /**
   * Wave.ripples
   */
  export type Wave$ripplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    where?: RippleWhereInput
    orderBy?: RippleOrderByWithRelationInput | RippleOrderByWithRelationInput[]
    cursor?: RippleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RippleScalarFieldEnum | RippleScalarFieldEnum[]
  }

  /**
   * Wave without action
   */
  export type WaveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
  }


  /**
   * Model Ripple
   */

  export type AggregateRipple = {
    _count: RippleCountAggregateOutputType | null
    _min: RippleMinAggregateOutputType | null
    _max: RippleMaxAggregateOutputType | null
  }

  export type RippleMinAggregateOutputType = {
    id: string | null
    waveId: string | null
    title: string | null
    description: string | null
    createdBy: string | null
    status: string | null
    audience_noun: string | null
    context_label: string | null
    blurb_template: string | null
    default_bucket: string | null
  }

  export type RippleMaxAggregateOutputType = {
    id: string | null
    waveId: string | null
    title: string | null
    description: string | null
    createdBy: string | null
    status: string | null
    audience_noun: string | null
    context_label: string | null
    blurb_template: string | null
    default_bucket: string | null
  }

  export type RippleCountAggregateOutputType = {
    id: number
    waveId: number
    title: number
    description: number
    createdBy: number
    status: number
    audience_noun: number
    context_label: number
    blurb_template: number
    default_bucket: number
    _all: number
  }


  export type RippleMinAggregateInputType = {
    id?: true
    waveId?: true
    title?: true
    description?: true
    createdBy?: true
    status?: true
    audience_noun?: true
    context_label?: true
    blurb_template?: true
    default_bucket?: true
  }

  export type RippleMaxAggregateInputType = {
    id?: true
    waveId?: true
    title?: true
    description?: true
    createdBy?: true
    status?: true
    audience_noun?: true
    context_label?: true
    blurb_template?: true
    default_bucket?: true
  }

  export type RippleCountAggregateInputType = {
    id?: true
    waveId?: true
    title?: true
    description?: true
    createdBy?: true
    status?: true
    audience_noun?: true
    context_label?: true
    blurb_template?: true
    default_bucket?: true
    _all?: true
  }

  export type RippleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ripple to aggregate.
     */
    where?: RippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ripples to fetch.
     */
    orderBy?: RippleOrderByWithRelationInput | RippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ripples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ripples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ripples
    **/
    _count?: true | RippleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RippleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RippleMaxAggregateInputType
  }

  export type GetRippleAggregateType<T extends RippleAggregateArgs> = {
        [P in keyof T & keyof AggregateRipple]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRipple[P]>
      : GetScalarType<T[P], AggregateRipple[P]>
  }




  export type RippleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RippleWhereInput
    orderBy?: RippleOrderByWithAggregationInput | RippleOrderByWithAggregationInput[]
    by: RippleScalarFieldEnum[] | RippleScalarFieldEnum
    having?: RippleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RippleCountAggregateInputType | true
    _min?: RippleMinAggregateInputType
    _max?: RippleMaxAggregateInputType
  }

  export type RippleGroupByOutputType = {
    id: string
    waveId: string
    title: string
    description: string | null
    createdBy: string
    status: string
    audience_noun: string | null
    context_label: string | null
    blurb_template: string | null
    default_bucket: string | null
    _count: RippleCountAggregateOutputType | null
    _min: RippleMinAggregateOutputType | null
    _max: RippleMaxAggregateOutputType | null
  }

  type GetRippleGroupByPayload<T extends RippleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RippleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RippleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RippleGroupByOutputType[P]>
            : GetScalarType<T[P], RippleGroupByOutputType[P]>
        }
      >
    >


  export type RippleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    status?: boolean
    audience_noun?: boolean
    context_label?: boolean
    blurb_template?: boolean
    default_bucket?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    microActions?: boolean | Ripple$microActionsArgs<ExtArgs>
    _count?: boolean | RippleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ripple"]>

  export type RippleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    status?: boolean
    audience_noun?: boolean
    context_label?: boolean
    blurb_template?: boolean
    default_bucket?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ripple"]>

  export type RippleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    status?: boolean
    audience_noun?: boolean
    context_label?: boolean
    blurb_template?: boolean
    default_bucket?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ripple"]>

  export type RippleSelectScalar = {
    id?: boolean
    waveId?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    status?: boolean
    audience_noun?: boolean
    context_label?: boolean
    blurb_template?: boolean
    default_bucket?: boolean
  }

  export type RippleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "waveId" | "title" | "description" | "createdBy" | "status" | "audience_noun" | "context_label" | "blurb_template" | "default_bucket", ExtArgs["result"]["ripple"]>
  export type RippleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    microActions?: boolean | Ripple$microActionsArgs<ExtArgs>
    _count?: boolean | RippleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RippleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }
  export type RippleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }

  export type $RipplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ripple"
    objects: {
      wave: Prisma.$WavePayload<ExtArgs>
      microActions: Prisma.$MicroActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      waveId: string
      title: string
      description: string | null
      createdBy: string
      status: string
      audience_noun: string | null
      context_label: string | null
      blurb_template: string | null
      default_bucket: string | null
    }, ExtArgs["result"]["ripple"]>
    composites: {}
  }

  type RippleGetPayload<S extends boolean | null | undefined | RippleDefaultArgs> = $Result.GetResult<Prisma.$RipplePayload, S>

  type RippleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RippleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RippleCountAggregateInputType | true
    }

  export interface RippleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ripple'], meta: { name: 'Ripple' } }
    /**
     * Find zero or one Ripple that matches the filter.
     * @param {RippleFindUniqueArgs} args - Arguments to find a Ripple
     * @example
     * // Get one Ripple
     * const ripple = await prisma.ripple.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RippleFindUniqueArgs>(args: SelectSubset<T, RippleFindUniqueArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ripple that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RippleFindUniqueOrThrowArgs} args - Arguments to find a Ripple
     * @example
     * // Get one Ripple
     * const ripple = await prisma.ripple.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RippleFindUniqueOrThrowArgs>(args: SelectSubset<T, RippleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ripple that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleFindFirstArgs} args - Arguments to find a Ripple
     * @example
     * // Get one Ripple
     * const ripple = await prisma.ripple.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RippleFindFirstArgs>(args?: SelectSubset<T, RippleFindFirstArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ripple that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleFindFirstOrThrowArgs} args - Arguments to find a Ripple
     * @example
     * // Get one Ripple
     * const ripple = await prisma.ripple.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RippleFindFirstOrThrowArgs>(args?: SelectSubset<T, RippleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ripples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ripples
     * const ripples = await prisma.ripple.findMany()
     * 
     * // Get first 10 Ripples
     * const ripples = await prisma.ripple.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rippleWithIdOnly = await prisma.ripple.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RippleFindManyArgs>(args?: SelectSubset<T, RippleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ripple.
     * @param {RippleCreateArgs} args - Arguments to create a Ripple.
     * @example
     * // Create one Ripple
     * const Ripple = await prisma.ripple.create({
     *   data: {
     *     // ... data to create a Ripple
     *   }
     * })
     * 
     */
    create<T extends RippleCreateArgs>(args: SelectSubset<T, RippleCreateArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ripples.
     * @param {RippleCreateManyArgs} args - Arguments to create many Ripples.
     * @example
     * // Create many Ripples
     * const ripple = await prisma.ripple.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RippleCreateManyArgs>(args?: SelectSubset<T, RippleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ripples and returns the data saved in the database.
     * @param {RippleCreateManyAndReturnArgs} args - Arguments to create many Ripples.
     * @example
     * // Create many Ripples
     * const ripple = await prisma.ripple.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ripples and only return the `id`
     * const rippleWithIdOnly = await prisma.ripple.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RippleCreateManyAndReturnArgs>(args?: SelectSubset<T, RippleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ripple.
     * @param {RippleDeleteArgs} args - Arguments to delete one Ripple.
     * @example
     * // Delete one Ripple
     * const Ripple = await prisma.ripple.delete({
     *   where: {
     *     // ... filter to delete one Ripple
     *   }
     * })
     * 
     */
    delete<T extends RippleDeleteArgs>(args: SelectSubset<T, RippleDeleteArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ripple.
     * @param {RippleUpdateArgs} args - Arguments to update one Ripple.
     * @example
     * // Update one Ripple
     * const ripple = await prisma.ripple.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RippleUpdateArgs>(args: SelectSubset<T, RippleUpdateArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ripples.
     * @param {RippleDeleteManyArgs} args - Arguments to filter Ripples to delete.
     * @example
     * // Delete a few Ripples
     * const { count } = await prisma.ripple.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RippleDeleteManyArgs>(args?: SelectSubset<T, RippleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ripples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ripples
     * const ripple = await prisma.ripple.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RippleUpdateManyArgs>(args: SelectSubset<T, RippleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ripples and returns the data updated in the database.
     * @param {RippleUpdateManyAndReturnArgs} args - Arguments to update many Ripples.
     * @example
     * // Update many Ripples
     * const ripple = await prisma.ripple.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ripples and only return the `id`
     * const rippleWithIdOnly = await prisma.ripple.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RippleUpdateManyAndReturnArgs>(args: SelectSubset<T, RippleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ripple.
     * @param {RippleUpsertArgs} args - Arguments to update or create a Ripple.
     * @example
     * // Update or create a Ripple
     * const ripple = await prisma.ripple.upsert({
     *   create: {
     *     // ... data to create a Ripple
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ripple we want to update
     *   }
     * })
     */
    upsert<T extends RippleUpsertArgs>(args: SelectSubset<T, RippleUpsertArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ripples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleCountArgs} args - Arguments to filter Ripples to count.
     * @example
     * // Count the number of Ripples
     * const count = await prisma.ripple.count({
     *   where: {
     *     // ... the filter for the Ripples we want to count
     *   }
     * })
    **/
    count<T extends RippleCountArgs>(
      args?: Subset<T, RippleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RippleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ripple.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RippleAggregateArgs>(args: Subset<T, RippleAggregateArgs>): Prisma.PrismaPromise<GetRippleAggregateType<T>>

    /**
     * Group by Ripple.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RippleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RippleGroupByArgs['orderBy'] }
        : { orderBy?: RippleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RippleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRippleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ripple model
   */
  readonly fields: RippleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ripple.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RippleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wave<T extends WaveDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WaveDefaultArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    microActions<T extends Ripple$microActionsArgs<ExtArgs> = {}>(args?: Subset<T, Ripple$microActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ripple model
   */
  interface RippleFieldRefs {
    readonly id: FieldRef<"Ripple", 'String'>
    readonly waveId: FieldRef<"Ripple", 'String'>
    readonly title: FieldRef<"Ripple", 'String'>
    readonly description: FieldRef<"Ripple", 'String'>
    readonly createdBy: FieldRef<"Ripple", 'String'>
    readonly status: FieldRef<"Ripple", 'String'>
    readonly audience_noun: FieldRef<"Ripple", 'String'>
    readonly context_label: FieldRef<"Ripple", 'String'>
    readonly blurb_template: FieldRef<"Ripple", 'String'>
    readonly default_bucket: FieldRef<"Ripple", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ripple findUnique
   */
  export type RippleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter, which Ripple to fetch.
     */
    where: RippleWhereUniqueInput
  }

  /**
   * Ripple findUniqueOrThrow
   */
  export type RippleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter, which Ripple to fetch.
     */
    where: RippleWhereUniqueInput
  }

  /**
   * Ripple findFirst
   */
  export type RippleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter, which Ripple to fetch.
     */
    where?: RippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ripples to fetch.
     */
    orderBy?: RippleOrderByWithRelationInput | RippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ripples.
     */
    cursor?: RippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ripples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ripples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ripples.
     */
    distinct?: RippleScalarFieldEnum | RippleScalarFieldEnum[]
  }

  /**
   * Ripple findFirstOrThrow
   */
  export type RippleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter, which Ripple to fetch.
     */
    where?: RippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ripples to fetch.
     */
    orderBy?: RippleOrderByWithRelationInput | RippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ripples.
     */
    cursor?: RippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ripples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ripples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ripples.
     */
    distinct?: RippleScalarFieldEnum | RippleScalarFieldEnum[]
  }

  /**
   * Ripple findMany
   */
  export type RippleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter, which Ripples to fetch.
     */
    where?: RippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ripples to fetch.
     */
    orderBy?: RippleOrderByWithRelationInput | RippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ripples.
     */
    cursor?: RippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ripples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ripples.
     */
    skip?: number
    distinct?: RippleScalarFieldEnum | RippleScalarFieldEnum[]
  }

  /**
   * Ripple create
   */
  export type RippleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * The data needed to create a Ripple.
     */
    data: XOR<RippleCreateInput, RippleUncheckedCreateInput>
  }

  /**
   * Ripple createMany
   */
  export type RippleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ripples.
     */
    data: RippleCreateManyInput | RippleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ripple createManyAndReturn
   */
  export type RippleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * The data used to create many Ripples.
     */
    data: RippleCreateManyInput | RippleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ripple update
   */
  export type RippleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * The data needed to update a Ripple.
     */
    data: XOR<RippleUpdateInput, RippleUncheckedUpdateInput>
    /**
     * Choose, which Ripple to update.
     */
    where: RippleWhereUniqueInput
  }

  /**
   * Ripple updateMany
   */
  export type RippleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ripples.
     */
    data: XOR<RippleUpdateManyMutationInput, RippleUncheckedUpdateManyInput>
    /**
     * Filter which Ripples to update
     */
    where?: RippleWhereInput
    /**
     * Limit how many Ripples to update.
     */
    limit?: number
  }

  /**
   * Ripple updateManyAndReturn
   */
  export type RippleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * The data used to update Ripples.
     */
    data: XOR<RippleUpdateManyMutationInput, RippleUncheckedUpdateManyInput>
    /**
     * Filter which Ripples to update
     */
    where?: RippleWhereInput
    /**
     * Limit how many Ripples to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ripple upsert
   */
  export type RippleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * The filter to search for the Ripple to update in case it exists.
     */
    where: RippleWhereUniqueInput
    /**
     * In case the Ripple found by the `where` argument doesn't exist, create a new Ripple with this data.
     */
    create: XOR<RippleCreateInput, RippleUncheckedCreateInput>
    /**
     * In case the Ripple was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RippleUpdateInput, RippleUncheckedUpdateInput>
  }

  /**
   * Ripple delete
   */
  export type RippleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter which Ripple to delete.
     */
    where: RippleWhereUniqueInput
  }

  /**
   * Ripple deleteMany
   */
  export type RippleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ripples to delete
     */
    where?: RippleWhereInput
    /**
     * Limit how many Ripples to delete.
     */
    limit?: number
  }

  /**
   * Ripple.microActions
   */
  export type Ripple$microActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    where?: MicroActionWhereInput
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    cursor?: MicroActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * Ripple without action
   */
  export type RippleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
  }


  /**
   * Model MicroAction
   */

  export type AggregateMicroAction = {
    _count: MicroActionCountAggregateOutputType | null
    _avg: MicroActionAvgAggregateOutputType | null
    _sum: MicroActionSumAggregateOutputType | null
    _min: MicroActionMinAggregateOutputType | null
    _max: MicroActionMaxAggregateOutputType | null
  }

  export type MicroActionAvgAggregateOutputType = {
    difficulty: number | null
  }

  export type MicroActionSumAggregateOutputType = {
    difficulty: number | null
  }

  export type MicroActionMinAggregateOutputType = {
    id: string | null
    rippleId: string | null
    text: string | null
    difficulty: number | null
    bucket: string | null
    status: string | null
    createdBy: string | null
  }

  export type MicroActionMaxAggregateOutputType = {
    id: string | null
    rippleId: string | null
    text: string | null
    difficulty: number | null
    bucket: string | null
    status: string | null
    createdBy: string | null
  }

  export type MicroActionCountAggregateOutputType = {
    id: number
    rippleId: number
    text: number
    difficulty: number
    bucket: number
    status: number
    createdBy: number
    _all: number
  }


  export type MicroActionAvgAggregateInputType = {
    difficulty?: true
  }

  export type MicroActionSumAggregateInputType = {
    difficulty?: true
  }

  export type MicroActionMinAggregateInputType = {
    id?: true
    rippleId?: true
    text?: true
    difficulty?: true
    bucket?: true
    status?: true
    createdBy?: true
  }

  export type MicroActionMaxAggregateInputType = {
    id?: true
    rippleId?: true
    text?: true
    difficulty?: true
    bucket?: true
    status?: true
    createdBy?: true
  }

  export type MicroActionCountAggregateInputType = {
    id?: true
    rippleId?: true
    text?: true
    difficulty?: true
    bucket?: true
    status?: true
    createdBy?: true
    _all?: true
  }

  export type MicroActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MicroAction to aggregate.
     */
    where?: MicroActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MicroActions to fetch.
     */
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MicroActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MicroActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MicroActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MicroActions
    **/
    _count?: true | MicroActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MicroActionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MicroActionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MicroActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MicroActionMaxAggregateInputType
  }

  export type GetMicroActionAggregateType<T extends MicroActionAggregateArgs> = {
        [P in keyof T & keyof AggregateMicroAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMicroAction[P]>
      : GetScalarType<T[P], AggregateMicroAction[P]>
  }




  export type MicroActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MicroActionWhereInput
    orderBy?: MicroActionOrderByWithAggregationInput | MicroActionOrderByWithAggregationInput[]
    by: MicroActionScalarFieldEnum[] | MicroActionScalarFieldEnum
    having?: MicroActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MicroActionCountAggregateInputType | true
    _avg?: MicroActionAvgAggregateInputType
    _sum?: MicroActionSumAggregateInputType
    _min?: MicroActionMinAggregateInputType
    _max?: MicroActionMaxAggregateInputType
  }

  export type MicroActionGroupByOutputType = {
    id: string
    rippleId: string
    text: string
    difficulty: number
    bucket: string
    status: string
    createdBy: string
    _count: MicroActionCountAggregateOutputType | null
    _avg: MicroActionAvgAggregateOutputType | null
    _sum: MicroActionSumAggregateOutputType | null
    _min: MicroActionMinAggregateOutputType | null
    _max: MicroActionMaxAggregateOutputType | null
  }

  type GetMicroActionGroupByPayload<T extends MicroActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MicroActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MicroActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MicroActionGroupByOutputType[P]>
            : GetScalarType<T[P], MicroActionGroupByOutputType[P]>
        }
      >
    >


  export type MicroActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rippleId?: boolean
    text?: boolean
    difficulty?: boolean
    bucket?: boolean
    status?: boolean
    createdBy?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["microAction"]>

  export type MicroActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rippleId?: boolean
    text?: boolean
    difficulty?: boolean
    bucket?: boolean
    status?: boolean
    createdBy?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["microAction"]>

  export type MicroActionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rippleId?: boolean
    text?: boolean
    difficulty?: boolean
    bucket?: boolean
    status?: boolean
    createdBy?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["microAction"]>

  export type MicroActionSelectScalar = {
    id?: boolean
    rippleId?: boolean
    text?: boolean
    difficulty?: boolean
    bucket?: boolean
    status?: boolean
    createdBy?: boolean
  }

  export type MicroActionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "rippleId" | "text" | "difficulty" | "bucket" | "status" | "createdBy", ExtArgs["result"]["microAction"]>
  export type MicroActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }
  export type MicroActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }
  export type MicroActionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }

  export type $MicroActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MicroAction"
    objects: {
      ripple: Prisma.$RipplePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rippleId: string
      text: string
      difficulty: number
      bucket: string
      status: string
      createdBy: string
    }, ExtArgs["result"]["microAction"]>
    composites: {}
  }

  type MicroActionGetPayload<S extends boolean | null | undefined | MicroActionDefaultArgs> = $Result.GetResult<Prisma.$MicroActionPayload, S>

  type MicroActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MicroActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MicroActionCountAggregateInputType | true
    }

  export interface MicroActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MicroAction'], meta: { name: 'MicroAction' } }
    /**
     * Find zero or one MicroAction that matches the filter.
     * @param {MicroActionFindUniqueArgs} args - Arguments to find a MicroAction
     * @example
     * // Get one MicroAction
     * const microAction = await prisma.microAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MicroActionFindUniqueArgs>(args: SelectSubset<T, MicroActionFindUniqueArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MicroAction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MicroActionFindUniqueOrThrowArgs} args - Arguments to find a MicroAction
     * @example
     * // Get one MicroAction
     * const microAction = await prisma.microAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MicroActionFindUniqueOrThrowArgs>(args: SelectSubset<T, MicroActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MicroAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionFindFirstArgs} args - Arguments to find a MicroAction
     * @example
     * // Get one MicroAction
     * const microAction = await prisma.microAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MicroActionFindFirstArgs>(args?: SelectSubset<T, MicroActionFindFirstArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MicroAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionFindFirstOrThrowArgs} args - Arguments to find a MicroAction
     * @example
     * // Get one MicroAction
     * const microAction = await prisma.microAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MicroActionFindFirstOrThrowArgs>(args?: SelectSubset<T, MicroActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MicroActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MicroActions
     * const microActions = await prisma.microAction.findMany()
     * 
     * // Get first 10 MicroActions
     * const microActions = await prisma.microAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const microActionWithIdOnly = await prisma.microAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MicroActionFindManyArgs>(args?: SelectSubset<T, MicroActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MicroAction.
     * @param {MicroActionCreateArgs} args - Arguments to create a MicroAction.
     * @example
     * // Create one MicroAction
     * const MicroAction = await prisma.microAction.create({
     *   data: {
     *     // ... data to create a MicroAction
     *   }
     * })
     * 
     */
    create<T extends MicroActionCreateArgs>(args: SelectSubset<T, MicroActionCreateArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MicroActions.
     * @param {MicroActionCreateManyArgs} args - Arguments to create many MicroActions.
     * @example
     * // Create many MicroActions
     * const microAction = await prisma.microAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MicroActionCreateManyArgs>(args?: SelectSubset<T, MicroActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MicroActions and returns the data saved in the database.
     * @param {MicroActionCreateManyAndReturnArgs} args - Arguments to create many MicroActions.
     * @example
     * // Create many MicroActions
     * const microAction = await prisma.microAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MicroActions and only return the `id`
     * const microActionWithIdOnly = await prisma.microAction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MicroActionCreateManyAndReturnArgs>(args?: SelectSubset<T, MicroActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MicroAction.
     * @param {MicroActionDeleteArgs} args - Arguments to delete one MicroAction.
     * @example
     * // Delete one MicroAction
     * const MicroAction = await prisma.microAction.delete({
     *   where: {
     *     // ... filter to delete one MicroAction
     *   }
     * })
     * 
     */
    delete<T extends MicroActionDeleteArgs>(args: SelectSubset<T, MicroActionDeleteArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MicroAction.
     * @param {MicroActionUpdateArgs} args - Arguments to update one MicroAction.
     * @example
     * // Update one MicroAction
     * const microAction = await prisma.microAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MicroActionUpdateArgs>(args: SelectSubset<T, MicroActionUpdateArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MicroActions.
     * @param {MicroActionDeleteManyArgs} args - Arguments to filter MicroActions to delete.
     * @example
     * // Delete a few MicroActions
     * const { count } = await prisma.microAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MicroActionDeleteManyArgs>(args?: SelectSubset<T, MicroActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MicroActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MicroActions
     * const microAction = await prisma.microAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MicroActionUpdateManyArgs>(args: SelectSubset<T, MicroActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MicroActions and returns the data updated in the database.
     * @param {MicroActionUpdateManyAndReturnArgs} args - Arguments to update many MicroActions.
     * @example
     * // Update many MicroActions
     * const microAction = await prisma.microAction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MicroActions and only return the `id`
     * const microActionWithIdOnly = await prisma.microAction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MicroActionUpdateManyAndReturnArgs>(args: SelectSubset<T, MicroActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MicroAction.
     * @param {MicroActionUpsertArgs} args - Arguments to update or create a MicroAction.
     * @example
     * // Update or create a MicroAction
     * const microAction = await prisma.microAction.upsert({
     *   create: {
     *     // ... data to create a MicroAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MicroAction we want to update
     *   }
     * })
     */
    upsert<T extends MicroActionUpsertArgs>(args: SelectSubset<T, MicroActionUpsertArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MicroActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionCountArgs} args - Arguments to filter MicroActions to count.
     * @example
     * // Count the number of MicroActions
     * const count = await prisma.microAction.count({
     *   where: {
     *     // ... the filter for the MicroActions we want to count
     *   }
     * })
    **/
    count<T extends MicroActionCountArgs>(
      args?: Subset<T, MicroActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MicroActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MicroAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MicroActionAggregateArgs>(args: Subset<T, MicroActionAggregateArgs>): Prisma.PrismaPromise<GetMicroActionAggregateType<T>>

    /**
     * Group by MicroAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MicroActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MicroActionGroupByArgs['orderBy'] }
        : { orderBy?: MicroActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MicroActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMicroActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MicroAction model
   */
  readonly fields: MicroActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MicroAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MicroActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ripple<T extends RippleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RippleDefaultArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MicroAction model
   */
  interface MicroActionFieldRefs {
    readonly id: FieldRef<"MicroAction", 'String'>
    readonly rippleId: FieldRef<"MicroAction", 'String'>
    readonly text: FieldRef<"MicroAction", 'String'>
    readonly difficulty: FieldRef<"MicroAction", 'Int'>
    readonly bucket: FieldRef<"MicroAction", 'String'>
    readonly status: FieldRef<"MicroAction", 'String'>
    readonly createdBy: FieldRef<"MicroAction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MicroAction findUnique
   */
  export type MicroActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter, which MicroAction to fetch.
     */
    where: MicroActionWhereUniqueInput
  }

  /**
   * MicroAction findUniqueOrThrow
   */
  export type MicroActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter, which MicroAction to fetch.
     */
    where: MicroActionWhereUniqueInput
  }

  /**
   * MicroAction findFirst
   */
  export type MicroActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter, which MicroAction to fetch.
     */
    where?: MicroActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MicroActions to fetch.
     */
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MicroActions.
     */
    cursor?: MicroActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MicroActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MicroActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MicroActions.
     */
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * MicroAction findFirstOrThrow
   */
  export type MicroActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter, which MicroAction to fetch.
     */
    where?: MicroActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MicroActions to fetch.
     */
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MicroActions.
     */
    cursor?: MicroActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MicroActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MicroActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MicroActions.
     */
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * MicroAction findMany
   */
  export type MicroActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter, which MicroActions to fetch.
     */
    where?: MicroActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MicroActions to fetch.
     */
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MicroActions.
     */
    cursor?: MicroActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MicroActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MicroActions.
     */
    skip?: number
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * MicroAction create
   */
  export type MicroActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * The data needed to create a MicroAction.
     */
    data: XOR<MicroActionCreateInput, MicroActionUncheckedCreateInput>
  }

  /**
   * MicroAction createMany
   */
  export type MicroActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MicroActions.
     */
    data: MicroActionCreateManyInput | MicroActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MicroAction createManyAndReturn
   */
  export type MicroActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * The data used to create many MicroActions.
     */
    data: MicroActionCreateManyInput | MicroActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MicroAction update
   */
  export type MicroActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * The data needed to update a MicroAction.
     */
    data: XOR<MicroActionUpdateInput, MicroActionUncheckedUpdateInput>
    /**
     * Choose, which MicroAction to update.
     */
    where: MicroActionWhereUniqueInput
  }

  /**
   * MicroAction updateMany
   */
  export type MicroActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MicroActions.
     */
    data: XOR<MicroActionUpdateManyMutationInput, MicroActionUncheckedUpdateManyInput>
    /**
     * Filter which MicroActions to update
     */
    where?: MicroActionWhereInput
    /**
     * Limit how many MicroActions to update.
     */
    limit?: number
  }

  /**
   * MicroAction updateManyAndReturn
   */
  export type MicroActionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * The data used to update MicroActions.
     */
    data: XOR<MicroActionUpdateManyMutationInput, MicroActionUncheckedUpdateManyInput>
    /**
     * Filter which MicroActions to update
     */
    where?: MicroActionWhereInput
    /**
     * Limit how many MicroActions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MicroAction upsert
   */
  export type MicroActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * The filter to search for the MicroAction to update in case it exists.
     */
    where: MicroActionWhereUniqueInput
    /**
     * In case the MicroAction found by the `where` argument doesn't exist, create a new MicroAction with this data.
     */
    create: XOR<MicroActionCreateInput, MicroActionUncheckedCreateInput>
    /**
     * In case the MicroAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MicroActionUpdateInput, MicroActionUncheckedUpdateInput>
  }

  /**
   * MicroAction delete
   */
  export type MicroActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter which MicroAction to delete.
     */
    where: MicroActionWhereUniqueInput
  }

  /**
   * MicroAction deleteMany
   */
  export type MicroActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MicroActions to delete
     */
    where?: MicroActionWhereInput
    /**
     * Limit how many MicroActions to delete.
     */
    limit?: number
  }

  /**
   * MicroAction without action
   */
  export type MicroActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const WaveScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    icon: 'icon',
    impactCoef: 'impactCoef',
    impactUnit: 'impactUnit',
    impactSource: 'impactSource',
    allowedBuckets: 'allowedBuckets'
  };

  export type WaveScalarFieldEnum = (typeof WaveScalarFieldEnum)[keyof typeof WaveScalarFieldEnum]


  export const RippleScalarFieldEnum: {
    id: 'id',
    waveId: 'waveId',
    title: 'title',
    description: 'description',
    createdBy: 'createdBy',
    status: 'status',
    audience_noun: 'audience_noun',
    context_label: 'context_label',
    blurb_template: 'blurb_template',
    default_bucket: 'default_bucket'
  };

  export type RippleScalarFieldEnum = (typeof RippleScalarFieldEnum)[keyof typeof RippleScalarFieldEnum]


  export const MicroActionScalarFieldEnum: {
    id: 'id',
    rippleId: 'rippleId',
    text: 'text',
    difficulty: 'difficulty',
    bucket: 'bucket',
    status: 'status',
    createdBy: 'createdBy'
  };

  export type MicroActionScalarFieldEnum = (typeof MicroActionScalarFieldEnum)[keyof typeof MicroActionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type WaveWhereInput = {
    AND?: WaveWhereInput | WaveWhereInput[]
    OR?: WaveWhereInput[]
    NOT?: WaveWhereInput | WaveWhereInput[]
    id?: StringFilter<"Wave"> | string
    name?: StringFilter<"Wave"> | string
    description?: StringFilter<"Wave"> | string
    icon?: StringNullableFilter<"Wave"> | string | null
    impactCoef?: FloatFilter<"Wave"> | number
    impactUnit?: StringFilter<"Wave"> | string
    impactSource?: StringFilter<"Wave"> | string
    allowedBuckets?: StringFilter<"Wave"> | string
    ripples?: RippleListRelationFilter
  }

  export type WaveOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrderInput | SortOrder
    impactCoef?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    allowedBuckets?: SortOrder
    ripples?: RippleOrderByRelationAggregateInput
  }

  export type WaveWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: WaveWhereInput | WaveWhereInput[]
    OR?: WaveWhereInput[]
    NOT?: WaveWhereInput | WaveWhereInput[]
    description?: StringFilter<"Wave"> | string
    icon?: StringNullableFilter<"Wave"> | string | null
    impactCoef?: FloatFilter<"Wave"> | number
    impactUnit?: StringFilter<"Wave"> | string
    impactSource?: StringFilter<"Wave"> | string
    allowedBuckets?: StringFilter<"Wave"> | string
    ripples?: RippleListRelationFilter
  }, "id" | "name">

  export type WaveOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrderInput | SortOrder
    impactCoef?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    allowedBuckets?: SortOrder
    _count?: WaveCountOrderByAggregateInput
    _avg?: WaveAvgOrderByAggregateInput
    _max?: WaveMaxOrderByAggregateInput
    _min?: WaveMinOrderByAggregateInput
    _sum?: WaveSumOrderByAggregateInput
  }

  export type WaveScalarWhereWithAggregatesInput = {
    AND?: WaveScalarWhereWithAggregatesInput | WaveScalarWhereWithAggregatesInput[]
    OR?: WaveScalarWhereWithAggregatesInput[]
    NOT?: WaveScalarWhereWithAggregatesInput | WaveScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Wave"> | string
    name?: StringWithAggregatesFilter<"Wave"> | string
    description?: StringWithAggregatesFilter<"Wave"> | string
    icon?: StringNullableWithAggregatesFilter<"Wave"> | string | null
    impactCoef?: FloatWithAggregatesFilter<"Wave"> | number
    impactUnit?: StringWithAggregatesFilter<"Wave"> | string
    impactSource?: StringWithAggregatesFilter<"Wave"> | string
    allowedBuckets?: StringWithAggregatesFilter<"Wave"> | string
  }

  export type RippleWhereInput = {
    AND?: RippleWhereInput | RippleWhereInput[]
    OR?: RippleWhereInput[]
    NOT?: RippleWhereInput | RippleWhereInput[]
    id?: StringFilter<"Ripple"> | string
    waveId?: StringFilter<"Ripple"> | string
    title?: StringFilter<"Ripple"> | string
    description?: StringNullableFilter<"Ripple"> | string | null
    createdBy?: StringFilter<"Ripple"> | string
    status?: StringFilter<"Ripple"> | string
    audience_noun?: StringNullableFilter<"Ripple"> | string | null
    context_label?: StringNullableFilter<"Ripple"> | string | null
    blurb_template?: StringNullableFilter<"Ripple"> | string | null
    default_bucket?: StringNullableFilter<"Ripple"> | string | null
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
    microActions?: MicroActionListRelationFilter
  }

  export type RippleOrderByWithRelationInput = {
    id?: SortOrder
    waveId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    status?: SortOrder
    audience_noun?: SortOrderInput | SortOrder
    context_label?: SortOrderInput | SortOrder
    blurb_template?: SortOrderInput | SortOrder
    default_bucket?: SortOrderInput | SortOrder
    wave?: WaveOrderByWithRelationInput
    microActions?: MicroActionOrderByRelationAggregateInput
  }

  export type RippleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RippleWhereInput | RippleWhereInput[]
    OR?: RippleWhereInput[]
    NOT?: RippleWhereInput | RippleWhereInput[]
    waveId?: StringFilter<"Ripple"> | string
    title?: StringFilter<"Ripple"> | string
    description?: StringNullableFilter<"Ripple"> | string | null
    createdBy?: StringFilter<"Ripple"> | string
    status?: StringFilter<"Ripple"> | string
    audience_noun?: StringNullableFilter<"Ripple"> | string | null
    context_label?: StringNullableFilter<"Ripple"> | string | null
    blurb_template?: StringNullableFilter<"Ripple"> | string | null
    default_bucket?: StringNullableFilter<"Ripple"> | string | null
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
    microActions?: MicroActionListRelationFilter
  }, "id">

  export type RippleOrderByWithAggregationInput = {
    id?: SortOrder
    waveId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    status?: SortOrder
    audience_noun?: SortOrderInput | SortOrder
    context_label?: SortOrderInput | SortOrder
    blurb_template?: SortOrderInput | SortOrder
    default_bucket?: SortOrderInput | SortOrder
    _count?: RippleCountOrderByAggregateInput
    _max?: RippleMaxOrderByAggregateInput
    _min?: RippleMinOrderByAggregateInput
  }

  export type RippleScalarWhereWithAggregatesInput = {
    AND?: RippleScalarWhereWithAggregatesInput | RippleScalarWhereWithAggregatesInput[]
    OR?: RippleScalarWhereWithAggregatesInput[]
    NOT?: RippleScalarWhereWithAggregatesInput | RippleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ripple"> | string
    waveId?: StringWithAggregatesFilter<"Ripple"> | string
    title?: StringWithAggregatesFilter<"Ripple"> | string
    description?: StringNullableWithAggregatesFilter<"Ripple"> | string | null
    createdBy?: StringWithAggregatesFilter<"Ripple"> | string
    status?: StringWithAggregatesFilter<"Ripple"> | string
    audience_noun?: StringNullableWithAggregatesFilter<"Ripple"> | string | null
    context_label?: StringNullableWithAggregatesFilter<"Ripple"> | string | null
    blurb_template?: StringNullableWithAggregatesFilter<"Ripple"> | string | null
    default_bucket?: StringNullableWithAggregatesFilter<"Ripple"> | string | null
  }

  export type MicroActionWhereInput = {
    AND?: MicroActionWhereInput | MicroActionWhereInput[]
    OR?: MicroActionWhereInput[]
    NOT?: MicroActionWhereInput | MicroActionWhereInput[]
    id?: StringFilter<"MicroAction"> | string
    rippleId?: StringFilter<"MicroAction"> | string
    text?: StringFilter<"MicroAction"> | string
    difficulty?: IntFilter<"MicroAction"> | number
    bucket?: StringFilter<"MicroAction"> | string
    status?: StringFilter<"MicroAction"> | string
    createdBy?: StringFilter<"MicroAction"> | string
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
  }

  export type MicroActionOrderByWithRelationInput = {
    id?: SortOrder
    rippleId?: SortOrder
    text?: SortOrder
    difficulty?: SortOrder
    bucket?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    ripple?: RippleOrderByWithRelationInput
  }

  export type MicroActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MicroActionWhereInput | MicroActionWhereInput[]
    OR?: MicroActionWhereInput[]
    NOT?: MicroActionWhereInput | MicroActionWhereInput[]
    rippleId?: StringFilter<"MicroAction"> | string
    text?: StringFilter<"MicroAction"> | string
    difficulty?: IntFilter<"MicroAction"> | number
    bucket?: StringFilter<"MicroAction"> | string
    status?: StringFilter<"MicroAction"> | string
    createdBy?: StringFilter<"MicroAction"> | string
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
  }, "id">

  export type MicroActionOrderByWithAggregationInput = {
    id?: SortOrder
    rippleId?: SortOrder
    text?: SortOrder
    difficulty?: SortOrder
    bucket?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    _count?: MicroActionCountOrderByAggregateInput
    _avg?: MicroActionAvgOrderByAggregateInput
    _max?: MicroActionMaxOrderByAggregateInput
    _min?: MicroActionMinOrderByAggregateInput
    _sum?: MicroActionSumOrderByAggregateInput
  }

  export type MicroActionScalarWhereWithAggregatesInput = {
    AND?: MicroActionScalarWhereWithAggregatesInput | MicroActionScalarWhereWithAggregatesInput[]
    OR?: MicroActionScalarWhereWithAggregatesInput[]
    NOT?: MicroActionScalarWhereWithAggregatesInput | MicroActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MicroAction"> | string
    rippleId?: StringWithAggregatesFilter<"MicroAction"> | string
    text?: StringWithAggregatesFilter<"MicroAction"> | string
    difficulty?: IntWithAggregatesFilter<"MicroAction"> | number
    bucket?: StringWithAggregatesFilter<"MicroAction"> | string
    status?: StringWithAggregatesFilter<"MicroAction"> | string
    createdBy?: StringWithAggregatesFilter<"MicroAction"> | string
  }

  export type WaveCreateInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    impactCoef: number
    impactUnit: string
    impactSource: string
    allowedBuckets: string
    ripples?: RippleCreateNestedManyWithoutWaveInput
  }

  export type WaveUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    impactCoef: number
    impactUnit: string
    impactSource: string
    allowedBuckets: string
    ripples?: RippleUncheckedCreateNestedManyWithoutWaveInput
  }

  export type WaveUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUpdateManyWithoutWaveNestedInput
  }

  export type WaveUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUncheckedUpdateManyWithoutWaveNestedInput
  }

  export type WaveCreateManyInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    impactCoef: number
    impactUnit: string
    impactSource: string
    allowedBuckets: string
  }

  export type WaveUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
  }

  export type WaveUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
  }

  export type RippleCreateInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    wave: WaveCreateNestedOneWithoutRipplesInput
    microActions?: MicroActionCreateNestedManyWithoutRippleInput
  }

  export type RippleUncheckedCreateInput = {
    id?: string
    waveId: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    microActions?: MicroActionUncheckedCreateNestedManyWithoutRippleInput
  }

  export type RippleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    wave?: WaveUpdateOneRequiredWithoutRipplesNestedInput
    microActions?: MicroActionUpdateManyWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    microActions?: MicroActionUncheckedUpdateManyWithoutRippleNestedInput
  }

  export type RippleCreateManyInput = {
    id?: string
    waveId: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
  }

  export type RippleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RippleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MicroActionCreateInput = {
    id?: string
    text: string
    difficulty?: number
    bucket: string
    status?: string
    createdBy?: string
    ripple: RippleCreateNestedOneWithoutMicroActionsInput
  }

  export type MicroActionUncheckedCreateInput = {
    id?: string
    rippleId: string
    text: string
    difficulty?: number
    bucket: string
    status?: string
    createdBy?: string
  }

  export type MicroActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    ripple?: RippleUpdateOneRequiredWithoutMicroActionsNestedInput
  }

  export type MicroActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type MicroActionCreateManyInput = {
    id?: string
    rippleId: string
    text: string
    difficulty?: number
    bucket: string
    status?: string
    createdBy?: string
  }

  export type MicroActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type MicroActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type RippleListRelationFilter = {
    every?: RippleWhereInput
    some?: RippleWhereInput
    none?: RippleWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RippleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WaveCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    impactCoef?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    allowedBuckets?: SortOrder
  }

  export type WaveAvgOrderByAggregateInput = {
    impactCoef?: SortOrder
  }

  export type WaveMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    impactCoef?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    allowedBuckets?: SortOrder
  }

  export type WaveMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    impactCoef?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    allowedBuckets?: SortOrder
  }

  export type WaveSumOrderByAggregateInput = {
    impactCoef?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type WaveScalarRelationFilter = {
    is?: WaveWhereInput
    isNot?: WaveWhereInput
  }

  export type MicroActionListRelationFilter = {
    every?: MicroActionWhereInput
    some?: MicroActionWhereInput
    none?: MicroActionWhereInput
  }

  export type MicroActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RippleCountOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    status?: SortOrder
    audience_noun?: SortOrder
    context_label?: SortOrder
    blurb_template?: SortOrder
    default_bucket?: SortOrder
  }

  export type RippleMaxOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    status?: SortOrder
    audience_noun?: SortOrder
    context_label?: SortOrder
    blurb_template?: SortOrder
    default_bucket?: SortOrder
  }

  export type RippleMinOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    status?: SortOrder
    audience_noun?: SortOrder
    context_label?: SortOrder
    blurb_template?: SortOrder
    default_bucket?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RippleScalarRelationFilter = {
    is?: RippleWhereInput
    isNot?: RippleWhereInput
  }

  export type MicroActionCountOrderByAggregateInput = {
    id?: SortOrder
    rippleId?: SortOrder
    text?: SortOrder
    difficulty?: SortOrder
    bucket?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
  }

  export type MicroActionAvgOrderByAggregateInput = {
    difficulty?: SortOrder
  }

  export type MicroActionMaxOrderByAggregateInput = {
    id?: SortOrder
    rippleId?: SortOrder
    text?: SortOrder
    difficulty?: SortOrder
    bucket?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
  }

  export type MicroActionMinOrderByAggregateInput = {
    id?: SortOrder
    rippleId?: SortOrder
    text?: SortOrder
    difficulty?: SortOrder
    bucket?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
  }

  export type MicroActionSumOrderByAggregateInput = {
    difficulty?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type RippleCreateNestedManyWithoutWaveInput = {
    create?: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput> | RippleCreateWithoutWaveInput[] | RippleUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: RippleCreateOrConnectWithoutWaveInput | RippleCreateOrConnectWithoutWaveInput[]
    createMany?: RippleCreateManyWaveInputEnvelope
    connect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
  }

  export type RippleUncheckedCreateNestedManyWithoutWaveInput = {
    create?: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput> | RippleCreateWithoutWaveInput[] | RippleUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: RippleCreateOrConnectWithoutWaveInput | RippleCreateOrConnectWithoutWaveInput[]
    createMany?: RippleCreateManyWaveInputEnvelope
    connect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RippleUpdateManyWithoutWaveNestedInput = {
    create?: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput> | RippleCreateWithoutWaveInput[] | RippleUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: RippleCreateOrConnectWithoutWaveInput | RippleCreateOrConnectWithoutWaveInput[]
    upsert?: RippleUpsertWithWhereUniqueWithoutWaveInput | RippleUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: RippleCreateManyWaveInputEnvelope
    set?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    disconnect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    delete?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    connect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    update?: RippleUpdateWithWhereUniqueWithoutWaveInput | RippleUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: RippleUpdateManyWithWhereWithoutWaveInput | RippleUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: RippleScalarWhereInput | RippleScalarWhereInput[]
  }

  export type RippleUncheckedUpdateManyWithoutWaveNestedInput = {
    create?: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput> | RippleCreateWithoutWaveInput[] | RippleUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: RippleCreateOrConnectWithoutWaveInput | RippleCreateOrConnectWithoutWaveInput[]
    upsert?: RippleUpsertWithWhereUniqueWithoutWaveInput | RippleUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: RippleCreateManyWaveInputEnvelope
    set?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    disconnect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    delete?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    connect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    update?: RippleUpdateWithWhereUniqueWithoutWaveInput | RippleUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: RippleUpdateManyWithWhereWithoutWaveInput | RippleUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: RippleScalarWhereInput | RippleScalarWhereInput[]
  }

  export type WaveCreateNestedOneWithoutRipplesInput = {
    create?: XOR<WaveCreateWithoutRipplesInput, WaveUncheckedCreateWithoutRipplesInput>
    connectOrCreate?: WaveCreateOrConnectWithoutRipplesInput
    connect?: WaveWhereUniqueInput
  }

  export type MicroActionCreateNestedManyWithoutRippleInput = {
    create?: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput> | MicroActionCreateWithoutRippleInput[] | MicroActionUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutRippleInput | MicroActionCreateOrConnectWithoutRippleInput[]
    createMany?: MicroActionCreateManyRippleInputEnvelope
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
  }

  export type MicroActionUncheckedCreateNestedManyWithoutRippleInput = {
    create?: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput> | MicroActionCreateWithoutRippleInput[] | MicroActionUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutRippleInput | MicroActionCreateOrConnectWithoutRippleInput[]
    createMany?: MicroActionCreateManyRippleInputEnvelope
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
  }

  export type WaveUpdateOneRequiredWithoutRipplesNestedInput = {
    create?: XOR<WaveCreateWithoutRipplesInput, WaveUncheckedCreateWithoutRipplesInput>
    connectOrCreate?: WaveCreateOrConnectWithoutRipplesInput
    upsert?: WaveUpsertWithoutRipplesInput
    connect?: WaveWhereUniqueInput
    update?: XOR<XOR<WaveUpdateToOneWithWhereWithoutRipplesInput, WaveUpdateWithoutRipplesInput>, WaveUncheckedUpdateWithoutRipplesInput>
  }

  export type MicroActionUpdateManyWithoutRippleNestedInput = {
    create?: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput> | MicroActionCreateWithoutRippleInput[] | MicroActionUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutRippleInput | MicroActionCreateOrConnectWithoutRippleInput[]
    upsert?: MicroActionUpsertWithWhereUniqueWithoutRippleInput | MicroActionUpsertWithWhereUniqueWithoutRippleInput[]
    createMany?: MicroActionCreateManyRippleInputEnvelope
    set?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    disconnect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    delete?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    update?: MicroActionUpdateWithWhereUniqueWithoutRippleInput | MicroActionUpdateWithWhereUniqueWithoutRippleInput[]
    updateMany?: MicroActionUpdateManyWithWhereWithoutRippleInput | MicroActionUpdateManyWithWhereWithoutRippleInput[]
    deleteMany?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
  }

  export type MicroActionUncheckedUpdateManyWithoutRippleNestedInput = {
    create?: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput> | MicroActionCreateWithoutRippleInput[] | MicroActionUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutRippleInput | MicroActionCreateOrConnectWithoutRippleInput[]
    upsert?: MicroActionUpsertWithWhereUniqueWithoutRippleInput | MicroActionUpsertWithWhereUniqueWithoutRippleInput[]
    createMany?: MicroActionCreateManyRippleInputEnvelope
    set?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    disconnect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    delete?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    update?: MicroActionUpdateWithWhereUniqueWithoutRippleInput | MicroActionUpdateWithWhereUniqueWithoutRippleInput[]
    updateMany?: MicroActionUpdateManyWithWhereWithoutRippleInput | MicroActionUpdateManyWithWhereWithoutRippleInput[]
    deleteMany?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
  }

  export type RippleCreateNestedOneWithoutMicroActionsInput = {
    create?: XOR<RippleCreateWithoutMicroActionsInput, RippleUncheckedCreateWithoutMicroActionsInput>
    connectOrCreate?: RippleCreateOrConnectWithoutMicroActionsInput
    connect?: RippleWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RippleUpdateOneRequiredWithoutMicroActionsNestedInput = {
    create?: XOR<RippleCreateWithoutMicroActionsInput, RippleUncheckedCreateWithoutMicroActionsInput>
    connectOrCreate?: RippleCreateOrConnectWithoutMicroActionsInput
    upsert?: RippleUpsertWithoutMicroActionsInput
    connect?: RippleWhereUniqueInput
    update?: XOR<XOR<RippleUpdateToOneWithWhereWithoutMicroActionsInput, RippleUpdateWithoutMicroActionsInput>, RippleUncheckedUpdateWithoutMicroActionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type RippleCreateWithoutWaveInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    microActions?: MicroActionCreateNestedManyWithoutRippleInput
  }

  export type RippleUncheckedCreateWithoutWaveInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    microActions?: MicroActionUncheckedCreateNestedManyWithoutRippleInput
  }

  export type RippleCreateOrConnectWithoutWaveInput = {
    where: RippleWhereUniqueInput
    create: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput>
  }

  export type RippleCreateManyWaveInputEnvelope = {
    data: RippleCreateManyWaveInput | RippleCreateManyWaveInput[]
    skipDuplicates?: boolean
  }

  export type RippleUpsertWithWhereUniqueWithoutWaveInput = {
    where: RippleWhereUniqueInput
    update: XOR<RippleUpdateWithoutWaveInput, RippleUncheckedUpdateWithoutWaveInput>
    create: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput>
  }

  export type RippleUpdateWithWhereUniqueWithoutWaveInput = {
    where: RippleWhereUniqueInput
    data: XOR<RippleUpdateWithoutWaveInput, RippleUncheckedUpdateWithoutWaveInput>
  }

  export type RippleUpdateManyWithWhereWithoutWaveInput = {
    where: RippleScalarWhereInput
    data: XOR<RippleUpdateManyMutationInput, RippleUncheckedUpdateManyWithoutWaveInput>
  }

  export type RippleScalarWhereInput = {
    AND?: RippleScalarWhereInput | RippleScalarWhereInput[]
    OR?: RippleScalarWhereInput[]
    NOT?: RippleScalarWhereInput | RippleScalarWhereInput[]
    id?: StringFilter<"Ripple"> | string
    waveId?: StringFilter<"Ripple"> | string
    title?: StringFilter<"Ripple"> | string
    description?: StringNullableFilter<"Ripple"> | string | null
    createdBy?: StringFilter<"Ripple"> | string
    status?: StringFilter<"Ripple"> | string
    audience_noun?: StringNullableFilter<"Ripple"> | string | null
    context_label?: StringNullableFilter<"Ripple"> | string | null
    blurb_template?: StringNullableFilter<"Ripple"> | string | null
    default_bucket?: StringNullableFilter<"Ripple"> | string | null
  }

  export type WaveCreateWithoutRipplesInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    impactCoef: number
    impactUnit: string
    impactSource: string
    allowedBuckets: string
  }

  export type WaveUncheckedCreateWithoutRipplesInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    impactCoef: number
    impactUnit: string
    impactSource: string
    allowedBuckets: string
  }

  export type WaveCreateOrConnectWithoutRipplesInput = {
    where: WaveWhereUniqueInput
    create: XOR<WaveCreateWithoutRipplesInput, WaveUncheckedCreateWithoutRipplesInput>
  }

  export type MicroActionCreateWithoutRippleInput = {
    id?: string
    text: string
    difficulty?: number
    bucket: string
    status?: string
    createdBy?: string
  }

  export type MicroActionUncheckedCreateWithoutRippleInput = {
    id?: string
    text: string
    difficulty?: number
    bucket: string
    status?: string
    createdBy?: string
  }

  export type MicroActionCreateOrConnectWithoutRippleInput = {
    where: MicroActionWhereUniqueInput
    create: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput>
  }

  export type MicroActionCreateManyRippleInputEnvelope = {
    data: MicroActionCreateManyRippleInput | MicroActionCreateManyRippleInput[]
    skipDuplicates?: boolean
  }

  export type WaveUpsertWithoutRipplesInput = {
    update: XOR<WaveUpdateWithoutRipplesInput, WaveUncheckedUpdateWithoutRipplesInput>
    create: XOR<WaveCreateWithoutRipplesInput, WaveUncheckedCreateWithoutRipplesInput>
    where?: WaveWhereInput
  }

  export type WaveUpdateToOneWithWhereWithoutRipplesInput = {
    where?: WaveWhereInput
    data: XOR<WaveUpdateWithoutRipplesInput, WaveUncheckedUpdateWithoutRipplesInput>
  }

  export type WaveUpdateWithoutRipplesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
  }

  export type WaveUncheckedUpdateWithoutRipplesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
  }

  export type MicroActionUpsertWithWhereUniqueWithoutRippleInput = {
    where: MicroActionWhereUniqueInput
    update: XOR<MicroActionUpdateWithoutRippleInput, MicroActionUncheckedUpdateWithoutRippleInput>
    create: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput>
  }

  export type MicroActionUpdateWithWhereUniqueWithoutRippleInput = {
    where: MicroActionWhereUniqueInput
    data: XOR<MicroActionUpdateWithoutRippleInput, MicroActionUncheckedUpdateWithoutRippleInput>
  }

  export type MicroActionUpdateManyWithWhereWithoutRippleInput = {
    where: MicroActionScalarWhereInput
    data: XOR<MicroActionUpdateManyMutationInput, MicroActionUncheckedUpdateManyWithoutRippleInput>
  }

  export type MicroActionScalarWhereInput = {
    AND?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
    OR?: MicroActionScalarWhereInput[]
    NOT?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
    id?: StringFilter<"MicroAction"> | string
    rippleId?: StringFilter<"MicroAction"> | string
    text?: StringFilter<"MicroAction"> | string
    difficulty?: IntFilter<"MicroAction"> | number
    bucket?: StringFilter<"MicroAction"> | string
    status?: StringFilter<"MicroAction"> | string
    createdBy?: StringFilter<"MicroAction"> | string
  }

  export type RippleCreateWithoutMicroActionsInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    wave: WaveCreateNestedOneWithoutRipplesInput
  }

  export type RippleUncheckedCreateWithoutMicroActionsInput = {
    id?: string
    waveId: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
  }

  export type RippleCreateOrConnectWithoutMicroActionsInput = {
    where: RippleWhereUniqueInput
    create: XOR<RippleCreateWithoutMicroActionsInput, RippleUncheckedCreateWithoutMicroActionsInput>
  }

  export type RippleUpsertWithoutMicroActionsInput = {
    update: XOR<RippleUpdateWithoutMicroActionsInput, RippleUncheckedUpdateWithoutMicroActionsInput>
    create: XOR<RippleCreateWithoutMicroActionsInput, RippleUncheckedCreateWithoutMicroActionsInput>
    where?: RippleWhereInput
  }

  export type RippleUpdateToOneWithWhereWithoutMicroActionsInput = {
    where?: RippleWhereInput
    data: XOR<RippleUpdateWithoutMicroActionsInput, RippleUncheckedUpdateWithoutMicroActionsInput>
  }

  export type RippleUpdateWithoutMicroActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    wave?: WaveUpdateOneRequiredWithoutRipplesNestedInput
  }

  export type RippleUncheckedUpdateWithoutMicroActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RippleCreateManyWaveInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
  }

  export type RippleUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    microActions?: MicroActionUpdateManyWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    microActions?: MicroActionUncheckedUpdateManyWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateManyWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MicroActionCreateManyRippleInput = {
    id?: string
    text: string
    difficulty?: number
    bucket: string
    status?: string
    createdBy?: string
  }

  export type MicroActionUpdateWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type MicroActionUncheckedUpdateWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type MicroActionUncheckedUpdateManyWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}