generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Impact calculation types
enum ImpactCalculationType {
  SEVEN_DAY
  THIRTY_DAY
  ALL_TIME
}

// Trending calculation types
enum TrendingCalculationType {
  HOURLY
  DAILY
  WEEKLY
}

model WaveBucket {
  waveId       String
  name         String
  // Impact weighting and lifecycle for this bucket within a wave
  weight       Float        @default(1.0)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt @default(now())
  actionLogs   ActionLog[]
  microActions MicroAction[]
  templates    Template[]    @relation("TemplateToWaveBucket")
  wave         Wave          @relation(fields: [waveId], references: [id], onDelete: Cascade)

  @@id([waveId, name])
}

model Template {
  id            String         @id @default(cuid())
  waveId        String
  bucket        String
  textPattern   String
  modifiersJson Json           @default("{}")
  status        TemplateStatus @default(active)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  microActions  MicroAction[]  @relation("TemplateToMicroAction")
  waveBucket    WaveBucket     @relation("TemplateToWaveBucket", fields: [waveId, bucket], references: [waveId, name])
  wave          Wave           @relation("TemplateToWave", fields: [waveId], references: [id])

  @@index([waveId, bucket])
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  passwordHash  String
  createdAt     DateTime           @default(now())
  dream         String?
  username      String             @unique
  actionLogs    ActionLog[]
  memberships   UserRipple[]
  impactSummary UserImpactSummary?
}

model Wave {
  id                        String               @id @default(cuid())
  name                      String               @unique
  description               String
  icon                      String?
  impactCoef                Float
  impactUnit                String
  impactSource              String
  impactFormula             String?
  impactSourcesAndCaveats   String?
  impactWhatWeCount         String?
  allowedBuckets            Json                 @default("[]")
  actionLogs                ActionLog[]
  microActions              MicroAction[]        @relation("WaveToMicroActions")
  ripples                   Ripple[]
  templates                 Template[]           @relation("TemplateToWave")
  waveBuckets               WaveBucket[]
  impactCalculations        ImpactCalculation[]
  impactIndices             ImpactIndex[]
  rippleCounters            RippleCounter[]
  trendingScores            TrendingScore[]
}

model UserRipple {
  id        String   @id @default(cuid())
  userId    String
  rippleId  String
  isActive  Boolean  @default(true)
  isPrimary Boolean  @default(false)
  joinedAt  DateTime @default(now())
  ripple    Ripple   @relation(fields: [rippleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, rippleId])
  @@index([userId, isPrimary])
}

model RippleActivity {
  id        String   @id @default(cuid())
  rippleId  String
  city      String?
  blurb     String
  createdAt DateTime @default(now())
  ripple    Ripple   @relation(fields: [rippleId], references: [id])

  @@index([rippleId, createdAt])
}

model RippleSummary {
  rippleId     String   @id
  participants Int
  actionsTotal Int
  impactValue  Float
  impactUnit   String
  impactSource String
  updatedAt    DateTime @default(now())
  ripple       Ripple   @relation(fields: [rippleId], references: [id])
}

model Ripple {
  id                   String               @id @default(cuid())
  waveId               String
  title                String
  description          String?
  createdBy            String               @default("system")
  status               String               @default("active")
  audience_noun        String?
  context_label        String?
  blurb_template       String?
  default_bucket       String?
  isStarter            Boolean              @default(false)
  actionLogs           ActionLog[]
  microActions         MicroAction[]
  wave                 Wave                 @relation(fields: [waveId], references: [id], onDelete: Cascade)
  rippleActivities     RippleActivity[]
  rippleSummary        RippleSummary?
  memberships          UserRipple[]
  impactCalculations   ImpactCalculation[]
  impactIndex          ImpactIndex?
  rippleCounter        RippleCounter?
  trendingScores       TrendingScore[]

  @@index([waveId])
}

model MicroAction {
  id         String      @id @default(cuid())
  rippleId   String
  text       String
  bucket     String
  status     String      @default("active")
  createdBy  String      @default("system")
  createdAt  DateTime    @default(now())
  templateId String?
  waveId     String
  actionLogs ActionLog[]
  ripple     Ripple      @relation(fields: [rippleId], references: [id])
  template   Template?   @relation("TemplateToMicroAction", fields: [templateId], references: [id])
  waveBucket WaveBucket  @relation(fields: [waveId, bucket], references: [waveId, name])
  wave       Wave        @relation("WaveToMicroActions", fields: [waveId], references: [id])

  @@index([rippleId])
  @@index([waveId, bucket])
}

model ActionLog {
  id            String      @id @default(cuid())
  userId        String
  microActionId String
  rippleId      String
  waveId        String
  bucket        String
  createdAt     DateTime    @default(now())
  city          String?
  noteText      String?     @db.VarChar(120)
  shareAnon     Boolean     @default(false)
  micro         MicroAction @relation(fields: [microActionId], references: [id])
  ripple        Ripple      @relation(fields: [rippleId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id])
  wave          Wave        @relation(fields: [waveId], references: [id], onDelete: Cascade)
  waveBucket    WaveBucket  @relation(fields: [waveId, bucket], references: [waveId, name])

  @@index([rippleId, createdAt])
  @@index([rippleId, bucket])
  @@index([userId, createdAt])
  @@index([waveId, bucket])
}

enum TemplateStatus {
  active
  inactive
  archived
}

// ============================================================================
// IMPACT & TRENDING MODELS
// ============================================================================

// Impact calculation for a specific ripple and timeframe
model ImpactCalculation {
  id               String                @id @default(cuid())
  rippleId         String
  waveId           String
  calculationType  ImpactCalculationType
  totalImpact      Float
  actionCount      Int
  participantCount Int
  calculatedAt     DateTime              @default(now())
  ripple           Ripple                @relation(fields: [rippleId], references: [id], onDelete: Cascade)
  wave             Wave                  @relation(fields: [waveId], references: [id], onDelete: Cascade)

  @@unique([rippleId, calculationType])
  @@index([waveId, calculationType])
  @@index([calculatedAt])
}

// Impact index showing relative performance of a ripple
model ImpactIndex {
  id                    String   @id @default(cuid())
  rippleId              String   @unique
  waveId                String
  medianImpact          Float
  rippleImpact          Float
  indexScore            Float // 0.5x to 3.0x multiplier
  participantCount      Int
  aboveMedianRipples    Int
  totalActiveRipples    Int
  calculatedAt          DateTime @default(now())
  updatedAt             DateTime @updatedAt
  ripple                Ripple   @relation(fields: [rippleId], references: [id], onDelete: Cascade)
  wave                  Wave     @relation(fields: [waveId], references: [id], onDelete: Cascade)

  @@index([waveId, indexScore])
  @@index([calculatedAt])
}

// User's aggregated impact summary across all waves
model UserImpactSummary {
  userId                String   @id
  totalImpact7d         Float    @default(0)
  totalImpact30d        Float    @default(0)
  totalImpactAllTime    Float    @default(0)
  actionCount7d         Int      @default(0)
  actionCount30d        Int      @default(0)
  actionCountAllTime    Int      @default(0)
  activeRipples         Int      @default(0)
  topWaveId             String?
  topWaveImpact         Float    @default(0)
  calculatedAt          DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([totalImpactAllTime])
  @@index([calculatedAt])
}

// Real-time counters for ripple trending
model RippleCounter {
  id                      String   @id @default(cuid())
  rippleId                String   @unique
  waveId                  String
  participants            Int      @default(0)
  actions24h              Int      @default(0)
  actions1h               Int      @default(0)
  newParticipants24h      Int      @default(0)
  version                 Int      @default(0) // For optimistic locking
  lastActionAt            DateTime?
  updatedAt               DateTime @updatedAt
  ripple                  Ripple   @relation(fields: [rippleId], references: [id], onDelete: Cascade)
  wave                    Wave     @relation(fields: [waveId], references: [id], onDelete: Cascade)

  @@index([waveId])
  @@index([lastActionAt])
}

// Trending score snapshots for leaderboard
model TrendingScore {
  id                      String                  @id @default(cuid())
  rippleId                String
  waveId                  String
  calculationType         TrendingCalculationType
  score                   Float
  participants            Int
  actions24h              Int
  actions1h               Int
  newParticipants24h      Int
  boost                   Float                   @default(0)
  isTopTen                Boolean                 @default(false)
  topTenDays              Int                     @default(0)
  calculatedAt            DateTime                @default(now())
  ripple                  Ripple                  @relation(fields: [rippleId], references: [id], onDelete: Cascade)
  wave                    Wave                    @relation(fields: [waveId], references: [id], onDelete: Cascade)

  @@index([waveId, score])
  @@index([calculatedAt])
  @@index([score])
}
