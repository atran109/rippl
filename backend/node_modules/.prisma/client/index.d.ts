
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model WaveBucket
 * 
 */
export type WaveBucket = $Result.DefaultSelection<Prisma.$WaveBucketPayload>
/**
 * Model Template
 * 
 */
export type Template = $Result.DefaultSelection<Prisma.$TemplatePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Wave
 * 
 */
export type Wave = $Result.DefaultSelection<Prisma.$WavePayload>
/**
 * Model UserRipple
 * 
 */
export type UserRipple = $Result.DefaultSelection<Prisma.$UserRipplePayload>
/**
 * Model RippleActivity
 * 
 */
export type RippleActivity = $Result.DefaultSelection<Prisma.$RippleActivityPayload>
/**
 * Model RippleSummary
 * 
 */
export type RippleSummary = $Result.DefaultSelection<Prisma.$RippleSummaryPayload>
/**
 * Model Ripple
 * 
 */
export type Ripple = $Result.DefaultSelection<Prisma.$RipplePayload>
/**
 * Model MicroAction
 * 
 */
export type MicroAction = $Result.DefaultSelection<Prisma.$MicroActionPayload>
/**
 * Model ActionLog
 * 
 */
export type ActionLog = $Result.DefaultSelection<Prisma.$ActionLogPayload>
/**
 * Model PhraseMap
 * 
 */
export type PhraseMap = $Result.DefaultSelection<Prisma.$PhraseMapPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TemplateStatus: {
  active: 'active',
  inactive: 'inactive',
  archived: 'archived'
};

export type TemplateStatus = (typeof TemplateStatus)[keyof typeof TemplateStatus]

}

export type TemplateStatus = $Enums.TemplateStatus

export const TemplateStatus: typeof $Enums.TemplateStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more WaveBuckets
 * const waveBuckets = await prisma.waveBucket.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more WaveBuckets
   * const waveBuckets = await prisma.waveBucket.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.waveBucket`: Exposes CRUD operations for the **WaveBucket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WaveBuckets
    * const waveBuckets = await prisma.waveBucket.findMany()
    * ```
    */
  get waveBucket(): Prisma.WaveBucketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.template`: Exposes CRUD operations for the **Template** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Templates
    * const templates = await prisma.template.findMany()
    * ```
    */
  get template(): Prisma.TemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wave`: Exposes CRUD operations for the **Wave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Waves
    * const waves = await prisma.wave.findMany()
    * ```
    */
  get wave(): Prisma.WaveDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userRipple`: Exposes CRUD operations for the **UserRipple** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRipples
    * const userRipples = await prisma.userRipple.findMany()
    * ```
    */
  get userRipple(): Prisma.UserRippleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rippleActivity`: Exposes CRUD operations for the **RippleActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RippleActivities
    * const rippleActivities = await prisma.rippleActivity.findMany()
    * ```
    */
  get rippleActivity(): Prisma.RippleActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rippleSummary`: Exposes CRUD operations for the **RippleSummary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RippleSummaries
    * const rippleSummaries = await prisma.rippleSummary.findMany()
    * ```
    */
  get rippleSummary(): Prisma.RippleSummaryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ripple`: Exposes CRUD operations for the **Ripple** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ripples
    * const ripples = await prisma.ripple.findMany()
    * ```
    */
  get ripple(): Prisma.RippleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.microAction`: Exposes CRUD operations for the **MicroAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MicroActions
    * const microActions = await prisma.microAction.findMany()
    * ```
    */
  get microAction(): Prisma.MicroActionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.actionLog`: Exposes CRUD operations for the **ActionLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActionLogs
    * const actionLogs = await prisma.actionLog.findMany()
    * ```
    */
  get actionLog(): Prisma.ActionLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.phraseMap`: Exposes CRUD operations for the **PhraseMap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PhraseMaps
    * const phraseMaps = await prisma.phraseMap.findMany()
    * ```
    */
  get phraseMap(): Prisma.PhraseMapDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    WaveBucket: 'WaveBucket',
    Template: 'Template',
    User: 'User',
    Wave: 'Wave',
    UserRipple: 'UserRipple',
    RippleActivity: 'RippleActivity',
    RippleSummary: 'RippleSummary',
    Ripple: 'Ripple',
    MicroAction: 'MicroAction',
    ActionLog: 'ActionLog',
    PhraseMap: 'PhraseMap'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "waveBucket" | "template" | "user" | "wave" | "userRipple" | "rippleActivity" | "rippleSummary" | "ripple" | "microAction" | "actionLog" | "phraseMap"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      WaveBucket: {
        payload: Prisma.$WaveBucketPayload<ExtArgs>
        fields: Prisma.WaveBucketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WaveBucketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WaveBucketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload>
          }
          findFirst: {
            args: Prisma.WaveBucketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WaveBucketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload>
          }
          findMany: {
            args: Prisma.WaveBucketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload>[]
          }
          create: {
            args: Prisma.WaveBucketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload>
          }
          createMany: {
            args: Prisma.WaveBucketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WaveBucketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload>[]
          }
          delete: {
            args: Prisma.WaveBucketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload>
          }
          update: {
            args: Prisma.WaveBucketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload>
          }
          deleteMany: {
            args: Prisma.WaveBucketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WaveBucketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WaveBucketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload>[]
          }
          upsert: {
            args: Prisma.WaveBucketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaveBucketPayload>
          }
          aggregate: {
            args: Prisma.WaveBucketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWaveBucket>
          }
          groupBy: {
            args: Prisma.WaveBucketGroupByArgs<ExtArgs>
            result: $Utils.Optional<WaveBucketGroupByOutputType>[]
          }
          count: {
            args: Prisma.WaveBucketCountArgs<ExtArgs>
            result: $Utils.Optional<WaveBucketCountAggregateOutputType> | number
          }
        }
      }
      Template: {
        payload: Prisma.$TemplatePayload<ExtArgs>
        fields: Prisma.TemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          findFirst: {
            args: Prisma.TemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          findMany: {
            args: Prisma.TemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>[]
          }
          create: {
            args: Prisma.TemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          createMany: {
            args: Prisma.TemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>[]
          }
          delete: {
            args: Prisma.TemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          update: {
            args: Prisma.TemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          deleteMany: {
            args: Prisma.TemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>[]
          }
          upsert: {
            args: Prisma.TemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          aggregate: {
            args: Prisma.TemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTemplate>
          }
          groupBy: {
            args: Prisma.TemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<TemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.TemplateCountArgs<ExtArgs>
            result: $Utils.Optional<TemplateCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Wave: {
        payload: Prisma.$WavePayload<ExtArgs>
        fields: Prisma.WaveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WaveFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WaveFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          findFirst: {
            args: Prisma.WaveFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WaveFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          findMany: {
            args: Prisma.WaveFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>[]
          }
          create: {
            args: Prisma.WaveCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          createMany: {
            args: Prisma.WaveCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WaveCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>[]
          }
          delete: {
            args: Prisma.WaveDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          update: {
            args: Prisma.WaveUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          deleteMany: {
            args: Prisma.WaveDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WaveUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WaveUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>[]
          }
          upsert: {
            args: Prisma.WaveUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WavePayload>
          }
          aggregate: {
            args: Prisma.WaveAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWave>
          }
          groupBy: {
            args: Prisma.WaveGroupByArgs<ExtArgs>
            result: $Utils.Optional<WaveGroupByOutputType>[]
          }
          count: {
            args: Prisma.WaveCountArgs<ExtArgs>
            result: $Utils.Optional<WaveCountAggregateOutputType> | number
          }
        }
      }
      UserRipple: {
        payload: Prisma.$UserRipplePayload<ExtArgs>
        fields: Prisma.UserRippleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRippleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRippleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload>
          }
          findFirst: {
            args: Prisma.UserRippleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRippleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload>
          }
          findMany: {
            args: Prisma.UserRippleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload>[]
          }
          create: {
            args: Prisma.UserRippleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload>
          }
          createMany: {
            args: Prisma.UserRippleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRippleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload>[]
          }
          delete: {
            args: Prisma.UserRippleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload>
          }
          update: {
            args: Prisma.UserRippleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload>
          }
          deleteMany: {
            args: Prisma.UserRippleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRippleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserRippleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload>[]
          }
          upsert: {
            args: Prisma.UserRippleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRipplePayload>
          }
          aggregate: {
            args: Prisma.UserRippleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRipple>
          }
          groupBy: {
            args: Prisma.UserRippleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRippleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRippleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRippleCountAggregateOutputType> | number
          }
        }
      }
      RippleActivity: {
        payload: Prisma.$RippleActivityPayload<ExtArgs>
        fields: Prisma.RippleActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RippleActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RippleActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload>
          }
          findFirst: {
            args: Prisma.RippleActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RippleActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload>
          }
          findMany: {
            args: Prisma.RippleActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload>[]
          }
          create: {
            args: Prisma.RippleActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload>
          }
          createMany: {
            args: Prisma.RippleActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RippleActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload>[]
          }
          delete: {
            args: Prisma.RippleActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload>
          }
          update: {
            args: Prisma.RippleActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload>
          }
          deleteMany: {
            args: Prisma.RippleActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RippleActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RippleActivityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload>[]
          }
          upsert: {
            args: Prisma.RippleActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleActivityPayload>
          }
          aggregate: {
            args: Prisma.RippleActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRippleActivity>
          }
          groupBy: {
            args: Prisma.RippleActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<RippleActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.RippleActivityCountArgs<ExtArgs>
            result: $Utils.Optional<RippleActivityCountAggregateOutputType> | number
          }
        }
      }
      RippleSummary: {
        payload: Prisma.$RippleSummaryPayload<ExtArgs>
        fields: Prisma.RippleSummaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RippleSummaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RippleSummaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload>
          }
          findFirst: {
            args: Prisma.RippleSummaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RippleSummaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload>
          }
          findMany: {
            args: Prisma.RippleSummaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload>[]
          }
          create: {
            args: Prisma.RippleSummaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload>
          }
          createMany: {
            args: Prisma.RippleSummaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RippleSummaryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload>[]
          }
          delete: {
            args: Prisma.RippleSummaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload>
          }
          update: {
            args: Prisma.RippleSummaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload>
          }
          deleteMany: {
            args: Prisma.RippleSummaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RippleSummaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RippleSummaryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload>[]
          }
          upsert: {
            args: Prisma.RippleSummaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RippleSummaryPayload>
          }
          aggregate: {
            args: Prisma.RippleSummaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRippleSummary>
          }
          groupBy: {
            args: Prisma.RippleSummaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<RippleSummaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.RippleSummaryCountArgs<ExtArgs>
            result: $Utils.Optional<RippleSummaryCountAggregateOutputType> | number
          }
        }
      }
      Ripple: {
        payload: Prisma.$RipplePayload<ExtArgs>
        fields: Prisma.RippleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RippleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RippleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          findFirst: {
            args: Prisma.RippleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RippleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          findMany: {
            args: Prisma.RippleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>[]
          }
          create: {
            args: Prisma.RippleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          createMany: {
            args: Prisma.RippleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RippleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>[]
          }
          delete: {
            args: Prisma.RippleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          update: {
            args: Prisma.RippleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          deleteMany: {
            args: Prisma.RippleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RippleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RippleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>[]
          }
          upsert: {
            args: Prisma.RippleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RipplePayload>
          }
          aggregate: {
            args: Prisma.RippleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRipple>
          }
          groupBy: {
            args: Prisma.RippleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RippleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RippleCountArgs<ExtArgs>
            result: $Utils.Optional<RippleCountAggregateOutputType> | number
          }
        }
      }
      MicroAction: {
        payload: Prisma.$MicroActionPayload<ExtArgs>
        fields: Prisma.MicroActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MicroActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MicroActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          findFirst: {
            args: Prisma.MicroActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MicroActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          findMany: {
            args: Prisma.MicroActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>[]
          }
          create: {
            args: Prisma.MicroActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          createMany: {
            args: Prisma.MicroActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MicroActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>[]
          }
          delete: {
            args: Prisma.MicroActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          update: {
            args: Prisma.MicroActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          deleteMany: {
            args: Prisma.MicroActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MicroActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MicroActionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>[]
          }
          upsert: {
            args: Prisma.MicroActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MicroActionPayload>
          }
          aggregate: {
            args: Prisma.MicroActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMicroAction>
          }
          groupBy: {
            args: Prisma.MicroActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MicroActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MicroActionCountArgs<ExtArgs>
            result: $Utils.Optional<MicroActionCountAggregateOutputType> | number
          }
        }
      }
      ActionLog: {
        payload: Prisma.$ActionLogPayload<ExtArgs>
        fields: Prisma.ActionLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActionLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActionLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload>
          }
          findFirst: {
            args: Prisma.ActionLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActionLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload>
          }
          findMany: {
            args: Prisma.ActionLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload>[]
          }
          create: {
            args: Prisma.ActionLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload>
          }
          createMany: {
            args: Prisma.ActionLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActionLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload>[]
          }
          delete: {
            args: Prisma.ActionLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload>
          }
          update: {
            args: Prisma.ActionLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload>
          }
          deleteMany: {
            args: Prisma.ActionLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActionLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActionLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload>[]
          }
          upsert: {
            args: Prisma.ActionLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionLogPayload>
          }
          aggregate: {
            args: Prisma.ActionLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActionLog>
          }
          groupBy: {
            args: Prisma.ActionLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActionLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActionLogCountArgs<ExtArgs>
            result: $Utils.Optional<ActionLogCountAggregateOutputType> | number
          }
        }
      }
      PhraseMap: {
        payload: Prisma.$PhraseMapPayload<ExtArgs>
        fields: Prisma.PhraseMapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhraseMapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhraseMapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload>
          }
          findFirst: {
            args: Prisma.PhraseMapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhraseMapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload>
          }
          findMany: {
            args: Prisma.PhraseMapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload>[]
          }
          create: {
            args: Prisma.PhraseMapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload>
          }
          createMany: {
            args: Prisma.PhraseMapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PhraseMapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload>[]
          }
          delete: {
            args: Prisma.PhraseMapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload>
          }
          update: {
            args: Prisma.PhraseMapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload>
          }
          deleteMany: {
            args: Prisma.PhraseMapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PhraseMapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PhraseMapUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload>[]
          }
          upsert: {
            args: Prisma.PhraseMapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhraseMapPayload>
          }
          aggregate: {
            args: Prisma.PhraseMapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhraseMap>
          }
          groupBy: {
            args: Prisma.PhraseMapGroupByArgs<ExtArgs>
            result: $Utils.Optional<PhraseMapGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhraseMapCountArgs<ExtArgs>
            result: $Utils.Optional<PhraseMapCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    waveBucket?: WaveBucketOmit
    template?: TemplateOmit
    user?: UserOmit
    wave?: WaveOmit
    userRipple?: UserRippleOmit
    rippleActivity?: RippleActivityOmit
    rippleSummary?: RippleSummaryOmit
    ripple?: RippleOmit
    microAction?: MicroActionOmit
    actionLog?: ActionLogOmit
    phraseMap?: PhraseMapOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type WaveBucketCountOutputType
   */

  export type WaveBucketCountOutputType = {
    templates: number
    microActions: number
  }

  export type WaveBucketCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    templates?: boolean | WaveBucketCountOutputTypeCountTemplatesArgs
    microActions?: boolean | WaveBucketCountOutputTypeCountMicroActionsArgs
  }

  // Custom InputTypes
  /**
   * WaveBucketCountOutputType without action
   */
  export type WaveBucketCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucketCountOutputType
     */
    select?: WaveBucketCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WaveBucketCountOutputType without action
   */
  export type WaveBucketCountOutputTypeCountTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateWhereInput
  }

  /**
   * WaveBucketCountOutputType without action
   */
  export type WaveBucketCountOutputTypeCountMicroActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MicroActionWhereInput
  }


  /**
   * Count Type TemplateCountOutputType
   */

  export type TemplateCountOutputType = {
    microActions: number
  }

  export type TemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    microActions?: boolean | TemplateCountOutputTypeCountMicroActionsArgs
  }

  // Custom InputTypes
  /**
   * TemplateCountOutputType without action
   */
  export type TemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCountOutputType
     */
    select?: TemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TemplateCountOutputType without action
   */
  export type TemplateCountOutputTypeCountMicroActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MicroActionWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    memberships: number
    actionLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    memberships?: boolean | UserCountOutputTypeCountMembershipsArgs
    actionLogs?: boolean | UserCountOutputTypeCountActionLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRippleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionLogWhereInput
  }


  /**
   * Count Type WaveCountOutputType
   */

  export type WaveCountOutputType = {
    ripples: number
    actionLogs: number
    waveBuckets: number
    templates: number
    microActions: number
    phrases: number
  }

  export type WaveCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripples?: boolean | WaveCountOutputTypeCountRipplesArgs
    actionLogs?: boolean | WaveCountOutputTypeCountActionLogsArgs
    waveBuckets?: boolean | WaveCountOutputTypeCountWaveBucketsArgs
    templates?: boolean | WaveCountOutputTypeCountTemplatesArgs
    microActions?: boolean | WaveCountOutputTypeCountMicroActionsArgs
    phrases?: boolean | WaveCountOutputTypeCountPhrasesArgs
  }

  // Custom InputTypes
  /**
   * WaveCountOutputType without action
   */
  export type WaveCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveCountOutputType
     */
    select?: WaveCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WaveCountOutputType without action
   */
  export type WaveCountOutputTypeCountRipplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RippleWhereInput
  }

  /**
   * WaveCountOutputType without action
   */
  export type WaveCountOutputTypeCountActionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionLogWhereInput
  }

  /**
   * WaveCountOutputType without action
   */
  export type WaveCountOutputTypeCountWaveBucketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WaveBucketWhereInput
  }

  /**
   * WaveCountOutputType without action
   */
  export type WaveCountOutputTypeCountTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateWhereInput
  }

  /**
   * WaveCountOutputType without action
   */
  export type WaveCountOutputTypeCountMicroActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MicroActionWhereInput
  }

  /**
   * WaveCountOutputType without action
   */
  export type WaveCountOutputTypeCountPhrasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhraseMapWhereInput
  }


  /**
   * Count Type RippleCountOutputType
   */

  export type RippleCountOutputType = {
    microActions: number
    memberships: number
    actionLogs: number
    rippleActivities: number
  }

  export type RippleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    microActions?: boolean | RippleCountOutputTypeCountMicroActionsArgs
    memberships?: boolean | RippleCountOutputTypeCountMembershipsArgs
    actionLogs?: boolean | RippleCountOutputTypeCountActionLogsArgs
    rippleActivities?: boolean | RippleCountOutputTypeCountRippleActivitiesArgs
  }

  // Custom InputTypes
  /**
   * RippleCountOutputType without action
   */
  export type RippleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleCountOutputType
     */
    select?: RippleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RippleCountOutputType without action
   */
  export type RippleCountOutputTypeCountMicroActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MicroActionWhereInput
  }

  /**
   * RippleCountOutputType without action
   */
  export type RippleCountOutputTypeCountMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRippleWhereInput
  }

  /**
   * RippleCountOutputType without action
   */
  export type RippleCountOutputTypeCountActionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionLogWhereInput
  }

  /**
   * RippleCountOutputType without action
   */
  export type RippleCountOutputTypeCountRippleActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RippleActivityWhereInput
  }


  /**
   * Count Type MicroActionCountOutputType
   */

  export type MicroActionCountOutputType = {
    actionLogs: number
  }

  export type MicroActionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actionLogs?: boolean | MicroActionCountOutputTypeCountActionLogsArgs
  }

  // Custom InputTypes
  /**
   * MicroActionCountOutputType without action
   */
  export type MicroActionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroActionCountOutputType
     */
    select?: MicroActionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MicroActionCountOutputType without action
   */
  export type MicroActionCountOutputTypeCountActionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model WaveBucket
   */

  export type AggregateWaveBucket = {
    _count: WaveBucketCountAggregateOutputType | null
    _avg: WaveBucketAvgAggregateOutputType | null
    _sum: WaveBucketSumAggregateOutputType | null
    _min: WaveBucketMinAggregateOutputType | null
    _max: WaveBucketMaxAggregateOutputType | null
  }

  export type WaveBucketAvgAggregateOutputType = {
    weight: number | null
  }

  export type WaveBucketSumAggregateOutputType = {
    weight: number | null
  }

  export type WaveBucketMinAggregateOutputType = {
    waveId: string | null
    name: string | null
    weight: number | null
  }

  export type WaveBucketMaxAggregateOutputType = {
    waveId: string | null
    name: string | null
    weight: number | null
  }

  export type WaveBucketCountAggregateOutputType = {
    waveId: number
    name: number
    weight: number
    _all: number
  }


  export type WaveBucketAvgAggregateInputType = {
    weight?: true
  }

  export type WaveBucketSumAggregateInputType = {
    weight?: true
  }

  export type WaveBucketMinAggregateInputType = {
    waveId?: true
    name?: true
    weight?: true
  }

  export type WaveBucketMaxAggregateInputType = {
    waveId?: true
    name?: true
    weight?: true
  }

  export type WaveBucketCountAggregateInputType = {
    waveId?: true
    name?: true
    weight?: true
    _all?: true
  }

  export type WaveBucketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WaveBucket to aggregate.
     */
    where?: WaveBucketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaveBuckets to fetch.
     */
    orderBy?: WaveBucketOrderByWithRelationInput | WaveBucketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WaveBucketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaveBuckets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaveBuckets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WaveBuckets
    **/
    _count?: true | WaveBucketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WaveBucketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WaveBucketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WaveBucketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WaveBucketMaxAggregateInputType
  }

  export type GetWaveBucketAggregateType<T extends WaveBucketAggregateArgs> = {
        [P in keyof T & keyof AggregateWaveBucket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWaveBucket[P]>
      : GetScalarType<T[P], AggregateWaveBucket[P]>
  }




  export type WaveBucketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WaveBucketWhereInput
    orderBy?: WaveBucketOrderByWithAggregationInput | WaveBucketOrderByWithAggregationInput[]
    by: WaveBucketScalarFieldEnum[] | WaveBucketScalarFieldEnum
    having?: WaveBucketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WaveBucketCountAggregateInputType | true
    _avg?: WaveBucketAvgAggregateInputType
    _sum?: WaveBucketSumAggregateInputType
    _min?: WaveBucketMinAggregateInputType
    _max?: WaveBucketMaxAggregateInputType
  }

  export type WaveBucketGroupByOutputType = {
    waveId: string
    name: string
    weight: number
    _count: WaveBucketCountAggregateOutputType | null
    _avg: WaveBucketAvgAggregateOutputType | null
    _sum: WaveBucketSumAggregateOutputType | null
    _min: WaveBucketMinAggregateOutputType | null
    _max: WaveBucketMaxAggregateOutputType | null
  }

  type GetWaveBucketGroupByPayload<T extends WaveBucketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WaveBucketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WaveBucketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WaveBucketGroupByOutputType[P]>
            : GetScalarType<T[P], WaveBucketGroupByOutputType[P]>
        }
      >
    >


  export type WaveBucketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    waveId?: boolean
    name?: boolean
    weight?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    templates?: boolean | WaveBucket$templatesArgs<ExtArgs>
    microActions?: boolean | WaveBucket$microActionsArgs<ExtArgs>
    _count?: boolean | WaveBucketCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["waveBucket"]>

  export type WaveBucketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    waveId?: boolean
    name?: boolean
    weight?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["waveBucket"]>

  export type WaveBucketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    waveId?: boolean
    name?: boolean
    weight?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["waveBucket"]>

  export type WaveBucketSelectScalar = {
    waveId?: boolean
    name?: boolean
    weight?: boolean
  }

  export type WaveBucketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"waveId" | "name" | "weight", ExtArgs["result"]["waveBucket"]>
  export type WaveBucketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    templates?: boolean | WaveBucket$templatesArgs<ExtArgs>
    microActions?: boolean | WaveBucket$microActionsArgs<ExtArgs>
    _count?: boolean | WaveBucketCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WaveBucketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }
  export type WaveBucketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }

  export type $WaveBucketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WaveBucket"
    objects: {
      wave: Prisma.$WavePayload<ExtArgs>
      templates: Prisma.$TemplatePayload<ExtArgs>[]
      microActions: Prisma.$MicroActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      waveId: string
      name: string
      weight: number
    }, ExtArgs["result"]["waveBucket"]>
    composites: {}
  }

  type WaveBucketGetPayload<S extends boolean | null | undefined | WaveBucketDefaultArgs> = $Result.GetResult<Prisma.$WaveBucketPayload, S>

  type WaveBucketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WaveBucketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WaveBucketCountAggregateInputType | true
    }

  export interface WaveBucketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WaveBucket'], meta: { name: 'WaveBucket' } }
    /**
     * Find zero or one WaveBucket that matches the filter.
     * @param {WaveBucketFindUniqueArgs} args - Arguments to find a WaveBucket
     * @example
     * // Get one WaveBucket
     * const waveBucket = await prisma.waveBucket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WaveBucketFindUniqueArgs>(args: SelectSubset<T, WaveBucketFindUniqueArgs<ExtArgs>>): Prisma__WaveBucketClient<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WaveBucket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WaveBucketFindUniqueOrThrowArgs} args - Arguments to find a WaveBucket
     * @example
     * // Get one WaveBucket
     * const waveBucket = await prisma.waveBucket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WaveBucketFindUniqueOrThrowArgs>(args: SelectSubset<T, WaveBucketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WaveBucketClient<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WaveBucket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveBucketFindFirstArgs} args - Arguments to find a WaveBucket
     * @example
     * // Get one WaveBucket
     * const waveBucket = await prisma.waveBucket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WaveBucketFindFirstArgs>(args?: SelectSubset<T, WaveBucketFindFirstArgs<ExtArgs>>): Prisma__WaveBucketClient<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WaveBucket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveBucketFindFirstOrThrowArgs} args - Arguments to find a WaveBucket
     * @example
     * // Get one WaveBucket
     * const waveBucket = await prisma.waveBucket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WaveBucketFindFirstOrThrowArgs>(args?: SelectSubset<T, WaveBucketFindFirstOrThrowArgs<ExtArgs>>): Prisma__WaveBucketClient<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WaveBuckets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveBucketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WaveBuckets
     * const waveBuckets = await prisma.waveBucket.findMany()
     * 
     * // Get first 10 WaveBuckets
     * const waveBuckets = await prisma.waveBucket.findMany({ take: 10 })
     * 
     * // Only select the `waveId`
     * const waveBucketWithWaveIdOnly = await prisma.waveBucket.findMany({ select: { waveId: true } })
     * 
     */
    findMany<T extends WaveBucketFindManyArgs>(args?: SelectSubset<T, WaveBucketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WaveBucket.
     * @param {WaveBucketCreateArgs} args - Arguments to create a WaveBucket.
     * @example
     * // Create one WaveBucket
     * const WaveBucket = await prisma.waveBucket.create({
     *   data: {
     *     // ... data to create a WaveBucket
     *   }
     * })
     * 
     */
    create<T extends WaveBucketCreateArgs>(args: SelectSubset<T, WaveBucketCreateArgs<ExtArgs>>): Prisma__WaveBucketClient<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WaveBuckets.
     * @param {WaveBucketCreateManyArgs} args - Arguments to create many WaveBuckets.
     * @example
     * // Create many WaveBuckets
     * const waveBucket = await prisma.waveBucket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WaveBucketCreateManyArgs>(args?: SelectSubset<T, WaveBucketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WaveBuckets and returns the data saved in the database.
     * @param {WaveBucketCreateManyAndReturnArgs} args - Arguments to create many WaveBuckets.
     * @example
     * // Create many WaveBuckets
     * const waveBucket = await prisma.waveBucket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WaveBuckets and only return the `waveId`
     * const waveBucketWithWaveIdOnly = await prisma.waveBucket.createManyAndReturn({
     *   select: { waveId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WaveBucketCreateManyAndReturnArgs>(args?: SelectSubset<T, WaveBucketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WaveBucket.
     * @param {WaveBucketDeleteArgs} args - Arguments to delete one WaveBucket.
     * @example
     * // Delete one WaveBucket
     * const WaveBucket = await prisma.waveBucket.delete({
     *   where: {
     *     // ... filter to delete one WaveBucket
     *   }
     * })
     * 
     */
    delete<T extends WaveBucketDeleteArgs>(args: SelectSubset<T, WaveBucketDeleteArgs<ExtArgs>>): Prisma__WaveBucketClient<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WaveBucket.
     * @param {WaveBucketUpdateArgs} args - Arguments to update one WaveBucket.
     * @example
     * // Update one WaveBucket
     * const waveBucket = await prisma.waveBucket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WaveBucketUpdateArgs>(args: SelectSubset<T, WaveBucketUpdateArgs<ExtArgs>>): Prisma__WaveBucketClient<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WaveBuckets.
     * @param {WaveBucketDeleteManyArgs} args - Arguments to filter WaveBuckets to delete.
     * @example
     * // Delete a few WaveBuckets
     * const { count } = await prisma.waveBucket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WaveBucketDeleteManyArgs>(args?: SelectSubset<T, WaveBucketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WaveBuckets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveBucketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WaveBuckets
     * const waveBucket = await prisma.waveBucket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WaveBucketUpdateManyArgs>(args: SelectSubset<T, WaveBucketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WaveBuckets and returns the data updated in the database.
     * @param {WaveBucketUpdateManyAndReturnArgs} args - Arguments to update many WaveBuckets.
     * @example
     * // Update many WaveBuckets
     * const waveBucket = await prisma.waveBucket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WaveBuckets and only return the `waveId`
     * const waveBucketWithWaveIdOnly = await prisma.waveBucket.updateManyAndReturn({
     *   select: { waveId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WaveBucketUpdateManyAndReturnArgs>(args: SelectSubset<T, WaveBucketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WaveBucket.
     * @param {WaveBucketUpsertArgs} args - Arguments to update or create a WaveBucket.
     * @example
     * // Update or create a WaveBucket
     * const waveBucket = await prisma.waveBucket.upsert({
     *   create: {
     *     // ... data to create a WaveBucket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WaveBucket we want to update
     *   }
     * })
     */
    upsert<T extends WaveBucketUpsertArgs>(args: SelectSubset<T, WaveBucketUpsertArgs<ExtArgs>>): Prisma__WaveBucketClient<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WaveBuckets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveBucketCountArgs} args - Arguments to filter WaveBuckets to count.
     * @example
     * // Count the number of WaveBuckets
     * const count = await prisma.waveBucket.count({
     *   where: {
     *     // ... the filter for the WaveBuckets we want to count
     *   }
     * })
    **/
    count<T extends WaveBucketCountArgs>(
      args?: Subset<T, WaveBucketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WaveBucketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WaveBucket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveBucketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WaveBucketAggregateArgs>(args: Subset<T, WaveBucketAggregateArgs>): Prisma.PrismaPromise<GetWaveBucketAggregateType<T>>

    /**
     * Group by WaveBucket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveBucketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WaveBucketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WaveBucketGroupByArgs['orderBy'] }
        : { orderBy?: WaveBucketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WaveBucketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWaveBucketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WaveBucket model
   */
  readonly fields: WaveBucketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WaveBucket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WaveBucketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wave<T extends WaveDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WaveDefaultArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    templates<T extends WaveBucket$templatesArgs<ExtArgs> = {}>(args?: Subset<T, WaveBucket$templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    microActions<T extends WaveBucket$microActionsArgs<ExtArgs> = {}>(args?: Subset<T, WaveBucket$microActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WaveBucket model
   */
  interface WaveBucketFieldRefs {
    readonly waveId: FieldRef<"WaveBucket", 'String'>
    readonly name: FieldRef<"WaveBucket", 'String'>
    readonly weight: FieldRef<"WaveBucket", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * WaveBucket findUnique
   */
  export type WaveBucketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
    /**
     * Filter, which WaveBucket to fetch.
     */
    where: WaveBucketWhereUniqueInput
  }

  /**
   * WaveBucket findUniqueOrThrow
   */
  export type WaveBucketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
    /**
     * Filter, which WaveBucket to fetch.
     */
    where: WaveBucketWhereUniqueInput
  }

  /**
   * WaveBucket findFirst
   */
  export type WaveBucketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
    /**
     * Filter, which WaveBucket to fetch.
     */
    where?: WaveBucketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaveBuckets to fetch.
     */
    orderBy?: WaveBucketOrderByWithRelationInput | WaveBucketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WaveBuckets.
     */
    cursor?: WaveBucketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaveBuckets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaveBuckets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WaveBuckets.
     */
    distinct?: WaveBucketScalarFieldEnum | WaveBucketScalarFieldEnum[]
  }

  /**
   * WaveBucket findFirstOrThrow
   */
  export type WaveBucketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
    /**
     * Filter, which WaveBucket to fetch.
     */
    where?: WaveBucketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaveBuckets to fetch.
     */
    orderBy?: WaveBucketOrderByWithRelationInput | WaveBucketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WaveBuckets.
     */
    cursor?: WaveBucketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaveBuckets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaveBuckets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WaveBuckets.
     */
    distinct?: WaveBucketScalarFieldEnum | WaveBucketScalarFieldEnum[]
  }

  /**
   * WaveBucket findMany
   */
  export type WaveBucketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
    /**
     * Filter, which WaveBuckets to fetch.
     */
    where?: WaveBucketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaveBuckets to fetch.
     */
    orderBy?: WaveBucketOrderByWithRelationInput | WaveBucketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WaveBuckets.
     */
    cursor?: WaveBucketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaveBuckets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaveBuckets.
     */
    skip?: number
    distinct?: WaveBucketScalarFieldEnum | WaveBucketScalarFieldEnum[]
  }

  /**
   * WaveBucket create
   */
  export type WaveBucketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
    /**
     * The data needed to create a WaveBucket.
     */
    data: XOR<WaveBucketCreateInput, WaveBucketUncheckedCreateInput>
  }

  /**
   * WaveBucket createMany
   */
  export type WaveBucketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WaveBuckets.
     */
    data: WaveBucketCreateManyInput | WaveBucketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WaveBucket createManyAndReturn
   */
  export type WaveBucketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * The data used to create many WaveBuckets.
     */
    data: WaveBucketCreateManyInput | WaveBucketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WaveBucket update
   */
  export type WaveBucketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
    /**
     * The data needed to update a WaveBucket.
     */
    data: XOR<WaveBucketUpdateInput, WaveBucketUncheckedUpdateInput>
    /**
     * Choose, which WaveBucket to update.
     */
    where: WaveBucketWhereUniqueInput
  }

  /**
   * WaveBucket updateMany
   */
  export type WaveBucketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WaveBuckets.
     */
    data: XOR<WaveBucketUpdateManyMutationInput, WaveBucketUncheckedUpdateManyInput>
    /**
     * Filter which WaveBuckets to update
     */
    where?: WaveBucketWhereInput
    /**
     * Limit how many WaveBuckets to update.
     */
    limit?: number
  }

  /**
   * WaveBucket updateManyAndReturn
   */
  export type WaveBucketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * The data used to update WaveBuckets.
     */
    data: XOR<WaveBucketUpdateManyMutationInput, WaveBucketUncheckedUpdateManyInput>
    /**
     * Filter which WaveBuckets to update
     */
    where?: WaveBucketWhereInput
    /**
     * Limit how many WaveBuckets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WaveBucket upsert
   */
  export type WaveBucketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
    /**
     * The filter to search for the WaveBucket to update in case it exists.
     */
    where: WaveBucketWhereUniqueInput
    /**
     * In case the WaveBucket found by the `where` argument doesn't exist, create a new WaveBucket with this data.
     */
    create: XOR<WaveBucketCreateInput, WaveBucketUncheckedCreateInput>
    /**
     * In case the WaveBucket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WaveBucketUpdateInput, WaveBucketUncheckedUpdateInput>
  }

  /**
   * WaveBucket delete
   */
  export type WaveBucketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
    /**
     * Filter which WaveBucket to delete.
     */
    where: WaveBucketWhereUniqueInput
  }

  /**
   * WaveBucket deleteMany
   */
  export type WaveBucketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WaveBuckets to delete
     */
    where?: WaveBucketWhereInput
    /**
     * Limit how many WaveBuckets to delete.
     */
    limit?: number
  }

  /**
   * WaveBucket.templates
   */
  export type WaveBucket$templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    where?: TemplateWhereInput
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    cursor?: TemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * WaveBucket.microActions
   */
  export type WaveBucket$microActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    where?: MicroActionWhereInput
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    cursor?: MicroActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * WaveBucket without action
   */
  export type WaveBucketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
  }


  /**
   * Model Template
   */

  export type AggregateTemplate = {
    _count: TemplateCountAggregateOutputType | null
    _min: TemplateMinAggregateOutputType | null
    _max: TemplateMaxAggregateOutputType | null
  }

  export type TemplateMinAggregateOutputType = {
    id: string | null
    waveId: string | null
    bucket: string | null
    textPattern: string | null
    status: $Enums.TemplateStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TemplateMaxAggregateOutputType = {
    id: string | null
    waveId: string | null
    bucket: string | null
    textPattern: string | null
    status: $Enums.TemplateStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TemplateCountAggregateOutputType = {
    id: number
    waveId: number
    bucket: number
    textPattern: number
    modifiersJson: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TemplateMinAggregateInputType = {
    id?: true
    waveId?: true
    bucket?: true
    textPattern?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TemplateMaxAggregateInputType = {
    id?: true
    waveId?: true
    bucket?: true
    textPattern?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TemplateCountAggregateInputType = {
    id?: true
    waveId?: true
    bucket?: true
    textPattern?: true
    modifiersJson?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Template to aggregate.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Templates
    **/
    _count?: true | TemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemplateMaxAggregateInputType
  }

  export type GetTemplateAggregateType<T extends TemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemplate[P]>
      : GetScalarType<T[P], AggregateTemplate[P]>
  }




  export type TemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateWhereInput
    orderBy?: TemplateOrderByWithAggregationInput | TemplateOrderByWithAggregationInput[]
    by: TemplateScalarFieldEnum[] | TemplateScalarFieldEnum
    having?: TemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemplateCountAggregateInputType | true
    _min?: TemplateMinAggregateInputType
    _max?: TemplateMaxAggregateInputType
  }

  export type TemplateGroupByOutputType = {
    id: string
    waveId: string
    bucket: string
    textPattern: string
    modifiersJson: JsonValue
    status: $Enums.TemplateStatus
    createdAt: Date
    updatedAt: Date
    _count: TemplateCountAggregateOutputType | null
    _min: TemplateMinAggregateOutputType | null
    _max: TemplateMaxAggregateOutputType | null
  }

  type GetTemplateGroupByPayload<T extends TemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemplateGroupByOutputType[P]>
            : GetScalarType<T[P], TemplateGroupByOutputType[P]>
        }
      >
    >


  export type TemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    bucket?: boolean
    textPattern?: boolean
    modifiersJson?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
    microActions?: boolean | Template$microActionsArgs<ExtArgs>
    _count?: boolean | TemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["template"]>

  export type TemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    bucket?: boolean
    textPattern?: boolean
    modifiersJson?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["template"]>

  export type TemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    bucket?: boolean
    textPattern?: boolean
    modifiersJson?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["template"]>

  export type TemplateSelectScalar = {
    id?: boolean
    waveId?: boolean
    bucket?: boolean
    textPattern?: boolean
    modifiersJson?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "waveId" | "bucket" | "textPattern" | "modifiersJson" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["template"]>
  export type TemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
    microActions?: boolean | Template$microActionsArgs<ExtArgs>
    _count?: boolean | TemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
  }
  export type TemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
  }

  export type $TemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Template"
    objects: {
      wave: Prisma.$WavePayload<ExtArgs>
      waveBucket: Prisma.$WaveBucketPayload<ExtArgs>
      microActions: Prisma.$MicroActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      waveId: string
      bucket: string
      textPattern: string
      modifiersJson: Prisma.JsonValue
      status: $Enums.TemplateStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["template"]>
    composites: {}
  }

  type TemplateGetPayload<S extends boolean | null | undefined | TemplateDefaultArgs> = $Result.GetResult<Prisma.$TemplatePayload, S>

  type TemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TemplateCountAggregateInputType | true
    }

  export interface TemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Template'], meta: { name: 'Template' } }
    /**
     * Find zero or one Template that matches the filter.
     * @param {TemplateFindUniqueArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TemplateFindUniqueArgs>(args: SelectSubset<T, TemplateFindUniqueArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Template that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TemplateFindUniqueOrThrowArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, TemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Template that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateFindFirstArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TemplateFindFirstArgs>(args?: SelectSubset<T, TemplateFindFirstArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Template that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateFindFirstOrThrowArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, TemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Templates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Templates
     * const templates = await prisma.template.findMany()
     * 
     * // Get first 10 Templates
     * const templates = await prisma.template.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const templateWithIdOnly = await prisma.template.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TemplateFindManyArgs>(args?: SelectSubset<T, TemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Template.
     * @param {TemplateCreateArgs} args - Arguments to create a Template.
     * @example
     * // Create one Template
     * const Template = await prisma.template.create({
     *   data: {
     *     // ... data to create a Template
     *   }
     * })
     * 
     */
    create<T extends TemplateCreateArgs>(args: SelectSubset<T, TemplateCreateArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Templates.
     * @param {TemplateCreateManyArgs} args - Arguments to create many Templates.
     * @example
     * // Create many Templates
     * const template = await prisma.template.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TemplateCreateManyArgs>(args?: SelectSubset<T, TemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Templates and returns the data saved in the database.
     * @param {TemplateCreateManyAndReturnArgs} args - Arguments to create many Templates.
     * @example
     * // Create many Templates
     * const template = await prisma.template.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Templates and only return the `id`
     * const templateWithIdOnly = await prisma.template.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, TemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Template.
     * @param {TemplateDeleteArgs} args - Arguments to delete one Template.
     * @example
     * // Delete one Template
     * const Template = await prisma.template.delete({
     *   where: {
     *     // ... filter to delete one Template
     *   }
     * })
     * 
     */
    delete<T extends TemplateDeleteArgs>(args: SelectSubset<T, TemplateDeleteArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Template.
     * @param {TemplateUpdateArgs} args - Arguments to update one Template.
     * @example
     * // Update one Template
     * const template = await prisma.template.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TemplateUpdateArgs>(args: SelectSubset<T, TemplateUpdateArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Templates.
     * @param {TemplateDeleteManyArgs} args - Arguments to filter Templates to delete.
     * @example
     * // Delete a few Templates
     * const { count } = await prisma.template.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TemplateDeleteManyArgs>(args?: SelectSubset<T, TemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Templates
     * const template = await prisma.template.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TemplateUpdateManyArgs>(args: SelectSubset<T, TemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Templates and returns the data updated in the database.
     * @param {TemplateUpdateManyAndReturnArgs} args - Arguments to update many Templates.
     * @example
     * // Update many Templates
     * const template = await prisma.template.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Templates and only return the `id`
     * const templateWithIdOnly = await prisma.template.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, TemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Template.
     * @param {TemplateUpsertArgs} args - Arguments to update or create a Template.
     * @example
     * // Update or create a Template
     * const template = await prisma.template.upsert({
     *   create: {
     *     // ... data to create a Template
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Template we want to update
     *   }
     * })
     */
    upsert<T extends TemplateUpsertArgs>(args: SelectSubset<T, TemplateUpsertArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateCountArgs} args - Arguments to filter Templates to count.
     * @example
     * // Count the number of Templates
     * const count = await prisma.template.count({
     *   where: {
     *     // ... the filter for the Templates we want to count
     *   }
     * })
    **/
    count<T extends TemplateCountArgs>(
      args?: Subset<T, TemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Template.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemplateAggregateArgs>(args: Subset<T, TemplateAggregateArgs>): Prisma.PrismaPromise<GetTemplateAggregateType<T>>

    /**
     * Group by Template.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemplateGroupByArgs['orderBy'] }
        : { orderBy?: TemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Template model
   */
  readonly fields: TemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Template.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wave<T extends WaveDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WaveDefaultArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    waveBucket<T extends WaveBucketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WaveBucketDefaultArgs<ExtArgs>>): Prisma__WaveBucketClient<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    microActions<T extends Template$microActionsArgs<ExtArgs> = {}>(args?: Subset<T, Template$microActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Template model
   */
  interface TemplateFieldRefs {
    readonly id: FieldRef<"Template", 'String'>
    readonly waveId: FieldRef<"Template", 'String'>
    readonly bucket: FieldRef<"Template", 'String'>
    readonly textPattern: FieldRef<"Template", 'String'>
    readonly modifiersJson: FieldRef<"Template", 'Json'>
    readonly status: FieldRef<"Template", 'TemplateStatus'>
    readonly createdAt: FieldRef<"Template", 'DateTime'>
    readonly updatedAt: FieldRef<"Template", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Template findUnique
   */
  export type TemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template findUniqueOrThrow
   */
  export type TemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template findFirst
   */
  export type TemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Templates.
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Templates.
     */
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Template findFirstOrThrow
   */
  export type TemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Templates.
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Templates.
     */
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Template findMany
   */
  export type TemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Templates to fetch.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Templates.
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Template create
   */
  export type TemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a Template.
     */
    data: XOR<TemplateCreateInput, TemplateUncheckedCreateInput>
  }

  /**
   * Template createMany
   */
  export type TemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Templates.
     */
    data: TemplateCreateManyInput | TemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Template createManyAndReturn
   */
  export type TemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * The data used to create many Templates.
     */
    data: TemplateCreateManyInput | TemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Template update
   */
  export type TemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a Template.
     */
    data: XOR<TemplateUpdateInput, TemplateUncheckedUpdateInput>
    /**
     * Choose, which Template to update.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template updateMany
   */
  export type TemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Templates.
     */
    data: XOR<TemplateUpdateManyMutationInput, TemplateUncheckedUpdateManyInput>
    /**
     * Filter which Templates to update
     */
    where?: TemplateWhereInput
    /**
     * Limit how many Templates to update.
     */
    limit?: number
  }

  /**
   * Template updateManyAndReturn
   */
  export type TemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * The data used to update Templates.
     */
    data: XOR<TemplateUpdateManyMutationInput, TemplateUncheckedUpdateManyInput>
    /**
     * Filter which Templates to update
     */
    where?: TemplateWhereInput
    /**
     * Limit how many Templates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Template upsert
   */
  export type TemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the Template to update in case it exists.
     */
    where: TemplateWhereUniqueInput
    /**
     * In case the Template found by the `where` argument doesn't exist, create a new Template with this data.
     */
    create: XOR<TemplateCreateInput, TemplateUncheckedCreateInput>
    /**
     * In case the Template was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TemplateUpdateInput, TemplateUncheckedUpdateInput>
  }

  /**
   * Template delete
   */
  export type TemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter which Template to delete.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template deleteMany
   */
  export type TemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Templates to delete
     */
    where?: TemplateWhereInput
    /**
     * Limit how many Templates to delete.
     */
    limit?: number
  }

  /**
   * Template.microActions
   */
  export type Template$microActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    where?: MicroActionWhereInput
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    cursor?: MicroActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * Template without action
   */
  export type TemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    passwordHash: string | null
    createdAt: Date | null
    dream: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    passwordHash: string | null
    createdAt: Date | null
    dream: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    passwordHash: number
    createdAt: number
    dream: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    passwordHash?: true
    createdAt?: true
    dream?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    passwordHash?: true
    createdAt?: true
    dream?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    passwordHash?: true
    createdAt?: true
    dream?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    passwordHash: string
    createdAt: Date
    dream: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    dream?: boolean
    memberships?: boolean | User$membershipsArgs<ExtArgs>
    actionLogs?: boolean | User$actionLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    dream?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    dream?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    dream?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "passwordHash" | "createdAt" | "dream", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    memberships?: boolean | User$membershipsArgs<ExtArgs>
    actionLogs?: boolean | User$actionLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      memberships: Prisma.$UserRipplePayload<ExtArgs>[]
      actionLogs: Prisma.$ActionLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      passwordHash: string
      createdAt: Date
      dream: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    memberships<T extends User$membershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$membershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    actionLogs<T extends User$actionLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$actionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly dream: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.memberships
   */
  export type User$membershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    where?: UserRippleWhereInput
    orderBy?: UserRippleOrderByWithRelationInput | UserRippleOrderByWithRelationInput[]
    cursor?: UserRippleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRippleScalarFieldEnum | UserRippleScalarFieldEnum[]
  }

  /**
   * User.actionLogs
   */
  export type User$actionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    where?: ActionLogWhereInput
    orderBy?: ActionLogOrderByWithRelationInput | ActionLogOrderByWithRelationInput[]
    cursor?: ActionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionLogScalarFieldEnum | ActionLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Wave
   */

  export type AggregateWave = {
    _count: WaveCountAggregateOutputType | null
    _avg: WaveAvgAggregateOutputType | null
    _sum: WaveSumAggregateOutputType | null
    _min: WaveMinAggregateOutputType | null
    _max: WaveMaxAggregateOutputType | null
  }

  export type WaveAvgAggregateOutputType = {
    impactCoef: number | null
  }

  export type WaveSumAggregateOutputType = {
    impactCoef: number | null
  }

  export type WaveMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    color: string | null
    impactCoef: number | null
    impactUnit: string | null
    impactSource: string | null
    impactVersion: string | null
    allowedBuckets: string | null
  }

  export type WaveMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    color: string | null
    impactCoef: number | null
    impactUnit: string | null
    impactSource: string | null
    impactVersion: string | null
    allowedBuckets: string | null
  }

  export type WaveCountAggregateOutputType = {
    id: number
    name: number
    description: number
    icon: number
    color: number
    impactCoef: number
    impactUnit: number
    impactSource: number
    impactVersion: number
    allowedBuckets: number
    _all: number
  }


  export type WaveAvgAggregateInputType = {
    impactCoef?: true
  }

  export type WaveSumAggregateInputType = {
    impactCoef?: true
  }

  export type WaveMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    color?: true
    impactCoef?: true
    impactUnit?: true
    impactSource?: true
    impactVersion?: true
    allowedBuckets?: true
  }

  export type WaveMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    color?: true
    impactCoef?: true
    impactUnit?: true
    impactSource?: true
    impactVersion?: true
    allowedBuckets?: true
  }

  export type WaveCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    color?: true
    impactCoef?: true
    impactUnit?: true
    impactSource?: true
    impactVersion?: true
    allowedBuckets?: true
    _all?: true
  }

  export type WaveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wave to aggregate.
     */
    where?: WaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Waves to fetch.
     */
    orderBy?: WaveOrderByWithRelationInput | WaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Waves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Waves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Waves
    **/
    _count?: true | WaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WaveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WaveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WaveMaxAggregateInputType
  }

  export type GetWaveAggregateType<T extends WaveAggregateArgs> = {
        [P in keyof T & keyof AggregateWave]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWave[P]>
      : GetScalarType<T[P], AggregateWave[P]>
  }




  export type WaveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WaveWhereInput
    orderBy?: WaveOrderByWithAggregationInput | WaveOrderByWithAggregationInput[]
    by: WaveScalarFieldEnum[] | WaveScalarFieldEnum
    having?: WaveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WaveCountAggregateInputType | true
    _avg?: WaveAvgAggregateInputType
    _sum?: WaveSumAggregateInputType
    _min?: WaveMinAggregateInputType
    _max?: WaveMaxAggregateInputType
  }

  export type WaveGroupByOutputType = {
    id: string
    name: string
    description: string
    icon: string | null
    color: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion: string
    allowedBuckets: string
    _count: WaveCountAggregateOutputType | null
    _avg: WaveAvgAggregateOutputType | null
    _sum: WaveSumAggregateOutputType | null
    _min: WaveMinAggregateOutputType | null
    _max: WaveMaxAggregateOutputType | null
  }

  type GetWaveGroupByPayload<T extends WaveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WaveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WaveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WaveGroupByOutputType[P]>
            : GetScalarType<T[P], WaveGroupByOutputType[P]>
        }
      >
    >


  export type WaveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    impactCoef?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    impactVersion?: boolean
    allowedBuckets?: boolean
    ripples?: boolean | Wave$ripplesArgs<ExtArgs>
    actionLogs?: boolean | Wave$actionLogsArgs<ExtArgs>
    waveBuckets?: boolean | Wave$waveBucketsArgs<ExtArgs>
    templates?: boolean | Wave$templatesArgs<ExtArgs>
    microActions?: boolean | Wave$microActionsArgs<ExtArgs>
    phrases?: boolean | Wave$phrasesArgs<ExtArgs>
    _count?: boolean | WaveCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wave"]>

  export type WaveSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    impactCoef?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    impactVersion?: boolean
    allowedBuckets?: boolean
  }, ExtArgs["result"]["wave"]>

  export type WaveSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    impactCoef?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    impactVersion?: boolean
    allowedBuckets?: boolean
  }, ExtArgs["result"]["wave"]>

  export type WaveSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    color?: boolean
    impactCoef?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    impactVersion?: boolean
    allowedBuckets?: boolean
  }

  export type WaveOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "icon" | "color" | "impactCoef" | "impactUnit" | "impactSource" | "impactVersion" | "allowedBuckets", ExtArgs["result"]["wave"]>
  export type WaveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripples?: boolean | Wave$ripplesArgs<ExtArgs>
    actionLogs?: boolean | Wave$actionLogsArgs<ExtArgs>
    waveBuckets?: boolean | Wave$waveBucketsArgs<ExtArgs>
    templates?: boolean | Wave$templatesArgs<ExtArgs>
    microActions?: boolean | Wave$microActionsArgs<ExtArgs>
    phrases?: boolean | Wave$phrasesArgs<ExtArgs>
    _count?: boolean | WaveCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WaveIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WaveIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WavePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wave"
    objects: {
      ripples: Prisma.$RipplePayload<ExtArgs>[]
      actionLogs: Prisma.$ActionLogPayload<ExtArgs>[]
      waveBuckets: Prisma.$WaveBucketPayload<ExtArgs>[]
      templates: Prisma.$TemplatePayload<ExtArgs>[]
      microActions: Prisma.$MicroActionPayload<ExtArgs>[]
      phrases: Prisma.$PhraseMapPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      icon: string | null
      color: string
      impactCoef: number
      impactUnit: string
      impactSource: string
      impactVersion: string
      allowedBuckets: string
    }, ExtArgs["result"]["wave"]>
    composites: {}
  }

  type WaveGetPayload<S extends boolean | null | undefined | WaveDefaultArgs> = $Result.GetResult<Prisma.$WavePayload, S>

  type WaveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WaveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WaveCountAggregateInputType | true
    }

  export interface WaveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wave'], meta: { name: 'Wave' } }
    /**
     * Find zero or one Wave that matches the filter.
     * @param {WaveFindUniqueArgs} args - Arguments to find a Wave
     * @example
     * // Get one Wave
     * const wave = await prisma.wave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WaveFindUniqueArgs>(args: SelectSubset<T, WaveFindUniqueArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Wave that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WaveFindUniqueOrThrowArgs} args - Arguments to find a Wave
     * @example
     * // Get one Wave
     * const wave = await prisma.wave.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WaveFindUniqueOrThrowArgs>(args: SelectSubset<T, WaveFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wave that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveFindFirstArgs} args - Arguments to find a Wave
     * @example
     * // Get one Wave
     * const wave = await prisma.wave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WaveFindFirstArgs>(args?: SelectSubset<T, WaveFindFirstArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wave that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveFindFirstOrThrowArgs} args - Arguments to find a Wave
     * @example
     * // Get one Wave
     * const wave = await prisma.wave.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WaveFindFirstOrThrowArgs>(args?: SelectSubset<T, WaveFindFirstOrThrowArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Waves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Waves
     * const waves = await prisma.wave.findMany()
     * 
     * // Get first 10 Waves
     * const waves = await prisma.wave.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const waveWithIdOnly = await prisma.wave.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WaveFindManyArgs>(args?: SelectSubset<T, WaveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Wave.
     * @param {WaveCreateArgs} args - Arguments to create a Wave.
     * @example
     * // Create one Wave
     * const Wave = await prisma.wave.create({
     *   data: {
     *     // ... data to create a Wave
     *   }
     * })
     * 
     */
    create<T extends WaveCreateArgs>(args: SelectSubset<T, WaveCreateArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Waves.
     * @param {WaveCreateManyArgs} args - Arguments to create many Waves.
     * @example
     * // Create many Waves
     * const wave = await prisma.wave.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WaveCreateManyArgs>(args?: SelectSubset<T, WaveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Waves and returns the data saved in the database.
     * @param {WaveCreateManyAndReturnArgs} args - Arguments to create many Waves.
     * @example
     * // Create many Waves
     * const wave = await prisma.wave.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Waves and only return the `id`
     * const waveWithIdOnly = await prisma.wave.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WaveCreateManyAndReturnArgs>(args?: SelectSubset<T, WaveCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Wave.
     * @param {WaveDeleteArgs} args - Arguments to delete one Wave.
     * @example
     * // Delete one Wave
     * const Wave = await prisma.wave.delete({
     *   where: {
     *     // ... filter to delete one Wave
     *   }
     * })
     * 
     */
    delete<T extends WaveDeleteArgs>(args: SelectSubset<T, WaveDeleteArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Wave.
     * @param {WaveUpdateArgs} args - Arguments to update one Wave.
     * @example
     * // Update one Wave
     * const wave = await prisma.wave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WaveUpdateArgs>(args: SelectSubset<T, WaveUpdateArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Waves.
     * @param {WaveDeleteManyArgs} args - Arguments to filter Waves to delete.
     * @example
     * // Delete a few Waves
     * const { count } = await prisma.wave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WaveDeleteManyArgs>(args?: SelectSubset<T, WaveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Waves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Waves
     * const wave = await prisma.wave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WaveUpdateManyArgs>(args: SelectSubset<T, WaveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Waves and returns the data updated in the database.
     * @param {WaveUpdateManyAndReturnArgs} args - Arguments to update many Waves.
     * @example
     * // Update many Waves
     * const wave = await prisma.wave.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Waves and only return the `id`
     * const waveWithIdOnly = await prisma.wave.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WaveUpdateManyAndReturnArgs>(args: SelectSubset<T, WaveUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Wave.
     * @param {WaveUpsertArgs} args - Arguments to update or create a Wave.
     * @example
     * // Update or create a Wave
     * const wave = await prisma.wave.upsert({
     *   create: {
     *     // ... data to create a Wave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wave we want to update
     *   }
     * })
     */
    upsert<T extends WaveUpsertArgs>(args: SelectSubset<T, WaveUpsertArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Waves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveCountArgs} args - Arguments to filter Waves to count.
     * @example
     * // Count the number of Waves
     * const count = await prisma.wave.count({
     *   where: {
     *     // ... the filter for the Waves we want to count
     *   }
     * })
    **/
    count<T extends WaveCountArgs>(
      args?: Subset<T, WaveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WaveAggregateArgs>(args: Subset<T, WaveAggregateArgs>): Prisma.PrismaPromise<GetWaveAggregateType<T>>

    /**
     * Group by Wave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WaveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WaveGroupByArgs['orderBy'] }
        : { orderBy?: WaveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wave model
   */
  readonly fields: WaveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WaveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ripples<T extends Wave$ripplesArgs<ExtArgs> = {}>(args?: Subset<T, Wave$ripplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    actionLogs<T extends Wave$actionLogsArgs<ExtArgs> = {}>(args?: Subset<T, Wave$actionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    waveBuckets<T extends Wave$waveBucketsArgs<ExtArgs> = {}>(args?: Subset<T, Wave$waveBucketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    templates<T extends Wave$templatesArgs<ExtArgs> = {}>(args?: Subset<T, Wave$templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    microActions<T extends Wave$microActionsArgs<ExtArgs> = {}>(args?: Subset<T, Wave$microActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    phrases<T extends Wave$phrasesArgs<ExtArgs> = {}>(args?: Subset<T, Wave$phrasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wave model
   */
  interface WaveFieldRefs {
    readonly id: FieldRef<"Wave", 'String'>
    readonly name: FieldRef<"Wave", 'String'>
    readonly description: FieldRef<"Wave", 'String'>
    readonly icon: FieldRef<"Wave", 'String'>
    readonly color: FieldRef<"Wave", 'String'>
    readonly impactCoef: FieldRef<"Wave", 'Float'>
    readonly impactUnit: FieldRef<"Wave", 'String'>
    readonly impactSource: FieldRef<"Wave", 'String'>
    readonly impactVersion: FieldRef<"Wave", 'String'>
    readonly allowedBuckets: FieldRef<"Wave", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Wave findUnique
   */
  export type WaveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter, which Wave to fetch.
     */
    where: WaveWhereUniqueInput
  }

  /**
   * Wave findUniqueOrThrow
   */
  export type WaveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter, which Wave to fetch.
     */
    where: WaveWhereUniqueInput
  }

  /**
   * Wave findFirst
   */
  export type WaveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter, which Wave to fetch.
     */
    where?: WaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Waves to fetch.
     */
    orderBy?: WaveOrderByWithRelationInput | WaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Waves.
     */
    cursor?: WaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Waves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Waves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Waves.
     */
    distinct?: WaveScalarFieldEnum | WaveScalarFieldEnum[]
  }

  /**
   * Wave findFirstOrThrow
   */
  export type WaveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter, which Wave to fetch.
     */
    where?: WaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Waves to fetch.
     */
    orderBy?: WaveOrderByWithRelationInput | WaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Waves.
     */
    cursor?: WaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Waves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Waves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Waves.
     */
    distinct?: WaveScalarFieldEnum | WaveScalarFieldEnum[]
  }

  /**
   * Wave findMany
   */
  export type WaveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter, which Waves to fetch.
     */
    where?: WaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Waves to fetch.
     */
    orderBy?: WaveOrderByWithRelationInput | WaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Waves.
     */
    cursor?: WaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Waves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Waves.
     */
    skip?: number
    distinct?: WaveScalarFieldEnum | WaveScalarFieldEnum[]
  }

  /**
   * Wave create
   */
  export type WaveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * The data needed to create a Wave.
     */
    data: XOR<WaveCreateInput, WaveUncheckedCreateInput>
  }

  /**
   * Wave createMany
   */
  export type WaveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Waves.
     */
    data: WaveCreateManyInput | WaveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wave createManyAndReturn
   */
  export type WaveCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * The data used to create many Waves.
     */
    data: WaveCreateManyInput | WaveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wave update
   */
  export type WaveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * The data needed to update a Wave.
     */
    data: XOR<WaveUpdateInput, WaveUncheckedUpdateInput>
    /**
     * Choose, which Wave to update.
     */
    where: WaveWhereUniqueInput
  }

  /**
   * Wave updateMany
   */
  export type WaveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Waves.
     */
    data: XOR<WaveUpdateManyMutationInput, WaveUncheckedUpdateManyInput>
    /**
     * Filter which Waves to update
     */
    where?: WaveWhereInput
    /**
     * Limit how many Waves to update.
     */
    limit?: number
  }

  /**
   * Wave updateManyAndReturn
   */
  export type WaveUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * The data used to update Waves.
     */
    data: XOR<WaveUpdateManyMutationInput, WaveUncheckedUpdateManyInput>
    /**
     * Filter which Waves to update
     */
    where?: WaveWhereInput
    /**
     * Limit how many Waves to update.
     */
    limit?: number
  }

  /**
   * Wave upsert
   */
  export type WaveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * The filter to search for the Wave to update in case it exists.
     */
    where: WaveWhereUniqueInput
    /**
     * In case the Wave found by the `where` argument doesn't exist, create a new Wave with this data.
     */
    create: XOR<WaveCreateInput, WaveUncheckedCreateInput>
    /**
     * In case the Wave was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WaveUpdateInput, WaveUncheckedUpdateInput>
  }

  /**
   * Wave delete
   */
  export type WaveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    /**
     * Filter which Wave to delete.
     */
    where: WaveWhereUniqueInput
  }

  /**
   * Wave deleteMany
   */
  export type WaveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Waves to delete
     */
    where?: WaveWhereInput
    /**
     * Limit how many Waves to delete.
     */
    limit?: number
  }

  /**
   * Wave.ripples
   */
  export type Wave$ripplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    where?: RippleWhereInput
    orderBy?: RippleOrderByWithRelationInput | RippleOrderByWithRelationInput[]
    cursor?: RippleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RippleScalarFieldEnum | RippleScalarFieldEnum[]
  }

  /**
   * Wave.actionLogs
   */
  export type Wave$actionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    where?: ActionLogWhereInput
    orderBy?: ActionLogOrderByWithRelationInput | ActionLogOrderByWithRelationInput[]
    cursor?: ActionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionLogScalarFieldEnum | ActionLogScalarFieldEnum[]
  }

  /**
   * Wave.waveBuckets
   */
  export type Wave$waveBucketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaveBucket
     */
    select?: WaveBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaveBucket
     */
    omit?: WaveBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveBucketInclude<ExtArgs> | null
    where?: WaveBucketWhereInput
    orderBy?: WaveBucketOrderByWithRelationInput | WaveBucketOrderByWithRelationInput[]
    cursor?: WaveBucketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WaveBucketScalarFieldEnum | WaveBucketScalarFieldEnum[]
  }

  /**
   * Wave.templates
   */
  export type Wave$templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    where?: TemplateWhereInput
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    cursor?: TemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Wave.microActions
   */
  export type Wave$microActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    where?: MicroActionWhereInput
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    cursor?: MicroActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * Wave.phrases
   */
  export type Wave$phrasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
    where?: PhraseMapWhereInput
    orderBy?: PhraseMapOrderByWithRelationInput | PhraseMapOrderByWithRelationInput[]
    cursor?: PhraseMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhraseMapScalarFieldEnum | PhraseMapScalarFieldEnum[]
  }

  /**
   * Wave without action
   */
  export type WaveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
  }


  /**
   * Model UserRipple
   */

  export type AggregateUserRipple = {
    _count: UserRippleCountAggregateOutputType | null
    _min: UserRippleMinAggregateOutputType | null
    _max: UserRippleMaxAggregateOutputType | null
  }

  export type UserRippleMinAggregateOutputType = {
    id: string | null
    userId: string | null
    rippleId: string | null
    isActive: boolean | null
    isPrimary: boolean | null
    joinedAt: Date | null
  }

  export type UserRippleMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    rippleId: string | null
    isActive: boolean | null
    isPrimary: boolean | null
    joinedAt: Date | null
  }

  export type UserRippleCountAggregateOutputType = {
    id: number
    userId: number
    rippleId: number
    isActive: number
    isPrimary: number
    joinedAt: number
    _all: number
  }


  export type UserRippleMinAggregateInputType = {
    id?: true
    userId?: true
    rippleId?: true
    isActive?: true
    isPrimary?: true
    joinedAt?: true
  }

  export type UserRippleMaxAggregateInputType = {
    id?: true
    userId?: true
    rippleId?: true
    isActive?: true
    isPrimary?: true
    joinedAt?: true
  }

  export type UserRippleCountAggregateInputType = {
    id?: true
    userId?: true
    rippleId?: true
    isActive?: true
    isPrimary?: true
    joinedAt?: true
    _all?: true
  }

  export type UserRippleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRipple to aggregate.
     */
    where?: UserRippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRipples to fetch.
     */
    orderBy?: UserRippleOrderByWithRelationInput | UserRippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRipples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRipples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRipples
    **/
    _count?: true | UserRippleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRippleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRippleMaxAggregateInputType
  }

  export type GetUserRippleAggregateType<T extends UserRippleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRipple]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRipple[P]>
      : GetScalarType<T[P], AggregateUserRipple[P]>
  }




  export type UserRippleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRippleWhereInput
    orderBy?: UserRippleOrderByWithAggregationInput | UserRippleOrderByWithAggregationInput[]
    by: UserRippleScalarFieldEnum[] | UserRippleScalarFieldEnum
    having?: UserRippleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRippleCountAggregateInputType | true
    _min?: UserRippleMinAggregateInputType
    _max?: UserRippleMaxAggregateInputType
  }

  export type UserRippleGroupByOutputType = {
    id: string
    userId: string
    rippleId: string
    isActive: boolean
    isPrimary: boolean
    joinedAt: Date
    _count: UserRippleCountAggregateOutputType | null
    _min: UserRippleMinAggregateOutputType | null
    _max: UserRippleMaxAggregateOutputType | null
  }

  type GetUserRippleGroupByPayload<T extends UserRippleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRippleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRippleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRippleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRippleGroupByOutputType[P]>
        }
      >
    >


  export type UserRippleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    rippleId?: boolean
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRipple"]>

  export type UserRippleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    rippleId?: boolean
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRipple"]>

  export type UserRippleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    rippleId?: boolean
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRipple"]>

  export type UserRippleSelectScalar = {
    id?: boolean
    userId?: boolean
    rippleId?: boolean
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: boolean
  }

  export type UserRippleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "rippleId" | "isActive" | "isPrimary" | "joinedAt", ExtArgs["result"]["userRipple"]>
  export type UserRippleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }
  export type UserRippleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }
  export type UserRippleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }

  export type $UserRipplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRipple"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      ripple: Prisma.$RipplePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      rippleId: string
      isActive: boolean
      isPrimary: boolean
      joinedAt: Date
    }, ExtArgs["result"]["userRipple"]>
    composites: {}
  }

  type UserRippleGetPayload<S extends boolean | null | undefined | UserRippleDefaultArgs> = $Result.GetResult<Prisma.$UserRipplePayload, S>

  type UserRippleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserRippleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserRippleCountAggregateInputType | true
    }

  export interface UserRippleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRipple'], meta: { name: 'UserRipple' } }
    /**
     * Find zero or one UserRipple that matches the filter.
     * @param {UserRippleFindUniqueArgs} args - Arguments to find a UserRipple
     * @example
     * // Get one UserRipple
     * const userRipple = await prisma.userRipple.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRippleFindUniqueArgs>(args: SelectSubset<T, UserRippleFindUniqueArgs<ExtArgs>>): Prisma__UserRippleClient<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserRipple that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserRippleFindUniqueOrThrowArgs} args - Arguments to find a UserRipple
     * @example
     * // Get one UserRipple
     * const userRipple = await prisma.userRipple.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRippleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRippleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRippleClient<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRipple that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRippleFindFirstArgs} args - Arguments to find a UserRipple
     * @example
     * // Get one UserRipple
     * const userRipple = await prisma.userRipple.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRippleFindFirstArgs>(args?: SelectSubset<T, UserRippleFindFirstArgs<ExtArgs>>): Prisma__UserRippleClient<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRipple that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRippleFindFirstOrThrowArgs} args - Arguments to find a UserRipple
     * @example
     * // Get one UserRipple
     * const userRipple = await prisma.userRipple.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRippleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRippleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRippleClient<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserRipples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRippleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRipples
     * const userRipples = await prisma.userRipple.findMany()
     * 
     * // Get first 10 UserRipples
     * const userRipples = await prisma.userRipple.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRippleWithIdOnly = await prisma.userRipple.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRippleFindManyArgs>(args?: SelectSubset<T, UserRippleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserRipple.
     * @param {UserRippleCreateArgs} args - Arguments to create a UserRipple.
     * @example
     * // Create one UserRipple
     * const UserRipple = await prisma.userRipple.create({
     *   data: {
     *     // ... data to create a UserRipple
     *   }
     * })
     * 
     */
    create<T extends UserRippleCreateArgs>(args: SelectSubset<T, UserRippleCreateArgs<ExtArgs>>): Prisma__UserRippleClient<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserRipples.
     * @param {UserRippleCreateManyArgs} args - Arguments to create many UserRipples.
     * @example
     * // Create many UserRipples
     * const userRipple = await prisma.userRipple.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRippleCreateManyArgs>(args?: SelectSubset<T, UserRippleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRipples and returns the data saved in the database.
     * @param {UserRippleCreateManyAndReturnArgs} args - Arguments to create many UserRipples.
     * @example
     * // Create many UserRipples
     * const userRipple = await prisma.userRipple.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRipples and only return the `id`
     * const userRippleWithIdOnly = await prisma.userRipple.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRippleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRippleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserRipple.
     * @param {UserRippleDeleteArgs} args - Arguments to delete one UserRipple.
     * @example
     * // Delete one UserRipple
     * const UserRipple = await prisma.userRipple.delete({
     *   where: {
     *     // ... filter to delete one UserRipple
     *   }
     * })
     * 
     */
    delete<T extends UserRippleDeleteArgs>(args: SelectSubset<T, UserRippleDeleteArgs<ExtArgs>>): Prisma__UserRippleClient<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserRipple.
     * @param {UserRippleUpdateArgs} args - Arguments to update one UserRipple.
     * @example
     * // Update one UserRipple
     * const userRipple = await prisma.userRipple.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRippleUpdateArgs>(args: SelectSubset<T, UserRippleUpdateArgs<ExtArgs>>): Prisma__UserRippleClient<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserRipples.
     * @param {UserRippleDeleteManyArgs} args - Arguments to filter UserRipples to delete.
     * @example
     * // Delete a few UserRipples
     * const { count } = await prisma.userRipple.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRippleDeleteManyArgs>(args?: SelectSubset<T, UserRippleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRipples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRippleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRipples
     * const userRipple = await prisma.userRipple.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRippleUpdateManyArgs>(args: SelectSubset<T, UserRippleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRipples and returns the data updated in the database.
     * @param {UserRippleUpdateManyAndReturnArgs} args - Arguments to update many UserRipples.
     * @example
     * // Update many UserRipples
     * const userRipple = await prisma.userRipple.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserRipples and only return the `id`
     * const userRippleWithIdOnly = await prisma.userRipple.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserRippleUpdateManyAndReturnArgs>(args: SelectSubset<T, UserRippleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserRipple.
     * @param {UserRippleUpsertArgs} args - Arguments to update or create a UserRipple.
     * @example
     * // Update or create a UserRipple
     * const userRipple = await prisma.userRipple.upsert({
     *   create: {
     *     // ... data to create a UserRipple
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRipple we want to update
     *   }
     * })
     */
    upsert<T extends UserRippleUpsertArgs>(args: SelectSubset<T, UserRippleUpsertArgs<ExtArgs>>): Prisma__UserRippleClient<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserRipples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRippleCountArgs} args - Arguments to filter UserRipples to count.
     * @example
     * // Count the number of UserRipples
     * const count = await prisma.userRipple.count({
     *   where: {
     *     // ... the filter for the UserRipples we want to count
     *   }
     * })
    **/
    count<T extends UserRippleCountArgs>(
      args?: Subset<T, UserRippleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRippleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRipple.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRippleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRippleAggregateArgs>(args: Subset<T, UserRippleAggregateArgs>): Prisma.PrismaPromise<GetUserRippleAggregateType<T>>

    /**
     * Group by UserRipple.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRippleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRippleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRippleGroupByArgs['orderBy'] }
        : { orderBy?: UserRippleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRippleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRippleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRipple model
   */
  readonly fields: UserRippleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRipple.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRippleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ripple<T extends RippleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RippleDefaultArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRipple model
   */
  interface UserRippleFieldRefs {
    readonly id: FieldRef<"UserRipple", 'String'>
    readonly userId: FieldRef<"UserRipple", 'String'>
    readonly rippleId: FieldRef<"UserRipple", 'String'>
    readonly isActive: FieldRef<"UserRipple", 'Boolean'>
    readonly isPrimary: FieldRef<"UserRipple", 'Boolean'>
    readonly joinedAt: FieldRef<"UserRipple", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserRipple findUnique
   */
  export type UserRippleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    /**
     * Filter, which UserRipple to fetch.
     */
    where: UserRippleWhereUniqueInput
  }

  /**
   * UserRipple findUniqueOrThrow
   */
  export type UserRippleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    /**
     * Filter, which UserRipple to fetch.
     */
    where: UserRippleWhereUniqueInput
  }

  /**
   * UserRipple findFirst
   */
  export type UserRippleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    /**
     * Filter, which UserRipple to fetch.
     */
    where?: UserRippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRipples to fetch.
     */
    orderBy?: UserRippleOrderByWithRelationInput | UserRippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRipples.
     */
    cursor?: UserRippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRipples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRipples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRipples.
     */
    distinct?: UserRippleScalarFieldEnum | UserRippleScalarFieldEnum[]
  }

  /**
   * UserRipple findFirstOrThrow
   */
  export type UserRippleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    /**
     * Filter, which UserRipple to fetch.
     */
    where?: UserRippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRipples to fetch.
     */
    orderBy?: UserRippleOrderByWithRelationInput | UserRippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRipples.
     */
    cursor?: UserRippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRipples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRipples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRipples.
     */
    distinct?: UserRippleScalarFieldEnum | UserRippleScalarFieldEnum[]
  }

  /**
   * UserRipple findMany
   */
  export type UserRippleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    /**
     * Filter, which UserRipples to fetch.
     */
    where?: UserRippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRipples to fetch.
     */
    orderBy?: UserRippleOrderByWithRelationInput | UserRippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRipples.
     */
    cursor?: UserRippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRipples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRipples.
     */
    skip?: number
    distinct?: UserRippleScalarFieldEnum | UserRippleScalarFieldEnum[]
  }

  /**
   * UserRipple create
   */
  export type UserRippleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRipple.
     */
    data: XOR<UserRippleCreateInput, UserRippleUncheckedCreateInput>
  }

  /**
   * UserRipple createMany
   */
  export type UserRippleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRipples.
     */
    data: UserRippleCreateManyInput | UserRippleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRipple createManyAndReturn
   */
  export type UserRippleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * The data used to create many UserRipples.
     */
    data: UserRippleCreateManyInput | UserRippleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRipple update
   */
  export type UserRippleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRipple.
     */
    data: XOR<UserRippleUpdateInput, UserRippleUncheckedUpdateInput>
    /**
     * Choose, which UserRipple to update.
     */
    where: UserRippleWhereUniqueInput
  }

  /**
   * UserRipple updateMany
   */
  export type UserRippleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRipples.
     */
    data: XOR<UserRippleUpdateManyMutationInput, UserRippleUncheckedUpdateManyInput>
    /**
     * Filter which UserRipples to update
     */
    where?: UserRippleWhereInput
    /**
     * Limit how many UserRipples to update.
     */
    limit?: number
  }

  /**
   * UserRipple updateManyAndReturn
   */
  export type UserRippleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * The data used to update UserRipples.
     */
    data: XOR<UserRippleUpdateManyMutationInput, UserRippleUncheckedUpdateManyInput>
    /**
     * Filter which UserRipples to update
     */
    where?: UserRippleWhereInput
    /**
     * Limit how many UserRipples to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRipple upsert
   */
  export type UserRippleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRipple to update in case it exists.
     */
    where: UserRippleWhereUniqueInput
    /**
     * In case the UserRipple found by the `where` argument doesn't exist, create a new UserRipple with this data.
     */
    create: XOR<UserRippleCreateInput, UserRippleUncheckedCreateInput>
    /**
     * In case the UserRipple was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRippleUpdateInput, UserRippleUncheckedUpdateInput>
  }

  /**
   * UserRipple delete
   */
  export type UserRippleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    /**
     * Filter which UserRipple to delete.
     */
    where: UserRippleWhereUniqueInput
  }

  /**
   * UserRipple deleteMany
   */
  export type UserRippleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRipples to delete
     */
    where?: UserRippleWhereInput
    /**
     * Limit how many UserRipples to delete.
     */
    limit?: number
  }

  /**
   * UserRipple without action
   */
  export type UserRippleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
  }


  /**
   * Model RippleActivity
   */

  export type AggregateRippleActivity = {
    _count: RippleActivityCountAggregateOutputType | null
    _min: RippleActivityMinAggregateOutputType | null
    _max: RippleActivityMaxAggregateOutputType | null
  }

  export type RippleActivityMinAggregateOutputType = {
    id: string | null
    rippleId: string | null
    city: string | null
    blurb: string | null
    createdAt: Date | null
  }

  export type RippleActivityMaxAggregateOutputType = {
    id: string | null
    rippleId: string | null
    city: string | null
    blurb: string | null
    createdAt: Date | null
  }

  export type RippleActivityCountAggregateOutputType = {
    id: number
    rippleId: number
    city: number
    blurb: number
    createdAt: number
    _all: number
  }


  export type RippleActivityMinAggregateInputType = {
    id?: true
    rippleId?: true
    city?: true
    blurb?: true
    createdAt?: true
  }

  export type RippleActivityMaxAggregateInputType = {
    id?: true
    rippleId?: true
    city?: true
    blurb?: true
    createdAt?: true
  }

  export type RippleActivityCountAggregateInputType = {
    id?: true
    rippleId?: true
    city?: true
    blurb?: true
    createdAt?: true
    _all?: true
  }

  export type RippleActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RippleActivity to aggregate.
     */
    where?: RippleActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RippleActivities to fetch.
     */
    orderBy?: RippleActivityOrderByWithRelationInput | RippleActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RippleActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RippleActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RippleActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RippleActivities
    **/
    _count?: true | RippleActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RippleActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RippleActivityMaxAggregateInputType
  }

  export type GetRippleActivityAggregateType<T extends RippleActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateRippleActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRippleActivity[P]>
      : GetScalarType<T[P], AggregateRippleActivity[P]>
  }




  export type RippleActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RippleActivityWhereInput
    orderBy?: RippleActivityOrderByWithAggregationInput | RippleActivityOrderByWithAggregationInput[]
    by: RippleActivityScalarFieldEnum[] | RippleActivityScalarFieldEnum
    having?: RippleActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RippleActivityCountAggregateInputType | true
    _min?: RippleActivityMinAggregateInputType
    _max?: RippleActivityMaxAggregateInputType
  }

  export type RippleActivityGroupByOutputType = {
    id: string
    rippleId: string
    city: string | null
    blurb: string
    createdAt: Date
    _count: RippleActivityCountAggregateOutputType | null
    _min: RippleActivityMinAggregateOutputType | null
    _max: RippleActivityMaxAggregateOutputType | null
  }

  type GetRippleActivityGroupByPayload<T extends RippleActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RippleActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RippleActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RippleActivityGroupByOutputType[P]>
            : GetScalarType<T[P], RippleActivityGroupByOutputType[P]>
        }
      >
    >


  export type RippleActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rippleId?: boolean
    city?: boolean
    blurb?: boolean
    createdAt?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rippleActivity"]>

  export type RippleActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rippleId?: boolean
    city?: boolean
    blurb?: boolean
    createdAt?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rippleActivity"]>

  export type RippleActivitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rippleId?: boolean
    city?: boolean
    blurb?: boolean
    createdAt?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rippleActivity"]>

  export type RippleActivitySelectScalar = {
    id?: boolean
    rippleId?: boolean
    city?: boolean
    blurb?: boolean
    createdAt?: boolean
  }

  export type RippleActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "rippleId" | "city" | "blurb" | "createdAt", ExtArgs["result"]["rippleActivity"]>
  export type RippleActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }
  export type RippleActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }
  export type RippleActivityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }

  export type $RippleActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RippleActivity"
    objects: {
      ripple: Prisma.$RipplePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rippleId: string
      city: string | null
      blurb: string
      createdAt: Date
    }, ExtArgs["result"]["rippleActivity"]>
    composites: {}
  }

  type RippleActivityGetPayload<S extends boolean | null | undefined | RippleActivityDefaultArgs> = $Result.GetResult<Prisma.$RippleActivityPayload, S>

  type RippleActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RippleActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RippleActivityCountAggregateInputType | true
    }

  export interface RippleActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RippleActivity'], meta: { name: 'RippleActivity' } }
    /**
     * Find zero or one RippleActivity that matches the filter.
     * @param {RippleActivityFindUniqueArgs} args - Arguments to find a RippleActivity
     * @example
     * // Get one RippleActivity
     * const rippleActivity = await prisma.rippleActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RippleActivityFindUniqueArgs>(args: SelectSubset<T, RippleActivityFindUniqueArgs<ExtArgs>>): Prisma__RippleActivityClient<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RippleActivity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RippleActivityFindUniqueOrThrowArgs} args - Arguments to find a RippleActivity
     * @example
     * // Get one RippleActivity
     * const rippleActivity = await prisma.rippleActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RippleActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, RippleActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RippleActivityClient<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RippleActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleActivityFindFirstArgs} args - Arguments to find a RippleActivity
     * @example
     * // Get one RippleActivity
     * const rippleActivity = await prisma.rippleActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RippleActivityFindFirstArgs>(args?: SelectSubset<T, RippleActivityFindFirstArgs<ExtArgs>>): Prisma__RippleActivityClient<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RippleActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleActivityFindFirstOrThrowArgs} args - Arguments to find a RippleActivity
     * @example
     * // Get one RippleActivity
     * const rippleActivity = await prisma.rippleActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RippleActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, RippleActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__RippleActivityClient<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RippleActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RippleActivities
     * const rippleActivities = await prisma.rippleActivity.findMany()
     * 
     * // Get first 10 RippleActivities
     * const rippleActivities = await prisma.rippleActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rippleActivityWithIdOnly = await prisma.rippleActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RippleActivityFindManyArgs>(args?: SelectSubset<T, RippleActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RippleActivity.
     * @param {RippleActivityCreateArgs} args - Arguments to create a RippleActivity.
     * @example
     * // Create one RippleActivity
     * const RippleActivity = await prisma.rippleActivity.create({
     *   data: {
     *     // ... data to create a RippleActivity
     *   }
     * })
     * 
     */
    create<T extends RippleActivityCreateArgs>(args: SelectSubset<T, RippleActivityCreateArgs<ExtArgs>>): Prisma__RippleActivityClient<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RippleActivities.
     * @param {RippleActivityCreateManyArgs} args - Arguments to create many RippleActivities.
     * @example
     * // Create many RippleActivities
     * const rippleActivity = await prisma.rippleActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RippleActivityCreateManyArgs>(args?: SelectSubset<T, RippleActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RippleActivities and returns the data saved in the database.
     * @param {RippleActivityCreateManyAndReturnArgs} args - Arguments to create many RippleActivities.
     * @example
     * // Create many RippleActivities
     * const rippleActivity = await prisma.rippleActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RippleActivities and only return the `id`
     * const rippleActivityWithIdOnly = await prisma.rippleActivity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RippleActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, RippleActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RippleActivity.
     * @param {RippleActivityDeleteArgs} args - Arguments to delete one RippleActivity.
     * @example
     * // Delete one RippleActivity
     * const RippleActivity = await prisma.rippleActivity.delete({
     *   where: {
     *     // ... filter to delete one RippleActivity
     *   }
     * })
     * 
     */
    delete<T extends RippleActivityDeleteArgs>(args: SelectSubset<T, RippleActivityDeleteArgs<ExtArgs>>): Prisma__RippleActivityClient<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RippleActivity.
     * @param {RippleActivityUpdateArgs} args - Arguments to update one RippleActivity.
     * @example
     * // Update one RippleActivity
     * const rippleActivity = await prisma.rippleActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RippleActivityUpdateArgs>(args: SelectSubset<T, RippleActivityUpdateArgs<ExtArgs>>): Prisma__RippleActivityClient<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RippleActivities.
     * @param {RippleActivityDeleteManyArgs} args - Arguments to filter RippleActivities to delete.
     * @example
     * // Delete a few RippleActivities
     * const { count } = await prisma.rippleActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RippleActivityDeleteManyArgs>(args?: SelectSubset<T, RippleActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RippleActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RippleActivities
     * const rippleActivity = await prisma.rippleActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RippleActivityUpdateManyArgs>(args: SelectSubset<T, RippleActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RippleActivities and returns the data updated in the database.
     * @param {RippleActivityUpdateManyAndReturnArgs} args - Arguments to update many RippleActivities.
     * @example
     * // Update many RippleActivities
     * const rippleActivity = await prisma.rippleActivity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RippleActivities and only return the `id`
     * const rippleActivityWithIdOnly = await prisma.rippleActivity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RippleActivityUpdateManyAndReturnArgs>(args: SelectSubset<T, RippleActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RippleActivity.
     * @param {RippleActivityUpsertArgs} args - Arguments to update or create a RippleActivity.
     * @example
     * // Update or create a RippleActivity
     * const rippleActivity = await prisma.rippleActivity.upsert({
     *   create: {
     *     // ... data to create a RippleActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RippleActivity we want to update
     *   }
     * })
     */
    upsert<T extends RippleActivityUpsertArgs>(args: SelectSubset<T, RippleActivityUpsertArgs<ExtArgs>>): Prisma__RippleActivityClient<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RippleActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleActivityCountArgs} args - Arguments to filter RippleActivities to count.
     * @example
     * // Count the number of RippleActivities
     * const count = await prisma.rippleActivity.count({
     *   where: {
     *     // ... the filter for the RippleActivities we want to count
     *   }
     * })
    **/
    count<T extends RippleActivityCountArgs>(
      args?: Subset<T, RippleActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RippleActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RippleActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RippleActivityAggregateArgs>(args: Subset<T, RippleActivityAggregateArgs>): Prisma.PrismaPromise<GetRippleActivityAggregateType<T>>

    /**
     * Group by RippleActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RippleActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RippleActivityGroupByArgs['orderBy'] }
        : { orderBy?: RippleActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RippleActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRippleActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RippleActivity model
   */
  readonly fields: RippleActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RippleActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RippleActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ripple<T extends RippleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RippleDefaultArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RippleActivity model
   */
  interface RippleActivityFieldRefs {
    readonly id: FieldRef<"RippleActivity", 'String'>
    readonly rippleId: FieldRef<"RippleActivity", 'String'>
    readonly city: FieldRef<"RippleActivity", 'String'>
    readonly blurb: FieldRef<"RippleActivity", 'String'>
    readonly createdAt: FieldRef<"RippleActivity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RippleActivity findUnique
   */
  export type RippleActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
    /**
     * Filter, which RippleActivity to fetch.
     */
    where: RippleActivityWhereUniqueInput
  }

  /**
   * RippleActivity findUniqueOrThrow
   */
  export type RippleActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
    /**
     * Filter, which RippleActivity to fetch.
     */
    where: RippleActivityWhereUniqueInput
  }

  /**
   * RippleActivity findFirst
   */
  export type RippleActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
    /**
     * Filter, which RippleActivity to fetch.
     */
    where?: RippleActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RippleActivities to fetch.
     */
    orderBy?: RippleActivityOrderByWithRelationInput | RippleActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RippleActivities.
     */
    cursor?: RippleActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RippleActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RippleActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RippleActivities.
     */
    distinct?: RippleActivityScalarFieldEnum | RippleActivityScalarFieldEnum[]
  }

  /**
   * RippleActivity findFirstOrThrow
   */
  export type RippleActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
    /**
     * Filter, which RippleActivity to fetch.
     */
    where?: RippleActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RippleActivities to fetch.
     */
    orderBy?: RippleActivityOrderByWithRelationInput | RippleActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RippleActivities.
     */
    cursor?: RippleActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RippleActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RippleActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RippleActivities.
     */
    distinct?: RippleActivityScalarFieldEnum | RippleActivityScalarFieldEnum[]
  }

  /**
   * RippleActivity findMany
   */
  export type RippleActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
    /**
     * Filter, which RippleActivities to fetch.
     */
    where?: RippleActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RippleActivities to fetch.
     */
    orderBy?: RippleActivityOrderByWithRelationInput | RippleActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RippleActivities.
     */
    cursor?: RippleActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RippleActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RippleActivities.
     */
    skip?: number
    distinct?: RippleActivityScalarFieldEnum | RippleActivityScalarFieldEnum[]
  }

  /**
   * RippleActivity create
   */
  export type RippleActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a RippleActivity.
     */
    data: XOR<RippleActivityCreateInput, RippleActivityUncheckedCreateInput>
  }

  /**
   * RippleActivity createMany
   */
  export type RippleActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RippleActivities.
     */
    data: RippleActivityCreateManyInput | RippleActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RippleActivity createManyAndReturn
   */
  export type RippleActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * The data used to create many RippleActivities.
     */
    data: RippleActivityCreateManyInput | RippleActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RippleActivity update
   */
  export type RippleActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a RippleActivity.
     */
    data: XOR<RippleActivityUpdateInput, RippleActivityUncheckedUpdateInput>
    /**
     * Choose, which RippleActivity to update.
     */
    where: RippleActivityWhereUniqueInput
  }

  /**
   * RippleActivity updateMany
   */
  export type RippleActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RippleActivities.
     */
    data: XOR<RippleActivityUpdateManyMutationInput, RippleActivityUncheckedUpdateManyInput>
    /**
     * Filter which RippleActivities to update
     */
    where?: RippleActivityWhereInput
    /**
     * Limit how many RippleActivities to update.
     */
    limit?: number
  }

  /**
   * RippleActivity updateManyAndReturn
   */
  export type RippleActivityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * The data used to update RippleActivities.
     */
    data: XOR<RippleActivityUpdateManyMutationInput, RippleActivityUncheckedUpdateManyInput>
    /**
     * Filter which RippleActivities to update
     */
    where?: RippleActivityWhereInput
    /**
     * Limit how many RippleActivities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RippleActivity upsert
   */
  export type RippleActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the RippleActivity to update in case it exists.
     */
    where: RippleActivityWhereUniqueInput
    /**
     * In case the RippleActivity found by the `where` argument doesn't exist, create a new RippleActivity with this data.
     */
    create: XOR<RippleActivityCreateInput, RippleActivityUncheckedCreateInput>
    /**
     * In case the RippleActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RippleActivityUpdateInput, RippleActivityUncheckedUpdateInput>
  }

  /**
   * RippleActivity delete
   */
  export type RippleActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
    /**
     * Filter which RippleActivity to delete.
     */
    where: RippleActivityWhereUniqueInput
  }

  /**
   * RippleActivity deleteMany
   */
  export type RippleActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RippleActivities to delete
     */
    where?: RippleActivityWhereInput
    /**
     * Limit how many RippleActivities to delete.
     */
    limit?: number
  }

  /**
   * RippleActivity without action
   */
  export type RippleActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
  }


  /**
   * Model RippleSummary
   */

  export type AggregateRippleSummary = {
    _count: RippleSummaryCountAggregateOutputType | null
    _avg: RippleSummaryAvgAggregateOutputType | null
    _sum: RippleSummarySumAggregateOutputType | null
    _min: RippleSummaryMinAggregateOutputType | null
    _max: RippleSummaryMaxAggregateOutputType | null
  }

  export type RippleSummaryAvgAggregateOutputType = {
    participants: number | null
    actionsTotal: number | null
    impactValue: number | null
    impact30d: number | null
  }

  export type RippleSummarySumAggregateOutputType = {
    participants: number | null
    actionsTotal: number | null
    impactValue: number | null
    impact30d: number | null
  }

  export type RippleSummaryMinAggregateOutputType = {
    rippleId: string | null
    participants: number | null
    actionsTotal: number | null
    impactValue: number | null
    impact30d: number | null
    impactUnit: string | null
    impactSource: string | null
    updatedAt: Date | null
  }

  export type RippleSummaryMaxAggregateOutputType = {
    rippleId: string | null
    participants: number | null
    actionsTotal: number | null
    impactValue: number | null
    impact30d: number | null
    impactUnit: string | null
    impactSource: string | null
    updatedAt: Date | null
  }

  export type RippleSummaryCountAggregateOutputType = {
    rippleId: number
    participants: number
    actionsTotal: number
    impactValue: number
    impact30d: number
    impactUnit: number
    impactSource: number
    updatedAt: number
    _all: number
  }


  export type RippleSummaryAvgAggregateInputType = {
    participants?: true
    actionsTotal?: true
    impactValue?: true
    impact30d?: true
  }

  export type RippleSummarySumAggregateInputType = {
    participants?: true
    actionsTotal?: true
    impactValue?: true
    impact30d?: true
  }

  export type RippleSummaryMinAggregateInputType = {
    rippleId?: true
    participants?: true
    actionsTotal?: true
    impactValue?: true
    impact30d?: true
    impactUnit?: true
    impactSource?: true
    updatedAt?: true
  }

  export type RippleSummaryMaxAggregateInputType = {
    rippleId?: true
    participants?: true
    actionsTotal?: true
    impactValue?: true
    impact30d?: true
    impactUnit?: true
    impactSource?: true
    updatedAt?: true
  }

  export type RippleSummaryCountAggregateInputType = {
    rippleId?: true
    participants?: true
    actionsTotal?: true
    impactValue?: true
    impact30d?: true
    impactUnit?: true
    impactSource?: true
    updatedAt?: true
    _all?: true
  }

  export type RippleSummaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RippleSummary to aggregate.
     */
    where?: RippleSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RippleSummaries to fetch.
     */
    orderBy?: RippleSummaryOrderByWithRelationInput | RippleSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RippleSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RippleSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RippleSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RippleSummaries
    **/
    _count?: true | RippleSummaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RippleSummaryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RippleSummarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RippleSummaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RippleSummaryMaxAggregateInputType
  }

  export type GetRippleSummaryAggregateType<T extends RippleSummaryAggregateArgs> = {
        [P in keyof T & keyof AggregateRippleSummary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRippleSummary[P]>
      : GetScalarType<T[P], AggregateRippleSummary[P]>
  }




  export type RippleSummaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RippleSummaryWhereInput
    orderBy?: RippleSummaryOrderByWithAggregationInput | RippleSummaryOrderByWithAggregationInput[]
    by: RippleSummaryScalarFieldEnum[] | RippleSummaryScalarFieldEnum
    having?: RippleSummaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RippleSummaryCountAggregateInputType | true
    _avg?: RippleSummaryAvgAggregateInputType
    _sum?: RippleSummarySumAggregateInputType
    _min?: RippleSummaryMinAggregateInputType
    _max?: RippleSummaryMaxAggregateInputType
  }

  export type RippleSummaryGroupByOutputType = {
    rippleId: string
    participants: number
    actionsTotal: number
    impactValue: number
    impact30d: number
    impactUnit: string
    impactSource: string
    updatedAt: Date
    _count: RippleSummaryCountAggregateOutputType | null
    _avg: RippleSummaryAvgAggregateOutputType | null
    _sum: RippleSummarySumAggregateOutputType | null
    _min: RippleSummaryMinAggregateOutputType | null
    _max: RippleSummaryMaxAggregateOutputType | null
  }

  type GetRippleSummaryGroupByPayload<T extends RippleSummaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RippleSummaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RippleSummaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RippleSummaryGroupByOutputType[P]>
            : GetScalarType<T[P], RippleSummaryGroupByOutputType[P]>
        }
      >
    >


  export type RippleSummarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rippleId?: boolean
    participants?: boolean
    actionsTotal?: boolean
    impactValue?: boolean
    impact30d?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    updatedAt?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rippleSummary"]>

  export type RippleSummarySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rippleId?: boolean
    participants?: boolean
    actionsTotal?: boolean
    impactValue?: boolean
    impact30d?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    updatedAt?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rippleSummary"]>

  export type RippleSummarySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rippleId?: boolean
    participants?: boolean
    actionsTotal?: boolean
    impactValue?: boolean
    impact30d?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    updatedAt?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rippleSummary"]>

  export type RippleSummarySelectScalar = {
    rippleId?: boolean
    participants?: boolean
    actionsTotal?: boolean
    impactValue?: boolean
    impact30d?: boolean
    impactUnit?: boolean
    impactSource?: boolean
    updatedAt?: boolean
  }

  export type RippleSummaryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"rippleId" | "participants" | "actionsTotal" | "impactValue" | "impact30d" | "impactUnit" | "impactSource" | "updatedAt", ExtArgs["result"]["rippleSummary"]>
  export type RippleSummaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }
  export type RippleSummaryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }
  export type RippleSummaryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
  }

  export type $RippleSummaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RippleSummary"
    objects: {
      ripple: Prisma.$RipplePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      rippleId: string
      participants: number
      actionsTotal: number
      impactValue: number
      impact30d: number
      impactUnit: string
      impactSource: string
      updatedAt: Date
    }, ExtArgs["result"]["rippleSummary"]>
    composites: {}
  }

  type RippleSummaryGetPayload<S extends boolean | null | undefined | RippleSummaryDefaultArgs> = $Result.GetResult<Prisma.$RippleSummaryPayload, S>

  type RippleSummaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RippleSummaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RippleSummaryCountAggregateInputType | true
    }

  export interface RippleSummaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RippleSummary'], meta: { name: 'RippleSummary' } }
    /**
     * Find zero or one RippleSummary that matches the filter.
     * @param {RippleSummaryFindUniqueArgs} args - Arguments to find a RippleSummary
     * @example
     * // Get one RippleSummary
     * const rippleSummary = await prisma.rippleSummary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RippleSummaryFindUniqueArgs>(args: SelectSubset<T, RippleSummaryFindUniqueArgs<ExtArgs>>): Prisma__RippleSummaryClient<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RippleSummary that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RippleSummaryFindUniqueOrThrowArgs} args - Arguments to find a RippleSummary
     * @example
     * // Get one RippleSummary
     * const rippleSummary = await prisma.rippleSummary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RippleSummaryFindUniqueOrThrowArgs>(args: SelectSubset<T, RippleSummaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RippleSummaryClient<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RippleSummary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleSummaryFindFirstArgs} args - Arguments to find a RippleSummary
     * @example
     * // Get one RippleSummary
     * const rippleSummary = await prisma.rippleSummary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RippleSummaryFindFirstArgs>(args?: SelectSubset<T, RippleSummaryFindFirstArgs<ExtArgs>>): Prisma__RippleSummaryClient<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RippleSummary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleSummaryFindFirstOrThrowArgs} args - Arguments to find a RippleSummary
     * @example
     * // Get one RippleSummary
     * const rippleSummary = await prisma.rippleSummary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RippleSummaryFindFirstOrThrowArgs>(args?: SelectSubset<T, RippleSummaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__RippleSummaryClient<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RippleSummaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleSummaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RippleSummaries
     * const rippleSummaries = await prisma.rippleSummary.findMany()
     * 
     * // Get first 10 RippleSummaries
     * const rippleSummaries = await prisma.rippleSummary.findMany({ take: 10 })
     * 
     * // Only select the `rippleId`
     * const rippleSummaryWithRippleIdOnly = await prisma.rippleSummary.findMany({ select: { rippleId: true } })
     * 
     */
    findMany<T extends RippleSummaryFindManyArgs>(args?: SelectSubset<T, RippleSummaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RippleSummary.
     * @param {RippleSummaryCreateArgs} args - Arguments to create a RippleSummary.
     * @example
     * // Create one RippleSummary
     * const RippleSummary = await prisma.rippleSummary.create({
     *   data: {
     *     // ... data to create a RippleSummary
     *   }
     * })
     * 
     */
    create<T extends RippleSummaryCreateArgs>(args: SelectSubset<T, RippleSummaryCreateArgs<ExtArgs>>): Prisma__RippleSummaryClient<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RippleSummaries.
     * @param {RippleSummaryCreateManyArgs} args - Arguments to create many RippleSummaries.
     * @example
     * // Create many RippleSummaries
     * const rippleSummary = await prisma.rippleSummary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RippleSummaryCreateManyArgs>(args?: SelectSubset<T, RippleSummaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RippleSummaries and returns the data saved in the database.
     * @param {RippleSummaryCreateManyAndReturnArgs} args - Arguments to create many RippleSummaries.
     * @example
     * // Create many RippleSummaries
     * const rippleSummary = await prisma.rippleSummary.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RippleSummaries and only return the `rippleId`
     * const rippleSummaryWithRippleIdOnly = await prisma.rippleSummary.createManyAndReturn({
     *   select: { rippleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RippleSummaryCreateManyAndReturnArgs>(args?: SelectSubset<T, RippleSummaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RippleSummary.
     * @param {RippleSummaryDeleteArgs} args - Arguments to delete one RippleSummary.
     * @example
     * // Delete one RippleSummary
     * const RippleSummary = await prisma.rippleSummary.delete({
     *   where: {
     *     // ... filter to delete one RippleSummary
     *   }
     * })
     * 
     */
    delete<T extends RippleSummaryDeleteArgs>(args: SelectSubset<T, RippleSummaryDeleteArgs<ExtArgs>>): Prisma__RippleSummaryClient<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RippleSummary.
     * @param {RippleSummaryUpdateArgs} args - Arguments to update one RippleSummary.
     * @example
     * // Update one RippleSummary
     * const rippleSummary = await prisma.rippleSummary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RippleSummaryUpdateArgs>(args: SelectSubset<T, RippleSummaryUpdateArgs<ExtArgs>>): Prisma__RippleSummaryClient<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RippleSummaries.
     * @param {RippleSummaryDeleteManyArgs} args - Arguments to filter RippleSummaries to delete.
     * @example
     * // Delete a few RippleSummaries
     * const { count } = await prisma.rippleSummary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RippleSummaryDeleteManyArgs>(args?: SelectSubset<T, RippleSummaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RippleSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleSummaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RippleSummaries
     * const rippleSummary = await prisma.rippleSummary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RippleSummaryUpdateManyArgs>(args: SelectSubset<T, RippleSummaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RippleSummaries and returns the data updated in the database.
     * @param {RippleSummaryUpdateManyAndReturnArgs} args - Arguments to update many RippleSummaries.
     * @example
     * // Update many RippleSummaries
     * const rippleSummary = await prisma.rippleSummary.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RippleSummaries and only return the `rippleId`
     * const rippleSummaryWithRippleIdOnly = await prisma.rippleSummary.updateManyAndReturn({
     *   select: { rippleId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RippleSummaryUpdateManyAndReturnArgs>(args: SelectSubset<T, RippleSummaryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RippleSummary.
     * @param {RippleSummaryUpsertArgs} args - Arguments to update or create a RippleSummary.
     * @example
     * // Update or create a RippleSummary
     * const rippleSummary = await prisma.rippleSummary.upsert({
     *   create: {
     *     // ... data to create a RippleSummary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RippleSummary we want to update
     *   }
     * })
     */
    upsert<T extends RippleSummaryUpsertArgs>(args: SelectSubset<T, RippleSummaryUpsertArgs<ExtArgs>>): Prisma__RippleSummaryClient<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RippleSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleSummaryCountArgs} args - Arguments to filter RippleSummaries to count.
     * @example
     * // Count the number of RippleSummaries
     * const count = await prisma.rippleSummary.count({
     *   where: {
     *     // ... the filter for the RippleSummaries we want to count
     *   }
     * })
    **/
    count<T extends RippleSummaryCountArgs>(
      args?: Subset<T, RippleSummaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RippleSummaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RippleSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleSummaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RippleSummaryAggregateArgs>(args: Subset<T, RippleSummaryAggregateArgs>): Prisma.PrismaPromise<GetRippleSummaryAggregateType<T>>

    /**
     * Group by RippleSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleSummaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RippleSummaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RippleSummaryGroupByArgs['orderBy'] }
        : { orderBy?: RippleSummaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RippleSummaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRippleSummaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RippleSummary model
   */
  readonly fields: RippleSummaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RippleSummary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RippleSummaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ripple<T extends RippleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RippleDefaultArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RippleSummary model
   */
  interface RippleSummaryFieldRefs {
    readonly rippleId: FieldRef<"RippleSummary", 'String'>
    readonly participants: FieldRef<"RippleSummary", 'Int'>
    readonly actionsTotal: FieldRef<"RippleSummary", 'Int'>
    readonly impactValue: FieldRef<"RippleSummary", 'Float'>
    readonly impact30d: FieldRef<"RippleSummary", 'Float'>
    readonly impactUnit: FieldRef<"RippleSummary", 'String'>
    readonly impactSource: FieldRef<"RippleSummary", 'String'>
    readonly updatedAt: FieldRef<"RippleSummary", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RippleSummary findUnique
   */
  export type RippleSummaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
    /**
     * Filter, which RippleSummary to fetch.
     */
    where: RippleSummaryWhereUniqueInput
  }

  /**
   * RippleSummary findUniqueOrThrow
   */
  export type RippleSummaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
    /**
     * Filter, which RippleSummary to fetch.
     */
    where: RippleSummaryWhereUniqueInput
  }

  /**
   * RippleSummary findFirst
   */
  export type RippleSummaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
    /**
     * Filter, which RippleSummary to fetch.
     */
    where?: RippleSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RippleSummaries to fetch.
     */
    orderBy?: RippleSummaryOrderByWithRelationInput | RippleSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RippleSummaries.
     */
    cursor?: RippleSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RippleSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RippleSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RippleSummaries.
     */
    distinct?: RippleSummaryScalarFieldEnum | RippleSummaryScalarFieldEnum[]
  }

  /**
   * RippleSummary findFirstOrThrow
   */
  export type RippleSummaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
    /**
     * Filter, which RippleSummary to fetch.
     */
    where?: RippleSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RippleSummaries to fetch.
     */
    orderBy?: RippleSummaryOrderByWithRelationInput | RippleSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RippleSummaries.
     */
    cursor?: RippleSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RippleSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RippleSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RippleSummaries.
     */
    distinct?: RippleSummaryScalarFieldEnum | RippleSummaryScalarFieldEnum[]
  }

  /**
   * RippleSummary findMany
   */
  export type RippleSummaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
    /**
     * Filter, which RippleSummaries to fetch.
     */
    where?: RippleSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RippleSummaries to fetch.
     */
    orderBy?: RippleSummaryOrderByWithRelationInput | RippleSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RippleSummaries.
     */
    cursor?: RippleSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RippleSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RippleSummaries.
     */
    skip?: number
    distinct?: RippleSummaryScalarFieldEnum | RippleSummaryScalarFieldEnum[]
  }

  /**
   * RippleSummary create
   */
  export type RippleSummaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
    /**
     * The data needed to create a RippleSummary.
     */
    data: XOR<RippleSummaryCreateInput, RippleSummaryUncheckedCreateInput>
  }

  /**
   * RippleSummary createMany
   */
  export type RippleSummaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RippleSummaries.
     */
    data: RippleSummaryCreateManyInput | RippleSummaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RippleSummary createManyAndReturn
   */
  export type RippleSummaryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * The data used to create many RippleSummaries.
     */
    data: RippleSummaryCreateManyInput | RippleSummaryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RippleSummary update
   */
  export type RippleSummaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
    /**
     * The data needed to update a RippleSummary.
     */
    data: XOR<RippleSummaryUpdateInput, RippleSummaryUncheckedUpdateInput>
    /**
     * Choose, which RippleSummary to update.
     */
    where: RippleSummaryWhereUniqueInput
  }

  /**
   * RippleSummary updateMany
   */
  export type RippleSummaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RippleSummaries.
     */
    data: XOR<RippleSummaryUpdateManyMutationInput, RippleSummaryUncheckedUpdateManyInput>
    /**
     * Filter which RippleSummaries to update
     */
    where?: RippleSummaryWhereInput
    /**
     * Limit how many RippleSummaries to update.
     */
    limit?: number
  }

  /**
   * RippleSummary updateManyAndReturn
   */
  export type RippleSummaryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * The data used to update RippleSummaries.
     */
    data: XOR<RippleSummaryUpdateManyMutationInput, RippleSummaryUncheckedUpdateManyInput>
    /**
     * Filter which RippleSummaries to update
     */
    where?: RippleSummaryWhereInput
    /**
     * Limit how many RippleSummaries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RippleSummary upsert
   */
  export type RippleSummaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
    /**
     * The filter to search for the RippleSummary to update in case it exists.
     */
    where: RippleSummaryWhereUniqueInput
    /**
     * In case the RippleSummary found by the `where` argument doesn't exist, create a new RippleSummary with this data.
     */
    create: XOR<RippleSummaryCreateInput, RippleSummaryUncheckedCreateInput>
    /**
     * In case the RippleSummary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RippleSummaryUpdateInput, RippleSummaryUncheckedUpdateInput>
  }

  /**
   * RippleSummary delete
   */
  export type RippleSummaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
    /**
     * Filter which RippleSummary to delete.
     */
    where: RippleSummaryWhereUniqueInput
  }

  /**
   * RippleSummary deleteMany
   */
  export type RippleSummaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RippleSummaries to delete
     */
    where?: RippleSummaryWhereInput
    /**
     * Limit how many RippleSummaries to delete.
     */
    limit?: number
  }

  /**
   * RippleSummary without action
   */
  export type RippleSummaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
  }


  /**
   * Model Ripple
   */

  export type AggregateRipple = {
    _count: RippleCountAggregateOutputType | null
    _min: RippleMinAggregateOutputType | null
    _max: RippleMaxAggregateOutputType | null
  }

  export type RippleMinAggregateOutputType = {
    id: string | null
    waveId: string | null
    title: string | null
    description: string | null
    createdBy: string | null
    status: string | null
    isStarter: boolean | null
    audience_noun: string | null
    context_label: string | null
    blurb_template: string | null
    default_bucket: string | null
  }

  export type RippleMaxAggregateOutputType = {
    id: string | null
    waveId: string | null
    title: string | null
    description: string | null
    createdBy: string | null
    status: string | null
    isStarter: boolean | null
    audience_noun: string | null
    context_label: string | null
    blurb_template: string | null
    default_bucket: string | null
  }

  export type RippleCountAggregateOutputType = {
    id: number
    waveId: number
    title: number
    description: number
    createdBy: number
    status: number
    isStarter: number
    audience_noun: number
    context_label: number
    blurb_template: number
    default_bucket: number
    _all: number
  }


  export type RippleMinAggregateInputType = {
    id?: true
    waveId?: true
    title?: true
    description?: true
    createdBy?: true
    status?: true
    isStarter?: true
    audience_noun?: true
    context_label?: true
    blurb_template?: true
    default_bucket?: true
  }

  export type RippleMaxAggregateInputType = {
    id?: true
    waveId?: true
    title?: true
    description?: true
    createdBy?: true
    status?: true
    isStarter?: true
    audience_noun?: true
    context_label?: true
    blurb_template?: true
    default_bucket?: true
  }

  export type RippleCountAggregateInputType = {
    id?: true
    waveId?: true
    title?: true
    description?: true
    createdBy?: true
    status?: true
    isStarter?: true
    audience_noun?: true
    context_label?: true
    blurb_template?: true
    default_bucket?: true
    _all?: true
  }

  export type RippleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ripple to aggregate.
     */
    where?: RippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ripples to fetch.
     */
    orderBy?: RippleOrderByWithRelationInput | RippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ripples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ripples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ripples
    **/
    _count?: true | RippleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RippleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RippleMaxAggregateInputType
  }

  export type GetRippleAggregateType<T extends RippleAggregateArgs> = {
        [P in keyof T & keyof AggregateRipple]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRipple[P]>
      : GetScalarType<T[P], AggregateRipple[P]>
  }




  export type RippleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RippleWhereInput
    orderBy?: RippleOrderByWithAggregationInput | RippleOrderByWithAggregationInput[]
    by: RippleScalarFieldEnum[] | RippleScalarFieldEnum
    having?: RippleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RippleCountAggregateInputType | true
    _min?: RippleMinAggregateInputType
    _max?: RippleMaxAggregateInputType
  }

  export type RippleGroupByOutputType = {
    id: string
    waveId: string
    title: string
    description: string | null
    createdBy: string
    status: string
    isStarter: boolean
    audience_noun: string | null
    context_label: string | null
    blurb_template: string | null
    default_bucket: string | null
    _count: RippleCountAggregateOutputType | null
    _min: RippleMinAggregateOutputType | null
    _max: RippleMaxAggregateOutputType | null
  }

  type GetRippleGroupByPayload<T extends RippleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RippleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RippleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RippleGroupByOutputType[P]>
            : GetScalarType<T[P], RippleGroupByOutputType[P]>
        }
      >
    >


  export type RippleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    status?: boolean
    isStarter?: boolean
    audience_noun?: boolean
    context_label?: boolean
    blurb_template?: boolean
    default_bucket?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    microActions?: boolean | Ripple$microActionsArgs<ExtArgs>
    memberships?: boolean | Ripple$membershipsArgs<ExtArgs>
    actionLogs?: boolean | Ripple$actionLogsArgs<ExtArgs>
    rippleActivities?: boolean | Ripple$rippleActivitiesArgs<ExtArgs>
    rippleSummary?: boolean | Ripple$rippleSummaryArgs<ExtArgs>
    _count?: boolean | RippleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ripple"]>

  export type RippleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    status?: boolean
    isStarter?: boolean
    audience_noun?: boolean
    context_label?: boolean
    blurb_template?: boolean
    default_bucket?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ripple"]>

  export type RippleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    status?: boolean
    isStarter?: boolean
    audience_noun?: boolean
    context_label?: boolean
    blurb_template?: boolean
    default_bucket?: boolean
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ripple"]>

  export type RippleSelectScalar = {
    id?: boolean
    waveId?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    status?: boolean
    isStarter?: boolean
    audience_noun?: boolean
    context_label?: boolean
    blurb_template?: boolean
    default_bucket?: boolean
  }

  export type RippleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "waveId" | "title" | "description" | "createdBy" | "status" | "isStarter" | "audience_noun" | "context_label" | "blurb_template" | "default_bucket", ExtArgs["result"]["ripple"]>
  export type RippleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    microActions?: boolean | Ripple$microActionsArgs<ExtArgs>
    memberships?: boolean | Ripple$membershipsArgs<ExtArgs>
    actionLogs?: boolean | Ripple$actionLogsArgs<ExtArgs>
    rippleActivities?: boolean | Ripple$rippleActivitiesArgs<ExtArgs>
    rippleSummary?: boolean | Ripple$rippleSummaryArgs<ExtArgs>
    _count?: boolean | RippleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RippleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }
  export type RippleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }

  export type $RipplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ripple"
    objects: {
      wave: Prisma.$WavePayload<ExtArgs>
      microActions: Prisma.$MicroActionPayload<ExtArgs>[]
      memberships: Prisma.$UserRipplePayload<ExtArgs>[]
      actionLogs: Prisma.$ActionLogPayload<ExtArgs>[]
      rippleActivities: Prisma.$RippleActivityPayload<ExtArgs>[]
      rippleSummary: Prisma.$RippleSummaryPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      waveId: string
      title: string
      description: string | null
      createdBy: string
      status: string
      isStarter: boolean
      audience_noun: string | null
      context_label: string | null
      blurb_template: string | null
      default_bucket: string | null
    }, ExtArgs["result"]["ripple"]>
    composites: {}
  }

  type RippleGetPayload<S extends boolean | null | undefined | RippleDefaultArgs> = $Result.GetResult<Prisma.$RipplePayload, S>

  type RippleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RippleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RippleCountAggregateInputType | true
    }

  export interface RippleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ripple'], meta: { name: 'Ripple' } }
    /**
     * Find zero or one Ripple that matches the filter.
     * @param {RippleFindUniqueArgs} args - Arguments to find a Ripple
     * @example
     * // Get one Ripple
     * const ripple = await prisma.ripple.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RippleFindUniqueArgs>(args: SelectSubset<T, RippleFindUniqueArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ripple that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RippleFindUniqueOrThrowArgs} args - Arguments to find a Ripple
     * @example
     * // Get one Ripple
     * const ripple = await prisma.ripple.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RippleFindUniqueOrThrowArgs>(args: SelectSubset<T, RippleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ripple that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleFindFirstArgs} args - Arguments to find a Ripple
     * @example
     * // Get one Ripple
     * const ripple = await prisma.ripple.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RippleFindFirstArgs>(args?: SelectSubset<T, RippleFindFirstArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ripple that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleFindFirstOrThrowArgs} args - Arguments to find a Ripple
     * @example
     * // Get one Ripple
     * const ripple = await prisma.ripple.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RippleFindFirstOrThrowArgs>(args?: SelectSubset<T, RippleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ripples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ripples
     * const ripples = await prisma.ripple.findMany()
     * 
     * // Get first 10 Ripples
     * const ripples = await prisma.ripple.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rippleWithIdOnly = await prisma.ripple.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RippleFindManyArgs>(args?: SelectSubset<T, RippleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ripple.
     * @param {RippleCreateArgs} args - Arguments to create a Ripple.
     * @example
     * // Create one Ripple
     * const Ripple = await prisma.ripple.create({
     *   data: {
     *     // ... data to create a Ripple
     *   }
     * })
     * 
     */
    create<T extends RippleCreateArgs>(args: SelectSubset<T, RippleCreateArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ripples.
     * @param {RippleCreateManyArgs} args - Arguments to create many Ripples.
     * @example
     * // Create many Ripples
     * const ripple = await prisma.ripple.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RippleCreateManyArgs>(args?: SelectSubset<T, RippleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ripples and returns the data saved in the database.
     * @param {RippleCreateManyAndReturnArgs} args - Arguments to create many Ripples.
     * @example
     * // Create many Ripples
     * const ripple = await prisma.ripple.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ripples and only return the `id`
     * const rippleWithIdOnly = await prisma.ripple.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RippleCreateManyAndReturnArgs>(args?: SelectSubset<T, RippleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ripple.
     * @param {RippleDeleteArgs} args - Arguments to delete one Ripple.
     * @example
     * // Delete one Ripple
     * const Ripple = await prisma.ripple.delete({
     *   where: {
     *     // ... filter to delete one Ripple
     *   }
     * })
     * 
     */
    delete<T extends RippleDeleteArgs>(args: SelectSubset<T, RippleDeleteArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ripple.
     * @param {RippleUpdateArgs} args - Arguments to update one Ripple.
     * @example
     * // Update one Ripple
     * const ripple = await prisma.ripple.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RippleUpdateArgs>(args: SelectSubset<T, RippleUpdateArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ripples.
     * @param {RippleDeleteManyArgs} args - Arguments to filter Ripples to delete.
     * @example
     * // Delete a few Ripples
     * const { count } = await prisma.ripple.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RippleDeleteManyArgs>(args?: SelectSubset<T, RippleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ripples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ripples
     * const ripple = await prisma.ripple.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RippleUpdateManyArgs>(args: SelectSubset<T, RippleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ripples and returns the data updated in the database.
     * @param {RippleUpdateManyAndReturnArgs} args - Arguments to update many Ripples.
     * @example
     * // Update many Ripples
     * const ripple = await prisma.ripple.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ripples and only return the `id`
     * const rippleWithIdOnly = await prisma.ripple.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RippleUpdateManyAndReturnArgs>(args: SelectSubset<T, RippleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ripple.
     * @param {RippleUpsertArgs} args - Arguments to update or create a Ripple.
     * @example
     * // Update or create a Ripple
     * const ripple = await prisma.ripple.upsert({
     *   create: {
     *     // ... data to create a Ripple
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ripple we want to update
     *   }
     * })
     */
    upsert<T extends RippleUpsertArgs>(args: SelectSubset<T, RippleUpsertArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ripples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleCountArgs} args - Arguments to filter Ripples to count.
     * @example
     * // Count the number of Ripples
     * const count = await prisma.ripple.count({
     *   where: {
     *     // ... the filter for the Ripples we want to count
     *   }
     * })
    **/
    count<T extends RippleCountArgs>(
      args?: Subset<T, RippleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RippleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ripple.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RippleAggregateArgs>(args: Subset<T, RippleAggregateArgs>): Prisma.PrismaPromise<GetRippleAggregateType<T>>

    /**
     * Group by Ripple.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RippleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RippleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RippleGroupByArgs['orderBy'] }
        : { orderBy?: RippleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RippleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRippleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ripple model
   */
  readonly fields: RippleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ripple.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RippleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wave<T extends WaveDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WaveDefaultArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    microActions<T extends Ripple$microActionsArgs<ExtArgs> = {}>(args?: Subset<T, Ripple$microActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    memberships<T extends Ripple$membershipsArgs<ExtArgs> = {}>(args?: Subset<T, Ripple$membershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRipplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    actionLogs<T extends Ripple$actionLogsArgs<ExtArgs> = {}>(args?: Subset<T, Ripple$actionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rippleActivities<T extends Ripple$rippleActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, Ripple$rippleActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RippleActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rippleSummary<T extends Ripple$rippleSummaryArgs<ExtArgs> = {}>(args?: Subset<T, Ripple$rippleSummaryArgs<ExtArgs>>): Prisma__RippleSummaryClient<$Result.GetResult<Prisma.$RippleSummaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ripple model
   */
  interface RippleFieldRefs {
    readonly id: FieldRef<"Ripple", 'String'>
    readonly waveId: FieldRef<"Ripple", 'String'>
    readonly title: FieldRef<"Ripple", 'String'>
    readonly description: FieldRef<"Ripple", 'String'>
    readonly createdBy: FieldRef<"Ripple", 'String'>
    readonly status: FieldRef<"Ripple", 'String'>
    readonly isStarter: FieldRef<"Ripple", 'Boolean'>
    readonly audience_noun: FieldRef<"Ripple", 'String'>
    readonly context_label: FieldRef<"Ripple", 'String'>
    readonly blurb_template: FieldRef<"Ripple", 'String'>
    readonly default_bucket: FieldRef<"Ripple", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ripple findUnique
   */
  export type RippleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter, which Ripple to fetch.
     */
    where: RippleWhereUniqueInput
  }

  /**
   * Ripple findUniqueOrThrow
   */
  export type RippleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter, which Ripple to fetch.
     */
    where: RippleWhereUniqueInput
  }

  /**
   * Ripple findFirst
   */
  export type RippleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter, which Ripple to fetch.
     */
    where?: RippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ripples to fetch.
     */
    orderBy?: RippleOrderByWithRelationInput | RippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ripples.
     */
    cursor?: RippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ripples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ripples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ripples.
     */
    distinct?: RippleScalarFieldEnum | RippleScalarFieldEnum[]
  }

  /**
   * Ripple findFirstOrThrow
   */
  export type RippleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter, which Ripple to fetch.
     */
    where?: RippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ripples to fetch.
     */
    orderBy?: RippleOrderByWithRelationInput | RippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ripples.
     */
    cursor?: RippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ripples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ripples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ripples.
     */
    distinct?: RippleScalarFieldEnum | RippleScalarFieldEnum[]
  }

  /**
   * Ripple findMany
   */
  export type RippleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter, which Ripples to fetch.
     */
    where?: RippleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ripples to fetch.
     */
    orderBy?: RippleOrderByWithRelationInput | RippleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ripples.
     */
    cursor?: RippleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ripples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ripples.
     */
    skip?: number
    distinct?: RippleScalarFieldEnum | RippleScalarFieldEnum[]
  }

  /**
   * Ripple create
   */
  export type RippleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * The data needed to create a Ripple.
     */
    data: XOR<RippleCreateInput, RippleUncheckedCreateInput>
  }

  /**
   * Ripple createMany
   */
  export type RippleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ripples.
     */
    data: RippleCreateManyInput | RippleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ripple createManyAndReturn
   */
  export type RippleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * The data used to create many Ripples.
     */
    data: RippleCreateManyInput | RippleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ripple update
   */
  export type RippleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * The data needed to update a Ripple.
     */
    data: XOR<RippleUpdateInput, RippleUncheckedUpdateInput>
    /**
     * Choose, which Ripple to update.
     */
    where: RippleWhereUniqueInput
  }

  /**
   * Ripple updateMany
   */
  export type RippleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ripples.
     */
    data: XOR<RippleUpdateManyMutationInput, RippleUncheckedUpdateManyInput>
    /**
     * Filter which Ripples to update
     */
    where?: RippleWhereInput
    /**
     * Limit how many Ripples to update.
     */
    limit?: number
  }

  /**
   * Ripple updateManyAndReturn
   */
  export type RippleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * The data used to update Ripples.
     */
    data: XOR<RippleUpdateManyMutationInput, RippleUncheckedUpdateManyInput>
    /**
     * Filter which Ripples to update
     */
    where?: RippleWhereInput
    /**
     * Limit how many Ripples to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ripple upsert
   */
  export type RippleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * The filter to search for the Ripple to update in case it exists.
     */
    where: RippleWhereUniqueInput
    /**
     * In case the Ripple found by the `where` argument doesn't exist, create a new Ripple with this data.
     */
    create: XOR<RippleCreateInput, RippleUncheckedCreateInput>
    /**
     * In case the Ripple was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RippleUpdateInput, RippleUncheckedUpdateInput>
  }

  /**
   * Ripple delete
   */
  export type RippleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
    /**
     * Filter which Ripple to delete.
     */
    where: RippleWhereUniqueInput
  }

  /**
   * Ripple deleteMany
   */
  export type RippleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ripples to delete
     */
    where?: RippleWhereInput
    /**
     * Limit how many Ripples to delete.
     */
    limit?: number
  }

  /**
   * Ripple.microActions
   */
  export type Ripple$microActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    where?: MicroActionWhereInput
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    cursor?: MicroActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * Ripple.memberships
   */
  export type Ripple$membershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRipple
     */
    select?: UserRippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRipple
     */
    omit?: UserRippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRippleInclude<ExtArgs> | null
    where?: UserRippleWhereInput
    orderBy?: UserRippleOrderByWithRelationInput | UserRippleOrderByWithRelationInput[]
    cursor?: UserRippleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRippleScalarFieldEnum | UserRippleScalarFieldEnum[]
  }

  /**
   * Ripple.actionLogs
   */
  export type Ripple$actionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    where?: ActionLogWhereInput
    orderBy?: ActionLogOrderByWithRelationInput | ActionLogOrderByWithRelationInput[]
    cursor?: ActionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionLogScalarFieldEnum | ActionLogScalarFieldEnum[]
  }

  /**
   * Ripple.rippleActivities
   */
  export type Ripple$rippleActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleActivity
     */
    select?: RippleActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleActivity
     */
    omit?: RippleActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleActivityInclude<ExtArgs> | null
    where?: RippleActivityWhereInput
    orderBy?: RippleActivityOrderByWithRelationInput | RippleActivityOrderByWithRelationInput[]
    cursor?: RippleActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RippleActivityScalarFieldEnum | RippleActivityScalarFieldEnum[]
  }

  /**
   * Ripple.rippleSummary
   */
  export type Ripple$rippleSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RippleSummary
     */
    select?: RippleSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RippleSummary
     */
    omit?: RippleSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleSummaryInclude<ExtArgs> | null
    where?: RippleSummaryWhereInput
  }

  /**
   * Ripple without action
   */
  export type RippleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ripple
     */
    select?: RippleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ripple
     */
    omit?: RippleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RippleInclude<ExtArgs> | null
  }


  /**
   * Model MicroAction
   */

  export type AggregateMicroAction = {
    _count: MicroActionCountAggregateOutputType | null
    _min: MicroActionMinAggregateOutputType | null
    _max: MicroActionMaxAggregateOutputType | null
  }

  export type MicroActionMinAggregateOutputType = {
    id: string | null
    rippleId: string | null
    text: string | null
    bucket: string | null
    status: string | null
    createdBy: string | null
    waveId: string | null
    templateId: string | null
    createdAt: Date | null
  }

  export type MicroActionMaxAggregateOutputType = {
    id: string | null
    rippleId: string | null
    text: string | null
    bucket: string | null
    status: string | null
    createdBy: string | null
    waveId: string | null
    templateId: string | null
    createdAt: Date | null
  }

  export type MicroActionCountAggregateOutputType = {
    id: number
    rippleId: number
    text: number
    bucket: number
    status: number
    createdBy: number
    waveId: number
    templateId: number
    createdAt: number
    _all: number
  }


  export type MicroActionMinAggregateInputType = {
    id?: true
    rippleId?: true
    text?: true
    bucket?: true
    status?: true
    createdBy?: true
    waveId?: true
    templateId?: true
    createdAt?: true
  }

  export type MicroActionMaxAggregateInputType = {
    id?: true
    rippleId?: true
    text?: true
    bucket?: true
    status?: true
    createdBy?: true
    waveId?: true
    templateId?: true
    createdAt?: true
  }

  export type MicroActionCountAggregateInputType = {
    id?: true
    rippleId?: true
    text?: true
    bucket?: true
    status?: true
    createdBy?: true
    waveId?: true
    templateId?: true
    createdAt?: true
    _all?: true
  }

  export type MicroActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MicroAction to aggregate.
     */
    where?: MicroActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MicroActions to fetch.
     */
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MicroActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MicroActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MicroActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MicroActions
    **/
    _count?: true | MicroActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MicroActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MicroActionMaxAggregateInputType
  }

  export type GetMicroActionAggregateType<T extends MicroActionAggregateArgs> = {
        [P in keyof T & keyof AggregateMicroAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMicroAction[P]>
      : GetScalarType<T[P], AggregateMicroAction[P]>
  }




  export type MicroActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MicroActionWhereInput
    orderBy?: MicroActionOrderByWithAggregationInput | MicroActionOrderByWithAggregationInput[]
    by: MicroActionScalarFieldEnum[] | MicroActionScalarFieldEnum
    having?: MicroActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MicroActionCountAggregateInputType | true
    _min?: MicroActionMinAggregateInputType
    _max?: MicroActionMaxAggregateInputType
  }

  export type MicroActionGroupByOutputType = {
    id: string
    rippleId: string
    text: string
    bucket: string
    status: string
    createdBy: string
    waveId: string
    templateId: string | null
    createdAt: Date
    _count: MicroActionCountAggregateOutputType | null
    _min: MicroActionMinAggregateOutputType | null
    _max: MicroActionMaxAggregateOutputType | null
  }

  type GetMicroActionGroupByPayload<T extends MicroActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MicroActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MicroActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MicroActionGroupByOutputType[P]>
            : GetScalarType<T[P], MicroActionGroupByOutputType[P]>
        }
      >
    >


  export type MicroActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rippleId?: boolean
    text?: boolean
    bucket?: boolean
    status?: boolean
    createdBy?: boolean
    waveId?: boolean
    templateId?: boolean
    createdAt?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    template?: boolean | MicroAction$templateArgs<ExtArgs>
    actionLogs?: boolean | MicroAction$actionLogsArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
    _count?: boolean | MicroActionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["microAction"]>

  export type MicroActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rippleId?: boolean
    text?: boolean
    bucket?: boolean
    status?: boolean
    createdBy?: boolean
    waveId?: boolean
    templateId?: boolean
    createdAt?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    template?: boolean | MicroAction$templateArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["microAction"]>

  export type MicroActionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rippleId?: boolean
    text?: boolean
    bucket?: boolean
    status?: boolean
    createdBy?: boolean
    waveId?: boolean
    templateId?: boolean
    createdAt?: boolean
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    template?: boolean | MicroAction$templateArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["microAction"]>

  export type MicroActionSelectScalar = {
    id?: boolean
    rippleId?: boolean
    text?: boolean
    bucket?: boolean
    status?: boolean
    createdBy?: boolean
    waveId?: boolean
    templateId?: boolean
    createdAt?: boolean
  }

  export type MicroActionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "rippleId" | "text" | "bucket" | "status" | "createdBy" | "waveId" | "templateId" | "createdAt", ExtArgs["result"]["microAction"]>
  export type MicroActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    template?: boolean | MicroAction$templateArgs<ExtArgs>
    actionLogs?: boolean | MicroAction$actionLogsArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
    _count?: boolean | MicroActionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MicroActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    template?: boolean | MicroAction$templateArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
  }
  export type MicroActionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
    template?: boolean | MicroAction$templateArgs<ExtArgs>
    waveBucket?: boolean | WaveBucketDefaultArgs<ExtArgs>
  }

  export type $MicroActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MicroAction"
    objects: {
      ripple: Prisma.$RipplePayload<ExtArgs>
      wave: Prisma.$WavePayload<ExtArgs>
      template: Prisma.$TemplatePayload<ExtArgs> | null
      actionLogs: Prisma.$ActionLogPayload<ExtArgs>[]
      waveBucket: Prisma.$WaveBucketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rippleId: string
      text: string
      bucket: string
      status: string
      createdBy: string
      waveId: string
      templateId: string | null
      createdAt: Date
    }, ExtArgs["result"]["microAction"]>
    composites: {}
  }

  type MicroActionGetPayload<S extends boolean | null | undefined | MicroActionDefaultArgs> = $Result.GetResult<Prisma.$MicroActionPayload, S>

  type MicroActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MicroActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MicroActionCountAggregateInputType | true
    }

  export interface MicroActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MicroAction'], meta: { name: 'MicroAction' } }
    /**
     * Find zero or one MicroAction that matches the filter.
     * @param {MicroActionFindUniqueArgs} args - Arguments to find a MicroAction
     * @example
     * // Get one MicroAction
     * const microAction = await prisma.microAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MicroActionFindUniqueArgs>(args: SelectSubset<T, MicroActionFindUniqueArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MicroAction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MicroActionFindUniqueOrThrowArgs} args - Arguments to find a MicroAction
     * @example
     * // Get one MicroAction
     * const microAction = await prisma.microAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MicroActionFindUniqueOrThrowArgs>(args: SelectSubset<T, MicroActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MicroAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionFindFirstArgs} args - Arguments to find a MicroAction
     * @example
     * // Get one MicroAction
     * const microAction = await prisma.microAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MicroActionFindFirstArgs>(args?: SelectSubset<T, MicroActionFindFirstArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MicroAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionFindFirstOrThrowArgs} args - Arguments to find a MicroAction
     * @example
     * // Get one MicroAction
     * const microAction = await prisma.microAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MicroActionFindFirstOrThrowArgs>(args?: SelectSubset<T, MicroActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MicroActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MicroActions
     * const microActions = await prisma.microAction.findMany()
     * 
     * // Get first 10 MicroActions
     * const microActions = await prisma.microAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const microActionWithIdOnly = await prisma.microAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MicroActionFindManyArgs>(args?: SelectSubset<T, MicroActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MicroAction.
     * @param {MicroActionCreateArgs} args - Arguments to create a MicroAction.
     * @example
     * // Create one MicroAction
     * const MicroAction = await prisma.microAction.create({
     *   data: {
     *     // ... data to create a MicroAction
     *   }
     * })
     * 
     */
    create<T extends MicroActionCreateArgs>(args: SelectSubset<T, MicroActionCreateArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MicroActions.
     * @param {MicroActionCreateManyArgs} args - Arguments to create many MicroActions.
     * @example
     * // Create many MicroActions
     * const microAction = await prisma.microAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MicroActionCreateManyArgs>(args?: SelectSubset<T, MicroActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MicroActions and returns the data saved in the database.
     * @param {MicroActionCreateManyAndReturnArgs} args - Arguments to create many MicroActions.
     * @example
     * // Create many MicroActions
     * const microAction = await prisma.microAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MicroActions and only return the `id`
     * const microActionWithIdOnly = await prisma.microAction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MicroActionCreateManyAndReturnArgs>(args?: SelectSubset<T, MicroActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MicroAction.
     * @param {MicroActionDeleteArgs} args - Arguments to delete one MicroAction.
     * @example
     * // Delete one MicroAction
     * const MicroAction = await prisma.microAction.delete({
     *   where: {
     *     // ... filter to delete one MicroAction
     *   }
     * })
     * 
     */
    delete<T extends MicroActionDeleteArgs>(args: SelectSubset<T, MicroActionDeleteArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MicroAction.
     * @param {MicroActionUpdateArgs} args - Arguments to update one MicroAction.
     * @example
     * // Update one MicroAction
     * const microAction = await prisma.microAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MicroActionUpdateArgs>(args: SelectSubset<T, MicroActionUpdateArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MicroActions.
     * @param {MicroActionDeleteManyArgs} args - Arguments to filter MicroActions to delete.
     * @example
     * // Delete a few MicroActions
     * const { count } = await prisma.microAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MicroActionDeleteManyArgs>(args?: SelectSubset<T, MicroActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MicroActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MicroActions
     * const microAction = await prisma.microAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MicroActionUpdateManyArgs>(args: SelectSubset<T, MicroActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MicroActions and returns the data updated in the database.
     * @param {MicroActionUpdateManyAndReturnArgs} args - Arguments to update many MicroActions.
     * @example
     * // Update many MicroActions
     * const microAction = await prisma.microAction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MicroActions and only return the `id`
     * const microActionWithIdOnly = await prisma.microAction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MicroActionUpdateManyAndReturnArgs>(args: SelectSubset<T, MicroActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MicroAction.
     * @param {MicroActionUpsertArgs} args - Arguments to update or create a MicroAction.
     * @example
     * // Update or create a MicroAction
     * const microAction = await prisma.microAction.upsert({
     *   create: {
     *     // ... data to create a MicroAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MicroAction we want to update
     *   }
     * })
     */
    upsert<T extends MicroActionUpsertArgs>(args: SelectSubset<T, MicroActionUpsertArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MicroActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionCountArgs} args - Arguments to filter MicroActions to count.
     * @example
     * // Count the number of MicroActions
     * const count = await prisma.microAction.count({
     *   where: {
     *     // ... the filter for the MicroActions we want to count
     *   }
     * })
    **/
    count<T extends MicroActionCountArgs>(
      args?: Subset<T, MicroActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MicroActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MicroAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MicroActionAggregateArgs>(args: Subset<T, MicroActionAggregateArgs>): Prisma.PrismaPromise<GetMicroActionAggregateType<T>>

    /**
     * Group by MicroAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicroActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MicroActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MicroActionGroupByArgs['orderBy'] }
        : { orderBy?: MicroActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MicroActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMicroActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MicroAction model
   */
  readonly fields: MicroActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MicroAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MicroActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ripple<T extends RippleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RippleDefaultArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    wave<T extends WaveDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WaveDefaultArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    template<T extends MicroAction$templateArgs<ExtArgs> = {}>(args?: Subset<T, MicroAction$templateArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    actionLogs<T extends MicroAction$actionLogsArgs<ExtArgs> = {}>(args?: Subset<T, MicroAction$actionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    waveBucket<T extends WaveBucketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WaveBucketDefaultArgs<ExtArgs>>): Prisma__WaveBucketClient<$Result.GetResult<Prisma.$WaveBucketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MicroAction model
   */
  interface MicroActionFieldRefs {
    readonly id: FieldRef<"MicroAction", 'String'>
    readonly rippleId: FieldRef<"MicroAction", 'String'>
    readonly text: FieldRef<"MicroAction", 'String'>
    readonly bucket: FieldRef<"MicroAction", 'String'>
    readonly status: FieldRef<"MicroAction", 'String'>
    readonly createdBy: FieldRef<"MicroAction", 'String'>
    readonly waveId: FieldRef<"MicroAction", 'String'>
    readonly templateId: FieldRef<"MicroAction", 'String'>
    readonly createdAt: FieldRef<"MicroAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MicroAction findUnique
   */
  export type MicroActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter, which MicroAction to fetch.
     */
    where: MicroActionWhereUniqueInput
  }

  /**
   * MicroAction findUniqueOrThrow
   */
  export type MicroActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter, which MicroAction to fetch.
     */
    where: MicroActionWhereUniqueInput
  }

  /**
   * MicroAction findFirst
   */
  export type MicroActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter, which MicroAction to fetch.
     */
    where?: MicroActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MicroActions to fetch.
     */
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MicroActions.
     */
    cursor?: MicroActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MicroActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MicroActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MicroActions.
     */
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * MicroAction findFirstOrThrow
   */
  export type MicroActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter, which MicroAction to fetch.
     */
    where?: MicroActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MicroActions to fetch.
     */
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MicroActions.
     */
    cursor?: MicroActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MicroActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MicroActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MicroActions.
     */
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * MicroAction findMany
   */
  export type MicroActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter, which MicroActions to fetch.
     */
    where?: MicroActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MicroActions to fetch.
     */
    orderBy?: MicroActionOrderByWithRelationInput | MicroActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MicroActions.
     */
    cursor?: MicroActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MicroActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MicroActions.
     */
    skip?: number
    distinct?: MicroActionScalarFieldEnum | MicroActionScalarFieldEnum[]
  }

  /**
   * MicroAction create
   */
  export type MicroActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * The data needed to create a MicroAction.
     */
    data: XOR<MicroActionCreateInput, MicroActionUncheckedCreateInput>
  }

  /**
   * MicroAction createMany
   */
  export type MicroActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MicroActions.
     */
    data: MicroActionCreateManyInput | MicroActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MicroAction createManyAndReturn
   */
  export type MicroActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * The data used to create many MicroActions.
     */
    data: MicroActionCreateManyInput | MicroActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MicroAction update
   */
  export type MicroActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * The data needed to update a MicroAction.
     */
    data: XOR<MicroActionUpdateInput, MicroActionUncheckedUpdateInput>
    /**
     * Choose, which MicroAction to update.
     */
    where: MicroActionWhereUniqueInput
  }

  /**
   * MicroAction updateMany
   */
  export type MicroActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MicroActions.
     */
    data: XOR<MicroActionUpdateManyMutationInput, MicroActionUncheckedUpdateManyInput>
    /**
     * Filter which MicroActions to update
     */
    where?: MicroActionWhereInput
    /**
     * Limit how many MicroActions to update.
     */
    limit?: number
  }

  /**
   * MicroAction updateManyAndReturn
   */
  export type MicroActionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * The data used to update MicroActions.
     */
    data: XOR<MicroActionUpdateManyMutationInput, MicroActionUncheckedUpdateManyInput>
    /**
     * Filter which MicroActions to update
     */
    where?: MicroActionWhereInput
    /**
     * Limit how many MicroActions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MicroAction upsert
   */
  export type MicroActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * The filter to search for the MicroAction to update in case it exists.
     */
    where: MicroActionWhereUniqueInput
    /**
     * In case the MicroAction found by the `where` argument doesn't exist, create a new MicroAction with this data.
     */
    create: XOR<MicroActionCreateInput, MicroActionUncheckedCreateInput>
    /**
     * In case the MicroAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MicroActionUpdateInput, MicroActionUncheckedUpdateInput>
  }

  /**
   * MicroAction delete
   */
  export type MicroActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
    /**
     * Filter which MicroAction to delete.
     */
    where: MicroActionWhereUniqueInput
  }

  /**
   * MicroAction deleteMany
   */
  export type MicroActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MicroActions to delete
     */
    where?: MicroActionWhereInput
    /**
     * Limit how many MicroActions to delete.
     */
    limit?: number
  }

  /**
   * MicroAction.template
   */
  export type MicroAction$templateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Template
     */
    omit?: TemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    where?: TemplateWhereInput
  }

  /**
   * MicroAction.actionLogs
   */
  export type MicroAction$actionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    where?: ActionLogWhereInput
    orderBy?: ActionLogOrderByWithRelationInput | ActionLogOrderByWithRelationInput[]
    cursor?: ActionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionLogScalarFieldEnum | ActionLogScalarFieldEnum[]
  }

  /**
   * MicroAction without action
   */
  export type MicroActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicroAction
     */
    select?: MicroActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MicroAction
     */
    omit?: MicroActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MicroActionInclude<ExtArgs> | null
  }


  /**
   * Model ActionLog
   */

  export type AggregateActionLog = {
    _count: ActionLogCountAggregateOutputType | null
    _min: ActionLogMinAggregateOutputType | null
    _max: ActionLogMaxAggregateOutputType | null
  }

  export type ActionLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    microActionId: string | null
    rippleId: string | null
    waveId: string | null
    bucket: string | null
    createdAt: Date | null
    city: string | null
    noteText: string | null
    shareAnon: boolean | null
  }

  export type ActionLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    microActionId: string | null
    rippleId: string | null
    waveId: string | null
    bucket: string | null
    createdAt: Date | null
    city: string | null
    noteText: string | null
    shareAnon: boolean | null
  }

  export type ActionLogCountAggregateOutputType = {
    id: number
    userId: number
    microActionId: number
    rippleId: number
    waveId: number
    bucket: number
    createdAt: number
    city: number
    noteText: number
    shareAnon: number
    _all: number
  }


  export type ActionLogMinAggregateInputType = {
    id?: true
    userId?: true
    microActionId?: true
    rippleId?: true
    waveId?: true
    bucket?: true
    createdAt?: true
    city?: true
    noteText?: true
    shareAnon?: true
  }

  export type ActionLogMaxAggregateInputType = {
    id?: true
    userId?: true
    microActionId?: true
    rippleId?: true
    waveId?: true
    bucket?: true
    createdAt?: true
    city?: true
    noteText?: true
    shareAnon?: true
  }

  export type ActionLogCountAggregateInputType = {
    id?: true
    userId?: true
    microActionId?: true
    rippleId?: true
    waveId?: true
    bucket?: true
    createdAt?: true
    city?: true
    noteText?: true
    shareAnon?: true
    _all?: true
  }

  export type ActionLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionLog to aggregate.
     */
    where?: ActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionLogs to fetch.
     */
    orderBy?: ActionLogOrderByWithRelationInput | ActionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActionLogs
    **/
    _count?: true | ActionLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActionLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActionLogMaxAggregateInputType
  }

  export type GetActionLogAggregateType<T extends ActionLogAggregateArgs> = {
        [P in keyof T & keyof AggregateActionLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActionLog[P]>
      : GetScalarType<T[P], AggregateActionLog[P]>
  }




  export type ActionLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionLogWhereInput
    orderBy?: ActionLogOrderByWithAggregationInput | ActionLogOrderByWithAggregationInput[]
    by: ActionLogScalarFieldEnum[] | ActionLogScalarFieldEnum
    having?: ActionLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActionLogCountAggregateInputType | true
    _min?: ActionLogMinAggregateInputType
    _max?: ActionLogMaxAggregateInputType
  }

  export type ActionLogGroupByOutputType = {
    id: string
    userId: string
    microActionId: string
    rippleId: string
    waveId: string
    bucket: string
    createdAt: Date
    city: string | null
    noteText: string | null
    shareAnon: boolean
    _count: ActionLogCountAggregateOutputType | null
    _min: ActionLogMinAggregateOutputType | null
    _max: ActionLogMaxAggregateOutputType | null
  }

  type GetActionLogGroupByPayload<T extends ActionLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActionLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActionLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActionLogGroupByOutputType[P]>
            : GetScalarType<T[P], ActionLogGroupByOutputType[P]>
        }
      >
    >


  export type ActionLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    microActionId?: boolean
    rippleId?: boolean
    waveId?: boolean
    bucket?: boolean
    createdAt?: boolean
    city?: boolean
    noteText?: boolean
    shareAnon?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    micro?: boolean | MicroActionDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionLog"]>

  export type ActionLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    microActionId?: boolean
    rippleId?: boolean
    waveId?: boolean
    bucket?: boolean
    createdAt?: boolean
    city?: boolean
    noteText?: boolean
    shareAnon?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    micro?: boolean | MicroActionDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionLog"]>

  export type ActionLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    microActionId?: boolean
    rippleId?: boolean
    waveId?: boolean
    bucket?: boolean
    createdAt?: boolean
    city?: boolean
    noteText?: boolean
    shareAnon?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    micro?: boolean | MicroActionDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionLog"]>

  export type ActionLogSelectScalar = {
    id?: boolean
    userId?: boolean
    microActionId?: boolean
    rippleId?: boolean
    waveId?: boolean
    bucket?: boolean
    createdAt?: boolean
    city?: boolean
    noteText?: boolean
    shareAnon?: boolean
  }

  export type ActionLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "microActionId" | "rippleId" | "waveId" | "bucket" | "createdAt" | "city" | "noteText" | "shareAnon", ExtArgs["result"]["actionLog"]>
  export type ActionLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    micro?: boolean | MicroActionDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }
  export type ActionLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    micro?: boolean | MicroActionDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }
  export type ActionLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    micro?: boolean | MicroActionDefaultArgs<ExtArgs>
    ripple?: boolean | RippleDefaultArgs<ExtArgs>
    wave?: boolean | WaveDefaultArgs<ExtArgs>
  }

  export type $ActionLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActionLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      micro: Prisma.$MicroActionPayload<ExtArgs>
      ripple: Prisma.$RipplePayload<ExtArgs>
      wave: Prisma.$WavePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      microActionId: string
      rippleId: string
      waveId: string
      bucket: string
      createdAt: Date
      city: string | null
      noteText: string | null
      shareAnon: boolean
    }, ExtArgs["result"]["actionLog"]>
    composites: {}
  }

  type ActionLogGetPayload<S extends boolean | null | undefined | ActionLogDefaultArgs> = $Result.GetResult<Prisma.$ActionLogPayload, S>

  type ActionLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActionLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActionLogCountAggregateInputType | true
    }

  export interface ActionLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActionLog'], meta: { name: 'ActionLog' } }
    /**
     * Find zero or one ActionLog that matches the filter.
     * @param {ActionLogFindUniqueArgs} args - Arguments to find a ActionLog
     * @example
     * // Get one ActionLog
     * const actionLog = await prisma.actionLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActionLogFindUniqueArgs>(args: SelectSubset<T, ActionLogFindUniqueArgs<ExtArgs>>): Prisma__ActionLogClient<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActionLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActionLogFindUniqueOrThrowArgs} args - Arguments to find a ActionLog
     * @example
     * // Get one ActionLog
     * const actionLog = await prisma.actionLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActionLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ActionLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActionLogClient<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActionLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogFindFirstArgs} args - Arguments to find a ActionLog
     * @example
     * // Get one ActionLog
     * const actionLog = await prisma.actionLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActionLogFindFirstArgs>(args?: SelectSubset<T, ActionLogFindFirstArgs<ExtArgs>>): Prisma__ActionLogClient<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActionLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogFindFirstOrThrowArgs} args - Arguments to find a ActionLog
     * @example
     * // Get one ActionLog
     * const actionLog = await prisma.actionLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActionLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ActionLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActionLogClient<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActionLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActionLogs
     * const actionLogs = await prisma.actionLog.findMany()
     * 
     * // Get first 10 ActionLogs
     * const actionLogs = await prisma.actionLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actionLogWithIdOnly = await prisma.actionLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActionLogFindManyArgs>(args?: SelectSubset<T, ActionLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActionLog.
     * @param {ActionLogCreateArgs} args - Arguments to create a ActionLog.
     * @example
     * // Create one ActionLog
     * const ActionLog = await prisma.actionLog.create({
     *   data: {
     *     // ... data to create a ActionLog
     *   }
     * })
     * 
     */
    create<T extends ActionLogCreateArgs>(args: SelectSubset<T, ActionLogCreateArgs<ExtArgs>>): Prisma__ActionLogClient<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActionLogs.
     * @param {ActionLogCreateManyArgs} args - Arguments to create many ActionLogs.
     * @example
     * // Create many ActionLogs
     * const actionLog = await prisma.actionLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActionLogCreateManyArgs>(args?: SelectSubset<T, ActionLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActionLogs and returns the data saved in the database.
     * @param {ActionLogCreateManyAndReturnArgs} args - Arguments to create many ActionLogs.
     * @example
     * // Create many ActionLogs
     * const actionLog = await prisma.actionLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActionLogs and only return the `id`
     * const actionLogWithIdOnly = await prisma.actionLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActionLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ActionLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActionLog.
     * @param {ActionLogDeleteArgs} args - Arguments to delete one ActionLog.
     * @example
     * // Delete one ActionLog
     * const ActionLog = await prisma.actionLog.delete({
     *   where: {
     *     // ... filter to delete one ActionLog
     *   }
     * })
     * 
     */
    delete<T extends ActionLogDeleteArgs>(args: SelectSubset<T, ActionLogDeleteArgs<ExtArgs>>): Prisma__ActionLogClient<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActionLog.
     * @param {ActionLogUpdateArgs} args - Arguments to update one ActionLog.
     * @example
     * // Update one ActionLog
     * const actionLog = await prisma.actionLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActionLogUpdateArgs>(args: SelectSubset<T, ActionLogUpdateArgs<ExtArgs>>): Prisma__ActionLogClient<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActionLogs.
     * @param {ActionLogDeleteManyArgs} args - Arguments to filter ActionLogs to delete.
     * @example
     * // Delete a few ActionLogs
     * const { count } = await prisma.actionLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActionLogDeleteManyArgs>(args?: SelectSubset<T, ActionLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActionLogs
     * const actionLog = await prisma.actionLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActionLogUpdateManyArgs>(args: SelectSubset<T, ActionLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActionLogs and returns the data updated in the database.
     * @param {ActionLogUpdateManyAndReturnArgs} args - Arguments to update many ActionLogs.
     * @example
     * // Update many ActionLogs
     * const actionLog = await prisma.actionLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActionLogs and only return the `id`
     * const actionLogWithIdOnly = await prisma.actionLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActionLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ActionLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActionLog.
     * @param {ActionLogUpsertArgs} args - Arguments to update or create a ActionLog.
     * @example
     * // Update or create a ActionLog
     * const actionLog = await prisma.actionLog.upsert({
     *   create: {
     *     // ... data to create a ActionLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActionLog we want to update
     *   }
     * })
     */
    upsert<T extends ActionLogUpsertArgs>(args: SelectSubset<T, ActionLogUpsertArgs<ExtArgs>>): Prisma__ActionLogClient<$Result.GetResult<Prisma.$ActionLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogCountArgs} args - Arguments to filter ActionLogs to count.
     * @example
     * // Count the number of ActionLogs
     * const count = await prisma.actionLog.count({
     *   where: {
     *     // ... the filter for the ActionLogs we want to count
     *   }
     * })
    **/
    count<T extends ActionLogCountArgs>(
      args?: Subset<T, ActionLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActionLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActionLogAggregateArgs>(args: Subset<T, ActionLogAggregateArgs>): Prisma.PrismaPromise<GetActionLogAggregateType<T>>

    /**
     * Group by ActionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActionLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActionLogGroupByArgs['orderBy'] }
        : { orderBy?: ActionLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActionLog model
   */
  readonly fields: ActionLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActionLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActionLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    micro<T extends MicroActionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MicroActionDefaultArgs<ExtArgs>>): Prisma__MicroActionClient<$Result.GetResult<Prisma.$MicroActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ripple<T extends RippleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RippleDefaultArgs<ExtArgs>>): Prisma__RippleClient<$Result.GetResult<Prisma.$RipplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    wave<T extends WaveDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WaveDefaultArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActionLog model
   */
  interface ActionLogFieldRefs {
    readonly id: FieldRef<"ActionLog", 'String'>
    readonly userId: FieldRef<"ActionLog", 'String'>
    readonly microActionId: FieldRef<"ActionLog", 'String'>
    readonly rippleId: FieldRef<"ActionLog", 'String'>
    readonly waveId: FieldRef<"ActionLog", 'String'>
    readonly bucket: FieldRef<"ActionLog", 'String'>
    readonly createdAt: FieldRef<"ActionLog", 'DateTime'>
    readonly city: FieldRef<"ActionLog", 'String'>
    readonly noteText: FieldRef<"ActionLog", 'String'>
    readonly shareAnon: FieldRef<"ActionLog", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ActionLog findUnique
   */
  export type ActionLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter, which ActionLog to fetch.
     */
    where: ActionLogWhereUniqueInput
  }

  /**
   * ActionLog findUniqueOrThrow
   */
  export type ActionLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter, which ActionLog to fetch.
     */
    where: ActionLogWhereUniqueInput
  }

  /**
   * ActionLog findFirst
   */
  export type ActionLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter, which ActionLog to fetch.
     */
    where?: ActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionLogs to fetch.
     */
    orderBy?: ActionLogOrderByWithRelationInput | ActionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionLogs.
     */
    cursor?: ActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionLogs.
     */
    distinct?: ActionLogScalarFieldEnum | ActionLogScalarFieldEnum[]
  }

  /**
   * ActionLog findFirstOrThrow
   */
  export type ActionLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter, which ActionLog to fetch.
     */
    where?: ActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionLogs to fetch.
     */
    orderBy?: ActionLogOrderByWithRelationInput | ActionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionLogs.
     */
    cursor?: ActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionLogs.
     */
    distinct?: ActionLogScalarFieldEnum | ActionLogScalarFieldEnum[]
  }

  /**
   * ActionLog findMany
   */
  export type ActionLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter, which ActionLogs to fetch.
     */
    where?: ActionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionLogs to fetch.
     */
    orderBy?: ActionLogOrderByWithRelationInput | ActionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActionLogs.
     */
    cursor?: ActionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionLogs.
     */
    skip?: number
    distinct?: ActionLogScalarFieldEnum | ActionLogScalarFieldEnum[]
  }

  /**
   * ActionLog create
   */
  export type ActionLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ActionLog.
     */
    data: XOR<ActionLogCreateInput, ActionLogUncheckedCreateInput>
  }

  /**
   * ActionLog createMany
   */
  export type ActionLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActionLogs.
     */
    data: ActionLogCreateManyInput | ActionLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActionLog createManyAndReturn
   */
  export type ActionLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * The data used to create many ActionLogs.
     */
    data: ActionLogCreateManyInput | ActionLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActionLog update
   */
  export type ActionLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ActionLog.
     */
    data: XOR<ActionLogUpdateInput, ActionLogUncheckedUpdateInput>
    /**
     * Choose, which ActionLog to update.
     */
    where: ActionLogWhereUniqueInput
  }

  /**
   * ActionLog updateMany
   */
  export type ActionLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActionLogs.
     */
    data: XOR<ActionLogUpdateManyMutationInput, ActionLogUncheckedUpdateManyInput>
    /**
     * Filter which ActionLogs to update
     */
    where?: ActionLogWhereInput
    /**
     * Limit how many ActionLogs to update.
     */
    limit?: number
  }

  /**
   * ActionLog updateManyAndReturn
   */
  export type ActionLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * The data used to update ActionLogs.
     */
    data: XOR<ActionLogUpdateManyMutationInput, ActionLogUncheckedUpdateManyInput>
    /**
     * Filter which ActionLogs to update
     */
    where?: ActionLogWhereInput
    /**
     * Limit how many ActionLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActionLog upsert
   */
  export type ActionLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ActionLog to update in case it exists.
     */
    where: ActionLogWhereUniqueInput
    /**
     * In case the ActionLog found by the `where` argument doesn't exist, create a new ActionLog with this data.
     */
    create: XOR<ActionLogCreateInput, ActionLogUncheckedCreateInput>
    /**
     * In case the ActionLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActionLogUpdateInput, ActionLogUncheckedUpdateInput>
  }

  /**
   * ActionLog delete
   */
  export type ActionLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
    /**
     * Filter which ActionLog to delete.
     */
    where: ActionLogWhereUniqueInput
  }

  /**
   * ActionLog deleteMany
   */
  export type ActionLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionLogs to delete
     */
    where?: ActionLogWhereInput
    /**
     * Limit how many ActionLogs to delete.
     */
    limit?: number
  }

  /**
   * ActionLog without action
   */
  export type ActionLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionLog
     */
    select?: ActionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionLog
     */
    omit?: ActionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionLogInclude<ExtArgs> | null
  }


  /**
   * Model PhraseMap
   */

  export type AggregatePhraseMap = {
    _count: PhraseMapCountAggregateOutputType | null
    _avg: PhraseMapAvgAggregateOutputType | null
    _sum: PhraseMapSumAggregateOutputType | null
    _min: PhraseMapMinAggregateOutputType | null
    _max: PhraseMapMaxAggregateOutputType | null
  }

  export type PhraseMapAvgAggregateOutputType = {
    priority: number | null
  }

  export type PhraseMapSumAggregateOutputType = {
    priority: number | null
  }

  export type PhraseMapMinAggregateOutputType = {
    id: string | null
    waveId: string | null
    bucket: string | null
    phrase: string | null
    isActive: boolean | null
    priority: number | null
  }

  export type PhraseMapMaxAggregateOutputType = {
    id: string | null
    waveId: string | null
    bucket: string | null
    phrase: string | null
    isActive: boolean | null
    priority: number | null
  }

  export type PhraseMapCountAggregateOutputType = {
    id: number
    waveId: number
    bucket: number
    phrase: number
    isActive: number
    priority: number
    _all: number
  }


  export type PhraseMapAvgAggregateInputType = {
    priority?: true
  }

  export type PhraseMapSumAggregateInputType = {
    priority?: true
  }

  export type PhraseMapMinAggregateInputType = {
    id?: true
    waveId?: true
    bucket?: true
    phrase?: true
    isActive?: true
    priority?: true
  }

  export type PhraseMapMaxAggregateInputType = {
    id?: true
    waveId?: true
    bucket?: true
    phrase?: true
    isActive?: true
    priority?: true
  }

  export type PhraseMapCountAggregateInputType = {
    id?: true
    waveId?: true
    bucket?: true
    phrase?: true
    isActive?: true
    priority?: true
    _all?: true
  }

  export type PhraseMapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhraseMap to aggregate.
     */
    where?: PhraseMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhraseMaps to fetch.
     */
    orderBy?: PhraseMapOrderByWithRelationInput | PhraseMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhraseMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhraseMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhraseMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PhraseMaps
    **/
    _count?: true | PhraseMapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhraseMapAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhraseMapSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhraseMapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhraseMapMaxAggregateInputType
  }

  export type GetPhraseMapAggregateType<T extends PhraseMapAggregateArgs> = {
        [P in keyof T & keyof AggregatePhraseMap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhraseMap[P]>
      : GetScalarType<T[P], AggregatePhraseMap[P]>
  }




  export type PhraseMapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhraseMapWhereInput
    orderBy?: PhraseMapOrderByWithAggregationInput | PhraseMapOrderByWithAggregationInput[]
    by: PhraseMapScalarFieldEnum[] | PhraseMapScalarFieldEnum
    having?: PhraseMapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhraseMapCountAggregateInputType | true
    _avg?: PhraseMapAvgAggregateInputType
    _sum?: PhraseMapSumAggregateInputType
    _min?: PhraseMapMinAggregateInputType
    _max?: PhraseMapMaxAggregateInputType
  }

  export type PhraseMapGroupByOutputType = {
    id: string
    waveId: string | null
    bucket: string
    phrase: string
    isActive: boolean
    priority: number
    _count: PhraseMapCountAggregateOutputType | null
    _avg: PhraseMapAvgAggregateOutputType | null
    _sum: PhraseMapSumAggregateOutputType | null
    _min: PhraseMapMinAggregateOutputType | null
    _max: PhraseMapMaxAggregateOutputType | null
  }

  type GetPhraseMapGroupByPayload<T extends PhraseMapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhraseMapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhraseMapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhraseMapGroupByOutputType[P]>
            : GetScalarType<T[P], PhraseMapGroupByOutputType[P]>
        }
      >
    >


  export type PhraseMapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    bucket?: boolean
    phrase?: boolean
    isActive?: boolean
    priority?: boolean
    wave?: boolean | PhraseMap$waveArgs<ExtArgs>
  }, ExtArgs["result"]["phraseMap"]>

  export type PhraseMapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    bucket?: boolean
    phrase?: boolean
    isActive?: boolean
    priority?: boolean
    wave?: boolean | PhraseMap$waveArgs<ExtArgs>
  }, ExtArgs["result"]["phraseMap"]>

  export type PhraseMapSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    waveId?: boolean
    bucket?: boolean
    phrase?: boolean
    isActive?: boolean
    priority?: boolean
    wave?: boolean | PhraseMap$waveArgs<ExtArgs>
  }, ExtArgs["result"]["phraseMap"]>

  export type PhraseMapSelectScalar = {
    id?: boolean
    waveId?: boolean
    bucket?: boolean
    phrase?: boolean
    isActive?: boolean
    priority?: boolean
  }

  export type PhraseMapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "waveId" | "bucket" | "phrase" | "isActive" | "priority", ExtArgs["result"]["phraseMap"]>
  export type PhraseMapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | PhraseMap$waveArgs<ExtArgs>
  }
  export type PhraseMapIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | PhraseMap$waveArgs<ExtArgs>
  }
  export type PhraseMapIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wave?: boolean | PhraseMap$waveArgs<ExtArgs>
  }

  export type $PhraseMapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PhraseMap"
    objects: {
      wave: Prisma.$WavePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      waveId: string | null
      bucket: string
      phrase: string
      isActive: boolean
      priority: number
    }, ExtArgs["result"]["phraseMap"]>
    composites: {}
  }

  type PhraseMapGetPayload<S extends boolean | null | undefined | PhraseMapDefaultArgs> = $Result.GetResult<Prisma.$PhraseMapPayload, S>

  type PhraseMapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PhraseMapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PhraseMapCountAggregateInputType | true
    }

  export interface PhraseMapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PhraseMap'], meta: { name: 'PhraseMap' } }
    /**
     * Find zero or one PhraseMap that matches the filter.
     * @param {PhraseMapFindUniqueArgs} args - Arguments to find a PhraseMap
     * @example
     * // Get one PhraseMap
     * const phraseMap = await prisma.phraseMap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PhraseMapFindUniqueArgs>(args: SelectSubset<T, PhraseMapFindUniqueArgs<ExtArgs>>): Prisma__PhraseMapClient<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PhraseMap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PhraseMapFindUniqueOrThrowArgs} args - Arguments to find a PhraseMap
     * @example
     * // Get one PhraseMap
     * const phraseMap = await prisma.phraseMap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PhraseMapFindUniqueOrThrowArgs>(args: SelectSubset<T, PhraseMapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PhraseMapClient<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PhraseMap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseMapFindFirstArgs} args - Arguments to find a PhraseMap
     * @example
     * // Get one PhraseMap
     * const phraseMap = await prisma.phraseMap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PhraseMapFindFirstArgs>(args?: SelectSubset<T, PhraseMapFindFirstArgs<ExtArgs>>): Prisma__PhraseMapClient<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PhraseMap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseMapFindFirstOrThrowArgs} args - Arguments to find a PhraseMap
     * @example
     * // Get one PhraseMap
     * const phraseMap = await prisma.phraseMap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PhraseMapFindFirstOrThrowArgs>(args?: SelectSubset<T, PhraseMapFindFirstOrThrowArgs<ExtArgs>>): Prisma__PhraseMapClient<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PhraseMaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseMapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PhraseMaps
     * const phraseMaps = await prisma.phraseMap.findMany()
     * 
     * // Get first 10 PhraseMaps
     * const phraseMaps = await prisma.phraseMap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const phraseMapWithIdOnly = await prisma.phraseMap.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PhraseMapFindManyArgs>(args?: SelectSubset<T, PhraseMapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PhraseMap.
     * @param {PhraseMapCreateArgs} args - Arguments to create a PhraseMap.
     * @example
     * // Create one PhraseMap
     * const PhraseMap = await prisma.phraseMap.create({
     *   data: {
     *     // ... data to create a PhraseMap
     *   }
     * })
     * 
     */
    create<T extends PhraseMapCreateArgs>(args: SelectSubset<T, PhraseMapCreateArgs<ExtArgs>>): Prisma__PhraseMapClient<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PhraseMaps.
     * @param {PhraseMapCreateManyArgs} args - Arguments to create many PhraseMaps.
     * @example
     * // Create many PhraseMaps
     * const phraseMap = await prisma.phraseMap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PhraseMapCreateManyArgs>(args?: SelectSubset<T, PhraseMapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PhraseMaps and returns the data saved in the database.
     * @param {PhraseMapCreateManyAndReturnArgs} args - Arguments to create many PhraseMaps.
     * @example
     * // Create many PhraseMaps
     * const phraseMap = await prisma.phraseMap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PhraseMaps and only return the `id`
     * const phraseMapWithIdOnly = await prisma.phraseMap.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PhraseMapCreateManyAndReturnArgs>(args?: SelectSubset<T, PhraseMapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PhraseMap.
     * @param {PhraseMapDeleteArgs} args - Arguments to delete one PhraseMap.
     * @example
     * // Delete one PhraseMap
     * const PhraseMap = await prisma.phraseMap.delete({
     *   where: {
     *     // ... filter to delete one PhraseMap
     *   }
     * })
     * 
     */
    delete<T extends PhraseMapDeleteArgs>(args: SelectSubset<T, PhraseMapDeleteArgs<ExtArgs>>): Prisma__PhraseMapClient<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PhraseMap.
     * @param {PhraseMapUpdateArgs} args - Arguments to update one PhraseMap.
     * @example
     * // Update one PhraseMap
     * const phraseMap = await prisma.phraseMap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PhraseMapUpdateArgs>(args: SelectSubset<T, PhraseMapUpdateArgs<ExtArgs>>): Prisma__PhraseMapClient<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PhraseMaps.
     * @param {PhraseMapDeleteManyArgs} args - Arguments to filter PhraseMaps to delete.
     * @example
     * // Delete a few PhraseMaps
     * const { count } = await prisma.phraseMap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PhraseMapDeleteManyArgs>(args?: SelectSubset<T, PhraseMapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PhraseMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseMapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PhraseMaps
     * const phraseMap = await prisma.phraseMap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PhraseMapUpdateManyArgs>(args: SelectSubset<T, PhraseMapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PhraseMaps and returns the data updated in the database.
     * @param {PhraseMapUpdateManyAndReturnArgs} args - Arguments to update many PhraseMaps.
     * @example
     * // Update many PhraseMaps
     * const phraseMap = await prisma.phraseMap.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PhraseMaps and only return the `id`
     * const phraseMapWithIdOnly = await prisma.phraseMap.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PhraseMapUpdateManyAndReturnArgs>(args: SelectSubset<T, PhraseMapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PhraseMap.
     * @param {PhraseMapUpsertArgs} args - Arguments to update or create a PhraseMap.
     * @example
     * // Update or create a PhraseMap
     * const phraseMap = await prisma.phraseMap.upsert({
     *   create: {
     *     // ... data to create a PhraseMap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PhraseMap we want to update
     *   }
     * })
     */
    upsert<T extends PhraseMapUpsertArgs>(args: SelectSubset<T, PhraseMapUpsertArgs<ExtArgs>>): Prisma__PhraseMapClient<$Result.GetResult<Prisma.$PhraseMapPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PhraseMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseMapCountArgs} args - Arguments to filter PhraseMaps to count.
     * @example
     * // Count the number of PhraseMaps
     * const count = await prisma.phraseMap.count({
     *   where: {
     *     // ... the filter for the PhraseMaps we want to count
     *   }
     * })
    **/
    count<T extends PhraseMapCountArgs>(
      args?: Subset<T, PhraseMapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhraseMapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PhraseMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseMapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhraseMapAggregateArgs>(args: Subset<T, PhraseMapAggregateArgs>): Prisma.PrismaPromise<GetPhraseMapAggregateType<T>>

    /**
     * Group by PhraseMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseMapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhraseMapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhraseMapGroupByArgs['orderBy'] }
        : { orderBy?: PhraseMapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhraseMapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhraseMapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PhraseMap model
   */
  readonly fields: PhraseMapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PhraseMap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhraseMapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wave<T extends PhraseMap$waveArgs<ExtArgs> = {}>(args?: Subset<T, PhraseMap$waveArgs<ExtArgs>>): Prisma__WaveClient<$Result.GetResult<Prisma.$WavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PhraseMap model
   */
  interface PhraseMapFieldRefs {
    readonly id: FieldRef<"PhraseMap", 'String'>
    readonly waveId: FieldRef<"PhraseMap", 'String'>
    readonly bucket: FieldRef<"PhraseMap", 'String'>
    readonly phrase: FieldRef<"PhraseMap", 'String'>
    readonly isActive: FieldRef<"PhraseMap", 'Boolean'>
    readonly priority: FieldRef<"PhraseMap", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PhraseMap findUnique
   */
  export type PhraseMapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
    /**
     * Filter, which PhraseMap to fetch.
     */
    where: PhraseMapWhereUniqueInput
  }

  /**
   * PhraseMap findUniqueOrThrow
   */
  export type PhraseMapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
    /**
     * Filter, which PhraseMap to fetch.
     */
    where: PhraseMapWhereUniqueInput
  }

  /**
   * PhraseMap findFirst
   */
  export type PhraseMapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
    /**
     * Filter, which PhraseMap to fetch.
     */
    where?: PhraseMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhraseMaps to fetch.
     */
    orderBy?: PhraseMapOrderByWithRelationInput | PhraseMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhraseMaps.
     */
    cursor?: PhraseMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhraseMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhraseMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhraseMaps.
     */
    distinct?: PhraseMapScalarFieldEnum | PhraseMapScalarFieldEnum[]
  }

  /**
   * PhraseMap findFirstOrThrow
   */
  export type PhraseMapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
    /**
     * Filter, which PhraseMap to fetch.
     */
    where?: PhraseMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhraseMaps to fetch.
     */
    orderBy?: PhraseMapOrderByWithRelationInput | PhraseMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhraseMaps.
     */
    cursor?: PhraseMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhraseMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhraseMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhraseMaps.
     */
    distinct?: PhraseMapScalarFieldEnum | PhraseMapScalarFieldEnum[]
  }

  /**
   * PhraseMap findMany
   */
  export type PhraseMapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
    /**
     * Filter, which PhraseMaps to fetch.
     */
    where?: PhraseMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhraseMaps to fetch.
     */
    orderBy?: PhraseMapOrderByWithRelationInput | PhraseMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PhraseMaps.
     */
    cursor?: PhraseMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhraseMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhraseMaps.
     */
    skip?: number
    distinct?: PhraseMapScalarFieldEnum | PhraseMapScalarFieldEnum[]
  }

  /**
   * PhraseMap create
   */
  export type PhraseMapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
    /**
     * The data needed to create a PhraseMap.
     */
    data: XOR<PhraseMapCreateInput, PhraseMapUncheckedCreateInput>
  }

  /**
   * PhraseMap createMany
   */
  export type PhraseMapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PhraseMaps.
     */
    data: PhraseMapCreateManyInput | PhraseMapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PhraseMap createManyAndReturn
   */
  export type PhraseMapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * The data used to create many PhraseMaps.
     */
    data: PhraseMapCreateManyInput | PhraseMapCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PhraseMap update
   */
  export type PhraseMapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
    /**
     * The data needed to update a PhraseMap.
     */
    data: XOR<PhraseMapUpdateInput, PhraseMapUncheckedUpdateInput>
    /**
     * Choose, which PhraseMap to update.
     */
    where: PhraseMapWhereUniqueInput
  }

  /**
   * PhraseMap updateMany
   */
  export type PhraseMapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PhraseMaps.
     */
    data: XOR<PhraseMapUpdateManyMutationInput, PhraseMapUncheckedUpdateManyInput>
    /**
     * Filter which PhraseMaps to update
     */
    where?: PhraseMapWhereInput
    /**
     * Limit how many PhraseMaps to update.
     */
    limit?: number
  }

  /**
   * PhraseMap updateManyAndReturn
   */
  export type PhraseMapUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * The data used to update PhraseMaps.
     */
    data: XOR<PhraseMapUpdateManyMutationInput, PhraseMapUncheckedUpdateManyInput>
    /**
     * Filter which PhraseMaps to update
     */
    where?: PhraseMapWhereInput
    /**
     * Limit how many PhraseMaps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PhraseMap upsert
   */
  export type PhraseMapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
    /**
     * The filter to search for the PhraseMap to update in case it exists.
     */
    where: PhraseMapWhereUniqueInput
    /**
     * In case the PhraseMap found by the `where` argument doesn't exist, create a new PhraseMap with this data.
     */
    create: XOR<PhraseMapCreateInput, PhraseMapUncheckedCreateInput>
    /**
     * In case the PhraseMap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhraseMapUpdateInput, PhraseMapUncheckedUpdateInput>
  }

  /**
   * PhraseMap delete
   */
  export type PhraseMapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
    /**
     * Filter which PhraseMap to delete.
     */
    where: PhraseMapWhereUniqueInput
  }

  /**
   * PhraseMap deleteMany
   */
  export type PhraseMapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhraseMaps to delete
     */
    where?: PhraseMapWhereInput
    /**
     * Limit how many PhraseMaps to delete.
     */
    limit?: number
  }

  /**
   * PhraseMap.wave
   */
  export type PhraseMap$waveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wave
     */
    select?: WaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wave
     */
    omit?: WaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaveInclude<ExtArgs> | null
    where?: WaveWhereInput
  }

  /**
   * PhraseMap without action
   */
  export type PhraseMapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhraseMap
     */
    select?: PhraseMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhraseMap
     */
    omit?: PhraseMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseMapInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const WaveBucketScalarFieldEnum: {
    waveId: 'waveId',
    name: 'name',
    weight: 'weight'
  };

  export type WaveBucketScalarFieldEnum = (typeof WaveBucketScalarFieldEnum)[keyof typeof WaveBucketScalarFieldEnum]


  export const TemplateScalarFieldEnum: {
    id: 'id',
    waveId: 'waveId',
    bucket: 'bucket',
    textPattern: 'textPattern',
    modifiersJson: 'modifiersJson',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TemplateScalarFieldEnum = (typeof TemplateScalarFieldEnum)[keyof typeof TemplateScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    passwordHash: 'passwordHash',
    createdAt: 'createdAt',
    dream: 'dream'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WaveScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    icon: 'icon',
    color: 'color',
    impactCoef: 'impactCoef',
    impactUnit: 'impactUnit',
    impactSource: 'impactSource',
    impactVersion: 'impactVersion',
    allowedBuckets: 'allowedBuckets'
  };

  export type WaveScalarFieldEnum = (typeof WaveScalarFieldEnum)[keyof typeof WaveScalarFieldEnum]


  export const UserRippleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    rippleId: 'rippleId',
    isActive: 'isActive',
    isPrimary: 'isPrimary',
    joinedAt: 'joinedAt'
  };

  export type UserRippleScalarFieldEnum = (typeof UserRippleScalarFieldEnum)[keyof typeof UserRippleScalarFieldEnum]


  export const RippleActivityScalarFieldEnum: {
    id: 'id',
    rippleId: 'rippleId',
    city: 'city',
    blurb: 'blurb',
    createdAt: 'createdAt'
  };

  export type RippleActivityScalarFieldEnum = (typeof RippleActivityScalarFieldEnum)[keyof typeof RippleActivityScalarFieldEnum]


  export const RippleSummaryScalarFieldEnum: {
    rippleId: 'rippleId',
    participants: 'participants',
    actionsTotal: 'actionsTotal',
    impactValue: 'impactValue',
    impact30d: 'impact30d',
    impactUnit: 'impactUnit',
    impactSource: 'impactSource',
    updatedAt: 'updatedAt'
  };

  export type RippleSummaryScalarFieldEnum = (typeof RippleSummaryScalarFieldEnum)[keyof typeof RippleSummaryScalarFieldEnum]


  export const RippleScalarFieldEnum: {
    id: 'id',
    waveId: 'waveId',
    title: 'title',
    description: 'description',
    createdBy: 'createdBy',
    status: 'status',
    isStarter: 'isStarter',
    audience_noun: 'audience_noun',
    context_label: 'context_label',
    blurb_template: 'blurb_template',
    default_bucket: 'default_bucket'
  };

  export type RippleScalarFieldEnum = (typeof RippleScalarFieldEnum)[keyof typeof RippleScalarFieldEnum]


  export const MicroActionScalarFieldEnum: {
    id: 'id',
    rippleId: 'rippleId',
    text: 'text',
    bucket: 'bucket',
    status: 'status',
    createdBy: 'createdBy',
    waveId: 'waveId',
    templateId: 'templateId',
    createdAt: 'createdAt'
  };

  export type MicroActionScalarFieldEnum = (typeof MicroActionScalarFieldEnum)[keyof typeof MicroActionScalarFieldEnum]


  export const ActionLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    microActionId: 'microActionId',
    rippleId: 'rippleId',
    waveId: 'waveId',
    bucket: 'bucket',
    createdAt: 'createdAt',
    city: 'city',
    noteText: 'noteText',
    shareAnon: 'shareAnon'
  };

  export type ActionLogScalarFieldEnum = (typeof ActionLogScalarFieldEnum)[keyof typeof ActionLogScalarFieldEnum]


  export const PhraseMapScalarFieldEnum: {
    id: 'id',
    waveId: 'waveId',
    bucket: 'bucket',
    phrase: 'phrase',
    isActive: 'isActive',
    priority: 'priority'
  };

  export type PhraseMapScalarFieldEnum = (typeof PhraseMapScalarFieldEnum)[keyof typeof PhraseMapScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'TemplateStatus'
   */
  export type EnumTemplateStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TemplateStatus'>
    


  /**
   * Reference to a field of type 'TemplateStatus[]'
   */
  export type ListEnumTemplateStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TemplateStatus[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type WaveBucketWhereInput = {
    AND?: WaveBucketWhereInput | WaveBucketWhereInput[]
    OR?: WaveBucketWhereInput[]
    NOT?: WaveBucketWhereInput | WaveBucketWhereInput[]
    waveId?: StringFilter<"WaveBucket"> | string
    name?: StringFilter<"WaveBucket"> | string
    weight?: FloatFilter<"WaveBucket"> | number
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
    templates?: TemplateListRelationFilter
    microActions?: MicroActionListRelationFilter
  }

  export type WaveBucketOrderByWithRelationInput = {
    waveId?: SortOrder
    name?: SortOrder
    weight?: SortOrder
    wave?: WaveOrderByWithRelationInput
    templates?: TemplateOrderByRelationAggregateInput
    microActions?: MicroActionOrderByRelationAggregateInput
  }

  export type WaveBucketWhereUniqueInput = Prisma.AtLeast<{
    waveId_name?: WaveBucketWaveIdNameCompoundUniqueInput
    AND?: WaveBucketWhereInput | WaveBucketWhereInput[]
    OR?: WaveBucketWhereInput[]
    NOT?: WaveBucketWhereInput | WaveBucketWhereInput[]
    waveId?: StringFilter<"WaveBucket"> | string
    name?: StringFilter<"WaveBucket"> | string
    weight?: FloatFilter<"WaveBucket"> | number
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
    templates?: TemplateListRelationFilter
    microActions?: MicroActionListRelationFilter
  }, "waveId_name">

  export type WaveBucketOrderByWithAggregationInput = {
    waveId?: SortOrder
    name?: SortOrder
    weight?: SortOrder
    _count?: WaveBucketCountOrderByAggregateInput
    _avg?: WaveBucketAvgOrderByAggregateInput
    _max?: WaveBucketMaxOrderByAggregateInput
    _min?: WaveBucketMinOrderByAggregateInput
    _sum?: WaveBucketSumOrderByAggregateInput
  }

  export type WaveBucketScalarWhereWithAggregatesInput = {
    AND?: WaveBucketScalarWhereWithAggregatesInput | WaveBucketScalarWhereWithAggregatesInput[]
    OR?: WaveBucketScalarWhereWithAggregatesInput[]
    NOT?: WaveBucketScalarWhereWithAggregatesInput | WaveBucketScalarWhereWithAggregatesInput[]
    waveId?: StringWithAggregatesFilter<"WaveBucket"> | string
    name?: StringWithAggregatesFilter<"WaveBucket"> | string
    weight?: FloatWithAggregatesFilter<"WaveBucket"> | number
  }

  export type TemplateWhereInput = {
    AND?: TemplateWhereInput | TemplateWhereInput[]
    OR?: TemplateWhereInput[]
    NOT?: TemplateWhereInput | TemplateWhereInput[]
    id?: StringFilter<"Template"> | string
    waveId?: StringFilter<"Template"> | string
    bucket?: StringFilter<"Template"> | string
    textPattern?: StringFilter<"Template"> | string
    modifiersJson?: JsonFilter<"Template">
    status?: EnumTemplateStatusFilter<"Template"> | $Enums.TemplateStatus
    createdAt?: DateTimeFilter<"Template"> | Date | string
    updatedAt?: DateTimeFilter<"Template"> | Date | string
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
    waveBucket?: XOR<WaveBucketScalarRelationFilter, WaveBucketWhereInput>
    microActions?: MicroActionListRelationFilter
  }

  export type TemplateOrderByWithRelationInput = {
    id?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    textPattern?: SortOrder
    modifiersJson?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    wave?: WaveOrderByWithRelationInput
    waveBucket?: WaveBucketOrderByWithRelationInput
    microActions?: MicroActionOrderByRelationAggregateInput
  }

  export type TemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TemplateWhereInput | TemplateWhereInput[]
    OR?: TemplateWhereInput[]
    NOT?: TemplateWhereInput | TemplateWhereInput[]
    waveId?: StringFilter<"Template"> | string
    bucket?: StringFilter<"Template"> | string
    textPattern?: StringFilter<"Template"> | string
    modifiersJson?: JsonFilter<"Template">
    status?: EnumTemplateStatusFilter<"Template"> | $Enums.TemplateStatus
    createdAt?: DateTimeFilter<"Template"> | Date | string
    updatedAt?: DateTimeFilter<"Template"> | Date | string
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
    waveBucket?: XOR<WaveBucketScalarRelationFilter, WaveBucketWhereInput>
    microActions?: MicroActionListRelationFilter
  }, "id">

  export type TemplateOrderByWithAggregationInput = {
    id?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    textPattern?: SortOrder
    modifiersJson?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TemplateCountOrderByAggregateInput
    _max?: TemplateMaxOrderByAggregateInput
    _min?: TemplateMinOrderByAggregateInput
  }

  export type TemplateScalarWhereWithAggregatesInput = {
    AND?: TemplateScalarWhereWithAggregatesInput | TemplateScalarWhereWithAggregatesInput[]
    OR?: TemplateScalarWhereWithAggregatesInput[]
    NOT?: TemplateScalarWhereWithAggregatesInput | TemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Template"> | string
    waveId?: StringWithAggregatesFilter<"Template"> | string
    bucket?: StringWithAggregatesFilter<"Template"> | string
    textPattern?: StringWithAggregatesFilter<"Template"> | string
    modifiersJson?: JsonWithAggregatesFilter<"Template">
    status?: EnumTemplateStatusWithAggregatesFilter<"Template"> | $Enums.TemplateStatus
    createdAt?: DateTimeWithAggregatesFilter<"Template"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Template"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    dream?: StringNullableFilter<"User"> | string | null
    memberships?: UserRippleListRelationFilter
    actionLogs?: ActionLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    dream?: SortOrderInput | SortOrder
    memberships?: UserRippleOrderByRelationAggregateInput
    actionLogs?: ActionLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    dream?: StringNullableFilter<"User"> | string | null
    memberships?: UserRippleListRelationFilter
    actionLogs?: ActionLogListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    dream?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    dream?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type WaveWhereInput = {
    AND?: WaveWhereInput | WaveWhereInput[]
    OR?: WaveWhereInput[]
    NOT?: WaveWhereInput | WaveWhereInput[]
    id?: StringFilter<"Wave"> | string
    name?: StringFilter<"Wave"> | string
    description?: StringFilter<"Wave"> | string
    icon?: StringNullableFilter<"Wave"> | string | null
    color?: StringFilter<"Wave"> | string
    impactCoef?: FloatFilter<"Wave"> | number
    impactUnit?: StringFilter<"Wave"> | string
    impactSource?: StringFilter<"Wave"> | string
    impactVersion?: StringFilter<"Wave"> | string
    allowedBuckets?: StringFilter<"Wave"> | string
    ripples?: RippleListRelationFilter
    actionLogs?: ActionLogListRelationFilter
    waveBuckets?: WaveBucketListRelationFilter
    templates?: TemplateListRelationFilter
    microActions?: MicroActionListRelationFilter
    phrases?: PhraseMapListRelationFilter
  }

  export type WaveOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrderInput | SortOrder
    color?: SortOrder
    impactCoef?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    impactVersion?: SortOrder
    allowedBuckets?: SortOrder
    ripples?: RippleOrderByRelationAggregateInput
    actionLogs?: ActionLogOrderByRelationAggregateInput
    waveBuckets?: WaveBucketOrderByRelationAggregateInput
    templates?: TemplateOrderByRelationAggregateInput
    microActions?: MicroActionOrderByRelationAggregateInput
    phrases?: PhraseMapOrderByRelationAggregateInput
  }

  export type WaveWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: WaveWhereInput | WaveWhereInput[]
    OR?: WaveWhereInput[]
    NOT?: WaveWhereInput | WaveWhereInput[]
    description?: StringFilter<"Wave"> | string
    icon?: StringNullableFilter<"Wave"> | string | null
    color?: StringFilter<"Wave"> | string
    impactCoef?: FloatFilter<"Wave"> | number
    impactUnit?: StringFilter<"Wave"> | string
    impactSource?: StringFilter<"Wave"> | string
    impactVersion?: StringFilter<"Wave"> | string
    allowedBuckets?: StringFilter<"Wave"> | string
    ripples?: RippleListRelationFilter
    actionLogs?: ActionLogListRelationFilter
    waveBuckets?: WaveBucketListRelationFilter
    templates?: TemplateListRelationFilter
    microActions?: MicroActionListRelationFilter
    phrases?: PhraseMapListRelationFilter
  }, "id" | "name">

  export type WaveOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrderInput | SortOrder
    color?: SortOrder
    impactCoef?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    impactVersion?: SortOrder
    allowedBuckets?: SortOrder
    _count?: WaveCountOrderByAggregateInput
    _avg?: WaveAvgOrderByAggregateInput
    _max?: WaveMaxOrderByAggregateInput
    _min?: WaveMinOrderByAggregateInput
    _sum?: WaveSumOrderByAggregateInput
  }

  export type WaveScalarWhereWithAggregatesInput = {
    AND?: WaveScalarWhereWithAggregatesInput | WaveScalarWhereWithAggregatesInput[]
    OR?: WaveScalarWhereWithAggregatesInput[]
    NOT?: WaveScalarWhereWithAggregatesInput | WaveScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Wave"> | string
    name?: StringWithAggregatesFilter<"Wave"> | string
    description?: StringWithAggregatesFilter<"Wave"> | string
    icon?: StringNullableWithAggregatesFilter<"Wave"> | string | null
    color?: StringWithAggregatesFilter<"Wave"> | string
    impactCoef?: FloatWithAggregatesFilter<"Wave"> | number
    impactUnit?: StringWithAggregatesFilter<"Wave"> | string
    impactSource?: StringWithAggregatesFilter<"Wave"> | string
    impactVersion?: StringWithAggregatesFilter<"Wave"> | string
    allowedBuckets?: StringWithAggregatesFilter<"Wave"> | string
  }

  export type UserRippleWhereInput = {
    AND?: UserRippleWhereInput | UserRippleWhereInput[]
    OR?: UserRippleWhereInput[]
    NOT?: UserRippleWhereInput | UserRippleWhereInput[]
    id?: StringFilter<"UserRipple"> | string
    userId?: StringFilter<"UserRipple"> | string
    rippleId?: StringFilter<"UserRipple"> | string
    isActive?: BoolFilter<"UserRipple"> | boolean
    isPrimary?: BoolFilter<"UserRipple"> | boolean
    joinedAt?: DateTimeFilter<"UserRipple"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
  }

  export type UserRippleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    rippleId?: SortOrder
    isActive?: SortOrder
    isPrimary?: SortOrder
    joinedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    ripple?: RippleOrderByWithRelationInput
  }

  export type UserRippleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_rippleId?: UserRippleUserIdRippleIdCompoundUniqueInput
    AND?: UserRippleWhereInput | UserRippleWhereInput[]
    OR?: UserRippleWhereInput[]
    NOT?: UserRippleWhereInput | UserRippleWhereInput[]
    userId?: StringFilter<"UserRipple"> | string
    rippleId?: StringFilter<"UserRipple"> | string
    isActive?: BoolFilter<"UserRipple"> | boolean
    isPrimary?: BoolFilter<"UserRipple"> | boolean
    joinedAt?: DateTimeFilter<"UserRipple"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
  }, "id" | "userId_rippleId">

  export type UserRippleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    rippleId?: SortOrder
    isActive?: SortOrder
    isPrimary?: SortOrder
    joinedAt?: SortOrder
    _count?: UserRippleCountOrderByAggregateInput
    _max?: UserRippleMaxOrderByAggregateInput
    _min?: UserRippleMinOrderByAggregateInput
  }

  export type UserRippleScalarWhereWithAggregatesInput = {
    AND?: UserRippleScalarWhereWithAggregatesInput | UserRippleScalarWhereWithAggregatesInput[]
    OR?: UserRippleScalarWhereWithAggregatesInput[]
    NOT?: UserRippleScalarWhereWithAggregatesInput | UserRippleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserRipple"> | string
    userId?: StringWithAggregatesFilter<"UserRipple"> | string
    rippleId?: StringWithAggregatesFilter<"UserRipple"> | string
    isActive?: BoolWithAggregatesFilter<"UserRipple"> | boolean
    isPrimary?: BoolWithAggregatesFilter<"UserRipple"> | boolean
    joinedAt?: DateTimeWithAggregatesFilter<"UserRipple"> | Date | string
  }

  export type RippleActivityWhereInput = {
    AND?: RippleActivityWhereInput | RippleActivityWhereInput[]
    OR?: RippleActivityWhereInput[]
    NOT?: RippleActivityWhereInput | RippleActivityWhereInput[]
    id?: StringFilter<"RippleActivity"> | string
    rippleId?: StringFilter<"RippleActivity"> | string
    city?: StringNullableFilter<"RippleActivity"> | string | null
    blurb?: StringFilter<"RippleActivity"> | string
    createdAt?: DateTimeFilter<"RippleActivity"> | Date | string
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
  }

  export type RippleActivityOrderByWithRelationInput = {
    id?: SortOrder
    rippleId?: SortOrder
    city?: SortOrderInput | SortOrder
    blurb?: SortOrder
    createdAt?: SortOrder
    ripple?: RippleOrderByWithRelationInput
  }

  export type RippleActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RippleActivityWhereInput | RippleActivityWhereInput[]
    OR?: RippleActivityWhereInput[]
    NOT?: RippleActivityWhereInput | RippleActivityWhereInput[]
    rippleId?: StringFilter<"RippleActivity"> | string
    city?: StringNullableFilter<"RippleActivity"> | string | null
    blurb?: StringFilter<"RippleActivity"> | string
    createdAt?: DateTimeFilter<"RippleActivity"> | Date | string
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
  }, "id">

  export type RippleActivityOrderByWithAggregationInput = {
    id?: SortOrder
    rippleId?: SortOrder
    city?: SortOrderInput | SortOrder
    blurb?: SortOrder
    createdAt?: SortOrder
    _count?: RippleActivityCountOrderByAggregateInput
    _max?: RippleActivityMaxOrderByAggregateInput
    _min?: RippleActivityMinOrderByAggregateInput
  }

  export type RippleActivityScalarWhereWithAggregatesInput = {
    AND?: RippleActivityScalarWhereWithAggregatesInput | RippleActivityScalarWhereWithAggregatesInput[]
    OR?: RippleActivityScalarWhereWithAggregatesInput[]
    NOT?: RippleActivityScalarWhereWithAggregatesInput | RippleActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RippleActivity"> | string
    rippleId?: StringWithAggregatesFilter<"RippleActivity"> | string
    city?: StringNullableWithAggregatesFilter<"RippleActivity"> | string | null
    blurb?: StringWithAggregatesFilter<"RippleActivity"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RippleActivity"> | Date | string
  }

  export type RippleSummaryWhereInput = {
    AND?: RippleSummaryWhereInput | RippleSummaryWhereInput[]
    OR?: RippleSummaryWhereInput[]
    NOT?: RippleSummaryWhereInput | RippleSummaryWhereInput[]
    rippleId?: StringFilter<"RippleSummary"> | string
    participants?: IntFilter<"RippleSummary"> | number
    actionsTotal?: IntFilter<"RippleSummary"> | number
    impactValue?: FloatFilter<"RippleSummary"> | number
    impact30d?: FloatFilter<"RippleSummary"> | number
    impactUnit?: StringFilter<"RippleSummary"> | string
    impactSource?: StringFilter<"RippleSummary"> | string
    updatedAt?: DateTimeFilter<"RippleSummary"> | Date | string
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
  }

  export type RippleSummaryOrderByWithRelationInput = {
    rippleId?: SortOrder
    participants?: SortOrder
    actionsTotal?: SortOrder
    impactValue?: SortOrder
    impact30d?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    updatedAt?: SortOrder
    ripple?: RippleOrderByWithRelationInput
  }

  export type RippleSummaryWhereUniqueInput = Prisma.AtLeast<{
    rippleId?: string
    AND?: RippleSummaryWhereInput | RippleSummaryWhereInput[]
    OR?: RippleSummaryWhereInput[]
    NOT?: RippleSummaryWhereInput | RippleSummaryWhereInput[]
    participants?: IntFilter<"RippleSummary"> | number
    actionsTotal?: IntFilter<"RippleSummary"> | number
    impactValue?: FloatFilter<"RippleSummary"> | number
    impact30d?: FloatFilter<"RippleSummary"> | number
    impactUnit?: StringFilter<"RippleSummary"> | string
    impactSource?: StringFilter<"RippleSummary"> | string
    updatedAt?: DateTimeFilter<"RippleSummary"> | Date | string
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
  }, "rippleId">

  export type RippleSummaryOrderByWithAggregationInput = {
    rippleId?: SortOrder
    participants?: SortOrder
    actionsTotal?: SortOrder
    impactValue?: SortOrder
    impact30d?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    updatedAt?: SortOrder
    _count?: RippleSummaryCountOrderByAggregateInput
    _avg?: RippleSummaryAvgOrderByAggregateInput
    _max?: RippleSummaryMaxOrderByAggregateInput
    _min?: RippleSummaryMinOrderByAggregateInput
    _sum?: RippleSummarySumOrderByAggregateInput
  }

  export type RippleSummaryScalarWhereWithAggregatesInput = {
    AND?: RippleSummaryScalarWhereWithAggregatesInput | RippleSummaryScalarWhereWithAggregatesInput[]
    OR?: RippleSummaryScalarWhereWithAggregatesInput[]
    NOT?: RippleSummaryScalarWhereWithAggregatesInput | RippleSummaryScalarWhereWithAggregatesInput[]
    rippleId?: StringWithAggregatesFilter<"RippleSummary"> | string
    participants?: IntWithAggregatesFilter<"RippleSummary"> | number
    actionsTotal?: IntWithAggregatesFilter<"RippleSummary"> | number
    impactValue?: FloatWithAggregatesFilter<"RippleSummary"> | number
    impact30d?: FloatWithAggregatesFilter<"RippleSummary"> | number
    impactUnit?: StringWithAggregatesFilter<"RippleSummary"> | string
    impactSource?: StringWithAggregatesFilter<"RippleSummary"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"RippleSummary"> | Date | string
  }

  export type RippleWhereInput = {
    AND?: RippleWhereInput | RippleWhereInput[]
    OR?: RippleWhereInput[]
    NOT?: RippleWhereInput | RippleWhereInput[]
    id?: StringFilter<"Ripple"> | string
    waveId?: StringFilter<"Ripple"> | string
    title?: StringFilter<"Ripple"> | string
    description?: StringNullableFilter<"Ripple"> | string | null
    createdBy?: StringFilter<"Ripple"> | string
    status?: StringFilter<"Ripple"> | string
    isStarter?: BoolFilter<"Ripple"> | boolean
    audience_noun?: StringNullableFilter<"Ripple"> | string | null
    context_label?: StringNullableFilter<"Ripple"> | string | null
    blurb_template?: StringNullableFilter<"Ripple"> | string | null
    default_bucket?: StringNullableFilter<"Ripple"> | string | null
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
    microActions?: MicroActionListRelationFilter
    memberships?: UserRippleListRelationFilter
    actionLogs?: ActionLogListRelationFilter
    rippleActivities?: RippleActivityListRelationFilter
    rippleSummary?: XOR<RippleSummaryNullableScalarRelationFilter, RippleSummaryWhereInput> | null
  }

  export type RippleOrderByWithRelationInput = {
    id?: SortOrder
    waveId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    status?: SortOrder
    isStarter?: SortOrder
    audience_noun?: SortOrderInput | SortOrder
    context_label?: SortOrderInput | SortOrder
    blurb_template?: SortOrderInput | SortOrder
    default_bucket?: SortOrderInput | SortOrder
    wave?: WaveOrderByWithRelationInput
    microActions?: MicroActionOrderByRelationAggregateInput
    memberships?: UserRippleOrderByRelationAggregateInput
    actionLogs?: ActionLogOrderByRelationAggregateInput
    rippleActivities?: RippleActivityOrderByRelationAggregateInput
    rippleSummary?: RippleSummaryOrderByWithRelationInput
  }

  export type RippleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RippleWhereInput | RippleWhereInput[]
    OR?: RippleWhereInput[]
    NOT?: RippleWhereInput | RippleWhereInput[]
    waveId?: StringFilter<"Ripple"> | string
    title?: StringFilter<"Ripple"> | string
    description?: StringNullableFilter<"Ripple"> | string | null
    createdBy?: StringFilter<"Ripple"> | string
    status?: StringFilter<"Ripple"> | string
    isStarter?: BoolFilter<"Ripple"> | boolean
    audience_noun?: StringNullableFilter<"Ripple"> | string | null
    context_label?: StringNullableFilter<"Ripple"> | string | null
    blurb_template?: StringNullableFilter<"Ripple"> | string | null
    default_bucket?: StringNullableFilter<"Ripple"> | string | null
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
    microActions?: MicroActionListRelationFilter
    memberships?: UserRippleListRelationFilter
    actionLogs?: ActionLogListRelationFilter
    rippleActivities?: RippleActivityListRelationFilter
    rippleSummary?: XOR<RippleSummaryNullableScalarRelationFilter, RippleSummaryWhereInput> | null
  }, "id">

  export type RippleOrderByWithAggregationInput = {
    id?: SortOrder
    waveId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    status?: SortOrder
    isStarter?: SortOrder
    audience_noun?: SortOrderInput | SortOrder
    context_label?: SortOrderInput | SortOrder
    blurb_template?: SortOrderInput | SortOrder
    default_bucket?: SortOrderInput | SortOrder
    _count?: RippleCountOrderByAggregateInput
    _max?: RippleMaxOrderByAggregateInput
    _min?: RippleMinOrderByAggregateInput
  }

  export type RippleScalarWhereWithAggregatesInput = {
    AND?: RippleScalarWhereWithAggregatesInput | RippleScalarWhereWithAggregatesInput[]
    OR?: RippleScalarWhereWithAggregatesInput[]
    NOT?: RippleScalarWhereWithAggregatesInput | RippleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ripple"> | string
    waveId?: StringWithAggregatesFilter<"Ripple"> | string
    title?: StringWithAggregatesFilter<"Ripple"> | string
    description?: StringNullableWithAggregatesFilter<"Ripple"> | string | null
    createdBy?: StringWithAggregatesFilter<"Ripple"> | string
    status?: StringWithAggregatesFilter<"Ripple"> | string
    isStarter?: BoolWithAggregatesFilter<"Ripple"> | boolean
    audience_noun?: StringNullableWithAggregatesFilter<"Ripple"> | string | null
    context_label?: StringNullableWithAggregatesFilter<"Ripple"> | string | null
    blurb_template?: StringNullableWithAggregatesFilter<"Ripple"> | string | null
    default_bucket?: StringNullableWithAggregatesFilter<"Ripple"> | string | null
  }

  export type MicroActionWhereInput = {
    AND?: MicroActionWhereInput | MicroActionWhereInput[]
    OR?: MicroActionWhereInput[]
    NOT?: MicroActionWhereInput | MicroActionWhereInput[]
    id?: StringFilter<"MicroAction"> | string
    rippleId?: StringFilter<"MicroAction"> | string
    text?: StringFilter<"MicroAction"> | string
    bucket?: StringFilter<"MicroAction"> | string
    status?: StringFilter<"MicroAction"> | string
    createdBy?: StringFilter<"MicroAction"> | string
    waveId?: StringFilter<"MicroAction"> | string
    templateId?: StringNullableFilter<"MicroAction"> | string | null
    createdAt?: DateTimeFilter<"MicroAction"> | Date | string
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
    template?: XOR<TemplateNullableScalarRelationFilter, TemplateWhereInput> | null
    actionLogs?: ActionLogListRelationFilter
    waveBucket?: XOR<WaveBucketScalarRelationFilter, WaveBucketWhereInput>
  }

  export type MicroActionOrderByWithRelationInput = {
    id?: SortOrder
    rippleId?: SortOrder
    text?: SortOrder
    bucket?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    waveId?: SortOrder
    templateId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    ripple?: RippleOrderByWithRelationInput
    wave?: WaveOrderByWithRelationInput
    template?: TemplateOrderByWithRelationInput
    actionLogs?: ActionLogOrderByRelationAggregateInput
    waveBucket?: WaveBucketOrderByWithRelationInput
  }

  export type MicroActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MicroActionWhereInput | MicroActionWhereInput[]
    OR?: MicroActionWhereInput[]
    NOT?: MicroActionWhereInput | MicroActionWhereInput[]
    rippleId?: StringFilter<"MicroAction"> | string
    text?: StringFilter<"MicroAction"> | string
    bucket?: StringFilter<"MicroAction"> | string
    status?: StringFilter<"MicroAction"> | string
    createdBy?: StringFilter<"MicroAction"> | string
    waveId?: StringFilter<"MicroAction"> | string
    templateId?: StringNullableFilter<"MicroAction"> | string | null
    createdAt?: DateTimeFilter<"MicroAction"> | Date | string
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
    template?: XOR<TemplateNullableScalarRelationFilter, TemplateWhereInput> | null
    actionLogs?: ActionLogListRelationFilter
    waveBucket?: XOR<WaveBucketScalarRelationFilter, WaveBucketWhereInput>
  }, "id">

  export type MicroActionOrderByWithAggregationInput = {
    id?: SortOrder
    rippleId?: SortOrder
    text?: SortOrder
    bucket?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    waveId?: SortOrder
    templateId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: MicroActionCountOrderByAggregateInput
    _max?: MicroActionMaxOrderByAggregateInput
    _min?: MicroActionMinOrderByAggregateInput
  }

  export type MicroActionScalarWhereWithAggregatesInput = {
    AND?: MicroActionScalarWhereWithAggregatesInput | MicroActionScalarWhereWithAggregatesInput[]
    OR?: MicroActionScalarWhereWithAggregatesInput[]
    NOT?: MicroActionScalarWhereWithAggregatesInput | MicroActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MicroAction"> | string
    rippleId?: StringWithAggregatesFilter<"MicroAction"> | string
    text?: StringWithAggregatesFilter<"MicroAction"> | string
    bucket?: StringWithAggregatesFilter<"MicroAction"> | string
    status?: StringWithAggregatesFilter<"MicroAction"> | string
    createdBy?: StringWithAggregatesFilter<"MicroAction"> | string
    waveId?: StringWithAggregatesFilter<"MicroAction"> | string
    templateId?: StringNullableWithAggregatesFilter<"MicroAction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MicroAction"> | Date | string
  }

  export type ActionLogWhereInput = {
    AND?: ActionLogWhereInput | ActionLogWhereInput[]
    OR?: ActionLogWhereInput[]
    NOT?: ActionLogWhereInput | ActionLogWhereInput[]
    id?: StringFilter<"ActionLog"> | string
    userId?: StringFilter<"ActionLog"> | string
    microActionId?: StringFilter<"ActionLog"> | string
    rippleId?: StringFilter<"ActionLog"> | string
    waveId?: StringFilter<"ActionLog"> | string
    bucket?: StringFilter<"ActionLog"> | string
    createdAt?: DateTimeFilter<"ActionLog"> | Date | string
    city?: StringNullableFilter<"ActionLog"> | string | null
    noteText?: StringNullableFilter<"ActionLog"> | string | null
    shareAnon?: BoolFilter<"ActionLog"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    micro?: XOR<MicroActionScalarRelationFilter, MicroActionWhereInput>
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
  }

  export type ActionLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    microActionId?: SortOrder
    rippleId?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    createdAt?: SortOrder
    city?: SortOrderInput | SortOrder
    noteText?: SortOrderInput | SortOrder
    shareAnon?: SortOrder
    user?: UserOrderByWithRelationInput
    micro?: MicroActionOrderByWithRelationInput
    ripple?: RippleOrderByWithRelationInput
    wave?: WaveOrderByWithRelationInput
  }

  export type ActionLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActionLogWhereInput | ActionLogWhereInput[]
    OR?: ActionLogWhereInput[]
    NOT?: ActionLogWhereInput | ActionLogWhereInput[]
    userId?: StringFilter<"ActionLog"> | string
    microActionId?: StringFilter<"ActionLog"> | string
    rippleId?: StringFilter<"ActionLog"> | string
    waveId?: StringFilter<"ActionLog"> | string
    bucket?: StringFilter<"ActionLog"> | string
    createdAt?: DateTimeFilter<"ActionLog"> | Date | string
    city?: StringNullableFilter<"ActionLog"> | string | null
    noteText?: StringNullableFilter<"ActionLog"> | string | null
    shareAnon?: BoolFilter<"ActionLog"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    micro?: XOR<MicroActionScalarRelationFilter, MicroActionWhereInput>
    ripple?: XOR<RippleScalarRelationFilter, RippleWhereInput>
    wave?: XOR<WaveScalarRelationFilter, WaveWhereInput>
  }, "id">

  export type ActionLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    microActionId?: SortOrder
    rippleId?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    createdAt?: SortOrder
    city?: SortOrderInput | SortOrder
    noteText?: SortOrderInput | SortOrder
    shareAnon?: SortOrder
    _count?: ActionLogCountOrderByAggregateInput
    _max?: ActionLogMaxOrderByAggregateInput
    _min?: ActionLogMinOrderByAggregateInput
  }

  export type ActionLogScalarWhereWithAggregatesInput = {
    AND?: ActionLogScalarWhereWithAggregatesInput | ActionLogScalarWhereWithAggregatesInput[]
    OR?: ActionLogScalarWhereWithAggregatesInput[]
    NOT?: ActionLogScalarWhereWithAggregatesInput | ActionLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActionLog"> | string
    userId?: StringWithAggregatesFilter<"ActionLog"> | string
    microActionId?: StringWithAggregatesFilter<"ActionLog"> | string
    rippleId?: StringWithAggregatesFilter<"ActionLog"> | string
    waveId?: StringWithAggregatesFilter<"ActionLog"> | string
    bucket?: StringWithAggregatesFilter<"ActionLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ActionLog"> | Date | string
    city?: StringNullableWithAggregatesFilter<"ActionLog"> | string | null
    noteText?: StringNullableWithAggregatesFilter<"ActionLog"> | string | null
    shareAnon?: BoolWithAggregatesFilter<"ActionLog"> | boolean
  }

  export type PhraseMapWhereInput = {
    AND?: PhraseMapWhereInput | PhraseMapWhereInput[]
    OR?: PhraseMapWhereInput[]
    NOT?: PhraseMapWhereInput | PhraseMapWhereInput[]
    id?: StringFilter<"PhraseMap"> | string
    waveId?: StringNullableFilter<"PhraseMap"> | string | null
    bucket?: StringFilter<"PhraseMap"> | string
    phrase?: StringFilter<"PhraseMap"> | string
    isActive?: BoolFilter<"PhraseMap"> | boolean
    priority?: IntFilter<"PhraseMap"> | number
    wave?: XOR<WaveNullableScalarRelationFilter, WaveWhereInput> | null
  }

  export type PhraseMapOrderByWithRelationInput = {
    id?: SortOrder
    waveId?: SortOrderInput | SortOrder
    bucket?: SortOrder
    phrase?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    wave?: WaveOrderByWithRelationInput
  }

  export type PhraseMapWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PhraseMapWhereInput | PhraseMapWhereInput[]
    OR?: PhraseMapWhereInput[]
    NOT?: PhraseMapWhereInput | PhraseMapWhereInput[]
    waveId?: StringNullableFilter<"PhraseMap"> | string | null
    bucket?: StringFilter<"PhraseMap"> | string
    phrase?: StringFilter<"PhraseMap"> | string
    isActive?: BoolFilter<"PhraseMap"> | boolean
    priority?: IntFilter<"PhraseMap"> | number
    wave?: XOR<WaveNullableScalarRelationFilter, WaveWhereInput> | null
  }, "id">

  export type PhraseMapOrderByWithAggregationInput = {
    id?: SortOrder
    waveId?: SortOrderInput | SortOrder
    bucket?: SortOrder
    phrase?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    _count?: PhraseMapCountOrderByAggregateInput
    _avg?: PhraseMapAvgOrderByAggregateInput
    _max?: PhraseMapMaxOrderByAggregateInput
    _min?: PhraseMapMinOrderByAggregateInput
    _sum?: PhraseMapSumOrderByAggregateInput
  }

  export type PhraseMapScalarWhereWithAggregatesInput = {
    AND?: PhraseMapScalarWhereWithAggregatesInput | PhraseMapScalarWhereWithAggregatesInput[]
    OR?: PhraseMapScalarWhereWithAggregatesInput[]
    NOT?: PhraseMapScalarWhereWithAggregatesInput | PhraseMapScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PhraseMap"> | string
    waveId?: StringNullableWithAggregatesFilter<"PhraseMap"> | string | null
    bucket?: StringWithAggregatesFilter<"PhraseMap"> | string
    phrase?: StringWithAggregatesFilter<"PhraseMap"> | string
    isActive?: BoolWithAggregatesFilter<"PhraseMap"> | boolean
    priority?: IntWithAggregatesFilter<"PhraseMap"> | number
  }

  export type WaveBucketCreateInput = {
    name: string
    weight?: number
    wave: WaveCreateNestedOneWithoutWaveBucketsInput
    templates?: TemplateCreateNestedManyWithoutWaveBucketInput
    microActions?: MicroActionCreateNestedManyWithoutWaveBucketInput
  }

  export type WaveBucketUncheckedCreateInput = {
    waveId: string
    name: string
    weight?: number
    templates?: TemplateUncheckedCreateNestedManyWithoutWaveBucketInput
    microActions?: MicroActionUncheckedCreateNestedManyWithoutWaveBucketInput
  }

  export type WaveBucketUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    wave?: WaveUpdateOneRequiredWithoutWaveBucketsNestedInput
    templates?: TemplateUpdateManyWithoutWaveBucketNestedInput
    microActions?: MicroActionUpdateManyWithoutWaveBucketNestedInput
  }

  export type WaveBucketUncheckedUpdateInput = {
    waveId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    templates?: TemplateUncheckedUpdateManyWithoutWaveBucketNestedInput
    microActions?: MicroActionUncheckedUpdateManyWithoutWaveBucketNestedInput
  }

  export type WaveBucketCreateManyInput = {
    waveId: string
    name: string
    weight?: number
  }

  export type WaveBucketUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
  }

  export type WaveBucketUncheckedUpdateManyInput = {
    waveId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
  }

  export type TemplateCreateInput = {
    id?: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    wave: WaveCreateNestedOneWithoutTemplatesInput
    waveBucket: WaveBucketCreateNestedOneWithoutTemplatesInput
    microActions?: MicroActionCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUncheckedCreateInput = {
    id?: string
    waveId: string
    bucket: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    microActions?: MicroActionUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wave?: WaveUpdateOneRequiredWithoutTemplatesNestedInput
    waveBucket?: WaveBucketUpdateOneRequiredWithoutTemplatesNestedInput
    microActions?: MicroActionUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    microActions?: MicroActionUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateCreateManyInput = {
    id?: string
    waveId: string
    bucket: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    dream?: string | null
    memberships?: UserRippleCreateNestedManyWithoutUserInput
    actionLogs?: ActionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    dream?: string | null
    memberships?: UserRippleUncheckedCreateNestedManyWithoutUserInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    memberships?: UserRippleUpdateManyWithoutUserNestedInput
    actionLogs?: ActionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    memberships?: UserRippleUncheckedUpdateManyWithoutUserNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    dream?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dream?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dream?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WaveCreateInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleCreateNestedManyWithoutWaveInput
    actionLogs?: ActionLogCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketCreateNestedManyWithoutWaveInput
    templates?: TemplateCreateNestedManyWithoutWaveInput
    microActions?: MicroActionCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapCreateNestedManyWithoutWaveInput
  }

  export type WaveUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleUncheckedCreateNestedManyWithoutWaveInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketUncheckedCreateNestedManyWithoutWaveInput
    templates?: TemplateUncheckedCreateNestedManyWithoutWaveInput
    microActions?: MicroActionUncheckedCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapUncheckedCreateNestedManyWithoutWaveInput
  }

  export type WaveUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUpdateManyWithoutWaveNestedInput
    actionLogs?: ActionLogUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUpdateManyWithoutWaveNestedInput
    templates?: TemplateUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUpdateManyWithoutWaveNestedInput
  }

  export type WaveUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUncheckedUpdateManyWithoutWaveNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUncheckedUpdateManyWithoutWaveNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUncheckedUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUncheckedUpdateManyWithoutWaveNestedInput
  }

  export type WaveCreateManyInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
  }

  export type WaveUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
  }

  export type WaveUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
  }

  export type UserRippleCreateInput = {
    id?: string
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutMembershipsInput
    ripple: RippleCreateNestedOneWithoutMembershipsInput
  }

  export type UserRippleUncheckedCreateInput = {
    id?: string
    userId: string
    rippleId: string
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type UserRippleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMembershipsNestedInput
    ripple?: RippleUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type UserRippleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRippleCreateManyInput = {
    id?: string
    userId: string
    rippleId: string
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type UserRippleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRippleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleActivityCreateInput = {
    id?: string
    city?: string | null
    blurb: string
    createdAt?: Date | string
    ripple: RippleCreateNestedOneWithoutRippleActivitiesInput
  }

  export type RippleActivityUncheckedCreateInput = {
    id?: string
    rippleId: string
    city?: string | null
    blurb: string
    createdAt?: Date | string
  }

  export type RippleActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    blurb?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ripple?: RippleUpdateOneRequiredWithoutRippleActivitiesNestedInput
  }

  export type RippleActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    blurb?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleActivityCreateManyInput = {
    id?: string
    rippleId: string
    city?: string | null
    blurb: string
    createdAt?: Date | string
  }

  export type RippleActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    blurb?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    blurb?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleSummaryCreateInput = {
    participants: number
    actionsTotal: number
    impactValue: number
    impact30d?: number
    impactUnit: string
    impactSource: string
    updatedAt?: Date | string
    ripple: RippleCreateNestedOneWithoutRippleSummaryInput
  }

  export type RippleSummaryUncheckedCreateInput = {
    rippleId: string
    participants: number
    actionsTotal: number
    impactValue: number
    impact30d?: number
    impactUnit: string
    impactSource: string
    updatedAt?: Date | string
  }

  export type RippleSummaryUpdateInput = {
    participants?: IntFieldUpdateOperationsInput | number
    actionsTotal?: IntFieldUpdateOperationsInput | number
    impactValue?: FloatFieldUpdateOperationsInput | number
    impact30d?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ripple?: RippleUpdateOneRequiredWithoutRippleSummaryNestedInput
  }

  export type RippleSummaryUncheckedUpdateInput = {
    rippleId?: StringFieldUpdateOperationsInput | string
    participants?: IntFieldUpdateOperationsInput | number
    actionsTotal?: IntFieldUpdateOperationsInput | number
    impactValue?: FloatFieldUpdateOperationsInput | number
    impact30d?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleSummaryCreateManyInput = {
    rippleId: string
    participants: number
    actionsTotal: number
    impactValue: number
    impact30d?: number
    impactUnit: string
    impactSource: string
    updatedAt?: Date | string
  }

  export type RippleSummaryUpdateManyMutationInput = {
    participants?: IntFieldUpdateOperationsInput | number
    actionsTotal?: IntFieldUpdateOperationsInput | number
    impactValue?: FloatFieldUpdateOperationsInput | number
    impact30d?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleSummaryUncheckedUpdateManyInput = {
    rippleId?: StringFieldUpdateOperationsInput | string
    participants?: IntFieldUpdateOperationsInput | number
    actionsTotal?: IntFieldUpdateOperationsInput | number
    impactValue?: FloatFieldUpdateOperationsInput | number
    impact30d?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleCreateInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    wave: WaveCreateNestedOneWithoutRipplesInput
    microActions?: MicroActionCreateNestedManyWithoutRippleInput
    memberships?: UserRippleCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryCreateNestedOneWithoutRippleInput
  }

  export type RippleUncheckedCreateInput = {
    id?: string
    waveId: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    microActions?: MicroActionUncheckedCreateNestedManyWithoutRippleInput
    memberships?: UserRippleUncheckedCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityUncheckedCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryUncheckedCreateNestedOneWithoutRippleInput
  }

  export type RippleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    wave?: WaveUpdateOneRequiredWithoutRipplesNestedInput
    microActions?: MicroActionUpdateManyWithoutRippleNestedInput
    memberships?: UserRippleUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUpdateOneWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    microActions?: MicroActionUncheckedUpdateManyWithoutRippleNestedInput
    memberships?: UserRippleUncheckedUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUncheckedUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUncheckedUpdateOneWithoutRippleNestedInput
  }

  export type RippleCreateManyInput = {
    id?: string
    waveId: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
  }

  export type RippleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RippleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MicroActionCreateInput = {
    id?: string
    text: string
    status?: string
    createdBy?: string
    createdAt?: Date | string
    ripple: RippleCreateNestedOneWithoutMicroActionsInput
    wave: WaveCreateNestedOneWithoutMicroActionsInput
    template?: TemplateCreateNestedOneWithoutMicroActionsInput
    actionLogs?: ActionLogCreateNestedManyWithoutMicroInput
    waveBucket: WaveBucketCreateNestedOneWithoutMicroActionsInput
  }

  export type MicroActionUncheckedCreateInput = {
    id?: string
    rippleId: string
    text: string
    bucket: string
    status?: string
    createdBy?: string
    waveId: string
    templateId?: string | null
    createdAt?: Date | string
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutMicroInput
  }

  export type MicroActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ripple?: RippleUpdateOneRequiredWithoutMicroActionsNestedInput
    wave?: WaveUpdateOneRequiredWithoutMicroActionsNestedInput
    template?: TemplateUpdateOneWithoutMicroActionsNestedInput
    actionLogs?: ActionLogUpdateManyWithoutMicroNestedInput
    waveBucket?: WaveBucketUpdateOneRequiredWithoutMicroActionsNestedInput
  }

  export type MicroActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUncheckedUpdateManyWithoutMicroNestedInput
  }

  export type MicroActionCreateManyInput = {
    id?: string
    rippleId: string
    text: string
    bucket: string
    status?: string
    createdBy?: string
    waveId: string
    templateId?: string | null
    createdAt?: Date | string
  }

  export type MicroActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MicroActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogCreateInput = {
    id?: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
    user: UserCreateNestedOneWithoutActionLogsInput
    micro: MicroActionCreateNestedOneWithoutActionLogsInput
    ripple: RippleCreateNestedOneWithoutActionLogsInput
    wave: WaveCreateNestedOneWithoutActionLogsInput
  }

  export type ActionLogUncheckedCreateInput = {
    id?: string
    userId: string
    microActionId: string
    rippleId: string
    waveId: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
  }

  export type ActionLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutActionLogsNestedInput
    micro?: MicroActionUpdateOneRequiredWithoutActionLogsNestedInput
    ripple?: RippleUpdateOneRequiredWithoutActionLogsNestedInput
    wave?: WaveUpdateOneRequiredWithoutActionLogsNestedInput
  }

  export type ActionLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    microActionId?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActionLogCreateManyInput = {
    id?: string
    userId: string
    microActionId: string
    rippleId: string
    waveId: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
  }

  export type ActionLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActionLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    microActionId?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PhraseMapCreateInput = {
    id?: string
    bucket: string
    phrase: string
    isActive?: boolean
    priority?: number
    wave?: WaveCreateNestedOneWithoutPhrasesInput
  }

  export type PhraseMapUncheckedCreateInput = {
    id?: string
    waveId?: string | null
    bucket: string
    phrase: string
    isActive?: boolean
    priority?: number
  }

  export type PhraseMapUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    phrase?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    wave?: WaveUpdateOneWithoutPhrasesNestedInput
  }

  export type PhraseMapUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: StringFieldUpdateOperationsInput | string
    phrase?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type PhraseMapCreateManyInput = {
    id?: string
    waveId?: string | null
    bucket: string
    phrase: string
    isActive?: boolean
    priority?: number
  }

  export type PhraseMapUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    phrase?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type PhraseMapUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: StringFieldUpdateOperationsInput | string
    phrase?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type WaveScalarRelationFilter = {
    is?: WaveWhereInput
    isNot?: WaveWhereInput
  }

  export type TemplateListRelationFilter = {
    every?: TemplateWhereInput
    some?: TemplateWhereInput
    none?: TemplateWhereInput
  }

  export type MicroActionListRelationFilter = {
    every?: MicroActionWhereInput
    some?: MicroActionWhereInput
    none?: MicroActionWhereInput
  }

  export type TemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MicroActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WaveBucketWaveIdNameCompoundUniqueInput = {
    waveId: string
    name: string
  }

  export type WaveBucketCountOrderByAggregateInput = {
    waveId?: SortOrder
    name?: SortOrder
    weight?: SortOrder
  }

  export type WaveBucketAvgOrderByAggregateInput = {
    weight?: SortOrder
  }

  export type WaveBucketMaxOrderByAggregateInput = {
    waveId?: SortOrder
    name?: SortOrder
    weight?: SortOrder
  }

  export type WaveBucketMinOrderByAggregateInput = {
    waveId?: SortOrder
    name?: SortOrder
    weight?: SortOrder
  }

  export type WaveBucketSumOrderByAggregateInput = {
    weight?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumTemplateStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TemplateStatus | EnumTemplateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TemplateStatus[] | ListEnumTemplateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TemplateStatus[] | ListEnumTemplateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTemplateStatusFilter<$PrismaModel> | $Enums.TemplateStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WaveBucketScalarRelationFilter = {
    is?: WaveBucketWhereInput
    isNot?: WaveBucketWhereInput
  }

  export type TemplateCountOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    textPattern?: SortOrder
    modifiersJson?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    textPattern?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TemplateMinOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    textPattern?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumTemplateStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TemplateStatus | EnumTemplateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TemplateStatus[] | ListEnumTemplateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TemplateStatus[] | ListEnumTemplateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTemplateStatusWithAggregatesFilter<$PrismaModel> | $Enums.TemplateStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTemplateStatusFilter<$PrismaModel>
    _max?: NestedEnumTemplateStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRippleListRelationFilter = {
    every?: UserRippleWhereInput
    some?: UserRippleWhereInput
    none?: UserRippleWhereInput
  }

  export type ActionLogListRelationFilter = {
    every?: ActionLogWhereInput
    some?: ActionLogWhereInput
    none?: ActionLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserRippleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActionLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    dream?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    dream?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    dream?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type RippleListRelationFilter = {
    every?: RippleWhereInput
    some?: RippleWhereInput
    none?: RippleWhereInput
  }

  export type WaveBucketListRelationFilter = {
    every?: WaveBucketWhereInput
    some?: WaveBucketWhereInput
    none?: WaveBucketWhereInput
  }

  export type PhraseMapListRelationFilter = {
    every?: PhraseMapWhereInput
    some?: PhraseMapWhereInput
    none?: PhraseMapWhereInput
  }

  export type RippleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WaveBucketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PhraseMapOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WaveCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    impactCoef?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    impactVersion?: SortOrder
    allowedBuckets?: SortOrder
  }

  export type WaveAvgOrderByAggregateInput = {
    impactCoef?: SortOrder
  }

  export type WaveMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    impactCoef?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    impactVersion?: SortOrder
    allowedBuckets?: SortOrder
  }

  export type WaveMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    impactCoef?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    impactVersion?: SortOrder
    allowedBuckets?: SortOrder
  }

  export type WaveSumOrderByAggregateInput = {
    impactCoef?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RippleScalarRelationFilter = {
    is?: RippleWhereInput
    isNot?: RippleWhereInput
  }

  export type UserRippleUserIdRippleIdCompoundUniqueInput = {
    userId: string
    rippleId: string
  }

  export type UserRippleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rippleId?: SortOrder
    isActive?: SortOrder
    isPrimary?: SortOrder
    joinedAt?: SortOrder
  }

  export type UserRippleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rippleId?: SortOrder
    isActive?: SortOrder
    isPrimary?: SortOrder
    joinedAt?: SortOrder
  }

  export type UserRippleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rippleId?: SortOrder
    isActive?: SortOrder
    isPrimary?: SortOrder
    joinedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RippleActivityCountOrderByAggregateInput = {
    id?: SortOrder
    rippleId?: SortOrder
    city?: SortOrder
    blurb?: SortOrder
    createdAt?: SortOrder
  }

  export type RippleActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    rippleId?: SortOrder
    city?: SortOrder
    blurb?: SortOrder
    createdAt?: SortOrder
  }

  export type RippleActivityMinOrderByAggregateInput = {
    id?: SortOrder
    rippleId?: SortOrder
    city?: SortOrder
    blurb?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RippleSummaryCountOrderByAggregateInput = {
    rippleId?: SortOrder
    participants?: SortOrder
    actionsTotal?: SortOrder
    impactValue?: SortOrder
    impact30d?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    updatedAt?: SortOrder
  }

  export type RippleSummaryAvgOrderByAggregateInput = {
    participants?: SortOrder
    actionsTotal?: SortOrder
    impactValue?: SortOrder
    impact30d?: SortOrder
  }

  export type RippleSummaryMaxOrderByAggregateInput = {
    rippleId?: SortOrder
    participants?: SortOrder
    actionsTotal?: SortOrder
    impactValue?: SortOrder
    impact30d?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    updatedAt?: SortOrder
  }

  export type RippleSummaryMinOrderByAggregateInput = {
    rippleId?: SortOrder
    participants?: SortOrder
    actionsTotal?: SortOrder
    impactValue?: SortOrder
    impact30d?: SortOrder
    impactUnit?: SortOrder
    impactSource?: SortOrder
    updatedAt?: SortOrder
  }

  export type RippleSummarySumOrderByAggregateInput = {
    participants?: SortOrder
    actionsTotal?: SortOrder
    impactValue?: SortOrder
    impact30d?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type RippleActivityListRelationFilter = {
    every?: RippleActivityWhereInput
    some?: RippleActivityWhereInput
    none?: RippleActivityWhereInput
  }

  export type RippleSummaryNullableScalarRelationFilter = {
    is?: RippleSummaryWhereInput | null
    isNot?: RippleSummaryWhereInput | null
  }

  export type RippleActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RippleCountOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    status?: SortOrder
    isStarter?: SortOrder
    audience_noun?: SortOrder
    context_label?: SortOrder
    blurb_template?: SortOrder
    default_bucket?: SortOrder
  }

  export type RippleMaxOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    status?: SortOrder
    isStarter?: SortOrder
    audience_noun?: SortOrder
    context_label?: SortOrder
    blurb_template?: SortOrder
    default_bucket?: SortOrder
  }

  export type RippleMinOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    status?: SortOrder
    isStarter?: SortOrder
    audience_noun?: SortOrder
    context_label?: SortOrder
    blurb_template?: SortOrder
    default_bucket?: SortOrder
  }

  export type TemplateNullableScalarRelationFilter = {
    is?: TemplateWhereInput | null
    isNot?: TemplateWhereInput | null
  }

  export type MicroActionCountOrderByAggregateInput = {
    id?: SortOrder
    rippleId?: SortOrder
    text?: SortOrder
    bucket?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    waveId?: SortOrder
    templateId?: SortOrder
    createdAt?: SortOrder
  }

  export type MicroActionMaxOrderByAggregateInput = {
    id?: SortOrder
    rippleId?: SortOrder
    text?: SortOrder
    bucket?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    waveId?: SortOrder
    templateId?: SortOrder
    createdAt?: SortOrder
  }

  export type MicroActionMinOrderByAggregateInput = {
    id?: SortOrder
    rippleId?: SortOrder
    text?: SortOrder
    bucket?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    waveId?: SortOrder
    templateId?: SortOrder
    createdAt?: SortOrder
  }

  export type MicroActionScalarRelationFilter = {
    is?: MicroActionWhereInput
    isNot?: MicroActionWhereInput
  }

  export type ActionLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    microActionId?: SortOrder
    rippleId?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    createdAt?: SortOrder
    city?: SortOrder
    noteText?: SortOrder
    shareAnon?: SortOrder
  }

  export type ActionLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    microActionId?: SortOrder
    rippleId?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    createdAt?: SortOrder
    city?: SortOrder
    noteText?: SortOrder
    shareAnon?: SortOrder
  }

  export type ActionLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    microActionId?: SortOrder
    rippleId?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    createdAt?: SortOrder
    city?: SortOrder
    noteText?: SortOrder
    shareAnon?: SortOrder
  }

  export type WaveNullableScalarRelationFilter = {
    is?: WaveWhereInput | null
    isNot?: WaveWhereInput | null
  }

  export type PhraseMapCountOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    phrase?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
  }

  export type PhraseMapAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type PhraseMapMaxOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    phrase?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
  }

  export type PhraseMapMinOrderByAggregateInput = {
    id?: SortOrder
    waveId?: SortOrder
    bucket?: SortOrder
    phrase?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
  }

  export type PhraseMapSumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type WaveCreateNestedOneWithoutWaveBucketsInput = {
    create?: XOR<WaveCreateWithoutWaveBucketsInput, WaveUncheckedCreateWithoutWaveBucketsInput>
    connectOrCreate?: WaveCreateOrConnectWithoutWaveBucketsInput
    connect?: WaveWhereUniqueInput
  }

  export type TemplateCreateNestedManyWithoutWaveBucketInput = {
    create?: XOR<TemplateCreateWithoutWaveBucketInput, TemplateUncheckedCreateWithoutWaveBucketInput> | TemplateCreateWithoutWaveBucketInput[] | TemplateUncheckedCreateWithoutWaveBucketInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutWaveBucketInput | TemplateCreateOrConnectWithoutWaveBucketInput[]
    createMany?: TemplateCreateManyWaveBucketInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type MicroActionCreateNestedManyWithoutWaveBucketInput = {
    create?: XOR<MicroActionCreateWithoutWaveBucketInput, MicroActionUncheckedCreateWithoutWaveBucketInput> | MicroActionCreateWithoutWaveBucketInput[] | MicroActionUncheckedCreateWithoutWaveBucketInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutWaveBucketInput | MicroActionCreateOrConnectWithoutWaveBucketInput[]
    createMany?: MicroActionCreateManyWaveBucketInputEnvelope
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
  }

  export type TemplateUncheckedCreateNestedManyWithoutWaveBucketInput = {
    create?: XOR<TemplateCreateWithoutWaveBucketInput, TemplateUncheckedCreateWithoutWaveBucketInput> | TemplateCreateWithoutWaveBucketInput[] | TemplateUncheckedCreateWithoutWaveBucketInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutWaveBucketInput | TemplateCreateOrConnectWithoutWaveBucketInput[]
    createMany?: TemplateCreateManyWaveBucketInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type MicroActionUncheckedCreateNestedManyWithoutWaveBucketInput = {
    create?: XOR<MicroActionCreateWithoutWaveBucketInput, MicroActionUncheckedCreateWithoutWaveBucketInput> | MicroActionCreateWithoutWaveBucketInput[] | MicroActionUncheckedCreateWithoutWaveBucketInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutWaveBucketInput | MicroActionCreateOrConnectWithoutWaveBucketInput[]
    createMany?: MicroActionCreateManyWaveBucketInputEnvelope
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WaveUpdateOneRequiredWithoutWaveBucketsNestedInput = {
    create?: XOR<WaveCreateWithoutWaveBucketsInput, WaveUncheckedCreateWithoutWaveBucketsInput>
    connectOrCreate?: WaveCreateOrConnectWithoutWaveBucketsInput
    upsert?: WaveUpsertWithoutWaveBucketsInput
    connect?: WaveWhereUniqueInput
    update?: XOR<XOR<WaveUpdateToOneWithWhereWithoutWaveBucketsInput, WaveUpdateWithoutWaveBucketsInput>, WaveUncheckedUpdateWithoutWaveBucketsInput>
  }

  export type TemplateUpdateManyWithoutWaveBucketNestedInput = {
    create?: XOR<TemplateCreateWithoutWaveBucketInput, TemplateUncheckedCreateWithoutWaveBucketInput> | TemplateCreateWithoutWaveBucketInput[] | TemplateUncheckedCreateWithoutWaveBucketInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutWaveBucketInput | TemplateCreateOrConnectWithoutWaveBucketInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutWaveBucketInput | TemplateUpsertWithWhereUniqueWithoutWaveBucketInput[]
    createMany?: TemplateCreateManyWaveBucketInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutWaveBucketInput | TemplateUpdateWithWhereUniqueWithoutWaveBucketInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutWaveBucketInput | TemplateUpdateManyWithWhereWithoutWaveBucketInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type MicroActionUpdateManyWithoutWaveBucketNestedInput = {
    create?: XOR<MicroActionCreateWithoutWaveBucketInput, MicroActionUncheckedCreateWithoutWaveBucketInput> | MicroActionCreateWithoutWaveBucketInput[] | MicroActionUncheckedCreateWithoutWaveBucketInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutWaveBucketInput | MicroActionCreateOrConnectWithoutWaveBucketInput[]
    upsert?: MicroActionUpsertWithWhereUniqueWithoutWaveBucketInput | MicroActionUpsertWithWhereUniqueWithoutWaveBucketInput[]
    createMany?: MicroActionCreateManyWaveBucketInputEnvelope
    set?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    disconnect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    delete?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    update?: MicroActionUpdateWithWhereUniqueWithoutWaveBucketInput | MicroActionUpdateWithWhereUniqueWithoutWaveBucketInput[]
    updateMany?: MicroActionUpdateManyWithWhereWithoutWaveBucketInput | MicroActionUpdateManyWithWhereWithoutWaveBucketInput[]
    deleteMany?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
  }

  export type TemplateUncheckedUpdateManyWithoutWaveBucketNestedInput = {
    create?: XOR<TemplateCreateWithoutWaveBucketInput, TemplateUncheckedCreateWithoutWaveBucketInput> | TemplateCreateWithoutWaveBucketInput[] | TemplateUncheckedCreateWithoutWaveBucketInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutWaveBucketInput | TemplateCreateOrConnectWithoutWaveBucketInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutWaveBucketInput | TemplateUpsertWithWhereUniqueWithoutWaveBucketInput[]
    createMany?: TemplateCreateManyWaveBucketInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutWaveBucketInput | TemplateUpdateWithWhereUniqueWithoutWaveBucketInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutWaveBucketInput | TemplateUpdateManyWithWhereWithoutWaveBucketInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type MicroActionUncheckedUpdateManyWithoutWaveBucketNestedInput = {
    create?: XOR<MicroActionCreateWithoutWaveBucketInput, MicroActionUncheckedCreateWithoutWaveBucketInput> | MicroActionCreateWithoutWaveBucketInput[] | MicroActionUncheckedCreateWithoutWaveBucketInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutWaveBucketInput | MicroActionCreateOrConnectWithoutWaveBucketInput[]
    upsert?: MicroActionUpsertWithWhereUniqueWithoutWaveBucketInput | MicroActionUpsertWithWhereUniqueWithoutWaveBucketInput[]
    createMany?: MicroActionCreateManyWaveBucketInputEnvelope
    set?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    disconnect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    delete?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    update?: MicroActionUpdateWithWhereUniqueWithoutWaveBucketInput | MicroActionUpdateWithWhereUniqueWithoutWaveBucketInput[]
    updateMany?: MicroActionUpdateManyWithWhereWithoutWaveBucketInput | MicroActionUpdateManyWithWhereWithoutWaveBucketInput[]
    deleteMany?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
  }

  export type WaveCreateNestedOneWithoutTemplatesInput = {
    create?: XOR<WaveCreateWithoutTemplatesInput, WaveUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: WaveCreateOrConnectWithoutTemplatesInput
    connect?: WaveWhereUniqueInput
  }

  export type WaveBucketCreateNestedOneWithoutTemplatesInput = {
    create?: XOR<WaveBucketCreateWithoutTemplatesInput, WaveBucketUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: WaveBucketCreateOrConnectWithoutTemplatesInput
    connect?: WaveBucketWhereUniqueInput
  }

  export type MicroActionCreateNestedManyWithoutTemplateInput = {
    create?: XOR<MicroActionCreateWithoutTemplateInput, MicroActionUncheckedCreateWithoutTemplateInput> | MicroActionCreateWithoutTemplateInput[] | MicroActionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutTemplateInput | MicroActionCreateOrConnectWithoutTemplateInput[]
    createMany?: MicroActionCreateManyTemplateInputEnvelope
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
  }

  export type MicroActionUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<MicroActionCreateWithoutTemplateInput, MicroActionUncheckedCreateWithoutTemplateInput> | MicroActionCreateWithoutTemplateInput[] | MicroActionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutTemplateInput | MicroActionCreateOrConnectWithoutTemplateInput[]
    createMany?: MicroActionCreateManyTemplateInputEnvelope
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
  }

  export type EnumTemplateStatusFieldUpdateOperationsInput = {
    set?: $Enums.TemplateStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WaveUpdateOneRequiredWithoutTemplatesNestedInput = {
    create?: XOR<WaveCreateWithoutTemplatesInput, WaveUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: WaveCreateOrConnectWithoutTemplatesInput
    upsert?: WaveUpsertWithoutTemplatesInput
    connect?: WaveWhereUniqueInput
    update?: XOR<XOR<WaveUpdateToOneWithWhereWithoutTemplatesInput, WaveUpdateWithoutTemplatesInput>, WaveUncheckedUpdateWithoutTemplatesInput>
  }

  export type WaveBucketUpdateOneRequiredWithoutTemplatesNestedInput = {
    create?: XOR<WaveBucketCreateWithoutTemplatesInput, WaveBucketUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: WaveBucketCreateOrConnectWithoutTemplatesInput
    upsert?: WaveBucketUpsertWithoutTemplatesInput
    connect?: WaveBucketWhereUniqueInput
    update?: XOR<XOR<WaveBucketUpdateToOneWithWhereWithoutTemplatesInput, WaveBucketUpdateWithoutTemplatesInput>, WaveBucketUncheckedUpdateWithoutTemplatesInput>
  }

  export type MicroActionUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<MicroActionCreateWithoutTemplateInput, MicroActionUncheckedCreateWithoutTemplateInput> | MicroActionCreateWithoutTemplateInput[] | MicroActionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutTemplateInput | MicroActionCreateOrConnectWithoutTemplateInput[]
    upsert?: MicroActionUpsertWithWhereUniqueWithoutTemplateInput | MicroActionUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: MicroActionCreateManyTemplateInputEnvelope
    set?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    disconnect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    delete?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    update?: MicroActionUpdateWithWhereUniqueWithoutTemplateInput | MicroActionUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: MicroActionUpdateManyWithWhereWithoutTemplateInput | MicroActionUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
  }

  export type MicroActionUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<MicroActionCreateWithoutTemplateInput, MicroActionUncheckedCreateWithoutTemplateInput> | MicroActionCreateWithoutTemplateInput[] | MicroActionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutTemplateInput | MicroActionCreateOrConnectWithoutTemplateInput[]
    upsert?: MicroActionUpsertWithWhereUniqueWithoutTemplateInput | MicroActionUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: MicroActionCreateManyTemplateInputEnvelope
    set?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    disconnect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    delete?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    update?: MicroActionUpdateWithWhereUniqueWithoutTemplateInput | MicroActionUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: MicroActionUpdateManyWithWhereWithoutTemplateInput | MicroActionUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
  }

  export type UserRippleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRippleCreateWithoutUserInput, UserRippleUncheckedCreateWithoutUserInput> | UserRippleCreateWithoutUserInput[] | UserRippleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRippleCreateOrConnectWithoutUserInput | UserRippleCreateOrConnectWithoutUserInput[]
    createMany?: UserRippleCreateManyUserInputEnvelope
    connect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
  }

  export type ActionLogCreateNestedManyWithoutUserInput = {
    create?: XOR<ActionLogCreateWithoutUserInput, ActionLogUncheckedCreateWithoutUserInput> | ActionLogCreateWithoutUserInput[] | ActionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutUserInput | ActionLogCreateOrConnectWithoutUserInput[]
    createMany?: ActionLogCreateManyUserInputEnvelope
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
  }

  export type UserRippleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRippleCreateWithoutUserInput, UserRippleUncheckedCreateWithoutUserInput> | UserRippleCreateWithoutUserInput[] | UserRippleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRippleCreateOrConnectWithoutUserInput | UserRippleCreateOrConnectWithoutUserInput[]
    createMany?: UserRippleCreateManyUserInputEnvelope
    connect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
  }

  export type ActionLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActionLogCreateWithoutUserInput, ActionLogUncheckedCreateWithoutUserInput> | ActionLogCreateWithoutUserInput[] | ActionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutUserInput | ActionLogCreateOrConnectWithoutUserInput[]
    createMany?: ActionLogCreateManyUserInputEnvelope
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserRippleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRippleCreateWithoutUserInput, UserRippleUncheckedCreateWithoutUserInput> | UserRippleCreateWithoutUserInput[] | UserRippleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRippleCreateOrConnectWithoutUserInput | UserRippleCreateOrConnectWithoutUserInput[]
    upsert?: UserRippleUpsertWithWhereUniqueWithoutUserInput | UserRippleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRippleCreateManyUserInputEnvelope
    set?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    disconnect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    delete?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    connect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    update?: UserRippleUpdateWithWhereUniqueWithoutUserInput | UserRippleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRippleUpdateManyWithWhereWithoutUserInput | UserRippleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRippleScalarWhereInput | UserRippleScalarWhereInput[]
  }

  export type ActionLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActionLogCreateWithoutUserInput, ActionLogUncheckedCreateWithoutUserInput> | ActionLogCreateWithoutUserInput[] | ActionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutUserInput | ActionLogCreateOrConnectWithoutUserInput[]
    upsert?: ActionLogUpsertWithWhereUniqueWithoutUserInput | ActionLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActionLogCreateManyUserInputEnvelope
    set?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    disconnect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    delete?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    update?: ActionLogUpdateWithWhereUniqueWithoutUserInput | ActionLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActionLogUpdateManyWithWhereWithoutUserInput | ActionLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActionLogScalarWhereInput | ActionLogScalarWhereInput[]
  }

  export type UserRippleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRippleCreateWithoutUserInput, UserRippleUncheckedCreateWithoutUserInput> | UserRippleCreateWithoutUserInput[] | UserRippleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRippleCreateOrConnectWithoutUserInput | UserRippleCreateOrConnectWithoutUserInput[]
    upsert?: UserRippleUpsertWithWhereUniqueWithoutUserInput | UserRippleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRippleCreateManyUserInputEnvelope
    set?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    disconnect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    delete?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    connect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    update?: UserRippleUpdateWithWhereUniqueWithoutUserInput | UserRippleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRippleUpdateManyWithWhereWithoutUserInput | UserRippleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRippleScalarWhereInput | UserRippleScalarWhereInput[]
  }

  export type ActionLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActionLogCreateWithoutUserInput, ActionLogUncheckedCreateWithoutUserInput> | ActionLogCreateWithoutUserInput[] | ActionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutUserInput | ActionLogCreateOrConnectWithoutUserInput[]
    upsert?: ActionLogUpsertWithWhereUniqueWithoutUserInput | ActionLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActionLogCreateManyUserInputEnvelope
    set?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    disconnect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    delete?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    update?: ActionLogUpdateWithWhereUniqueWithoutUserInput | ActionLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActionLogUpdateManyWithWhereWithoutUserInput | ActionLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActionLogScalarWhereInput | ActionLogScalarWhereInput[]
  }

  export type RippleCreateNestedManyWithoutWaveInput = {
    create?: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput> | RippleCreateWithoutWaveInput[] | RippleUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: RippleCreateOrConnectWithoutWaveInput | RippleCreateOrConnectWithoutWaveInput[]
    createMany?: RippleCreateManyWaveInputEnvelope
    connect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
  }

  export type ActionLogCreateNestedManyWithoutWaveInput = {
    create?: XOR<ActionLogCreateWithoutWaveInput, ActionLogUncheckedCreateWithoutWaveInput> | ActionLogCreateWithoutWaveInput[] | ActionLogUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutWaveInput | ActionLogCreateOrConnectWithoutWaveInput[]
    createMany?: ActionLogCreateManyWaveInputEnvelope
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
  }

  export type WaveBucketCreateNestedManyWithoutWaveInput = {
    create?: XOR<WaveBucketCreateWithoutWaveInput, WaveBucketUncheckedCreateWithoutWaveInput> | WaveBucketCreateWithoutWaveInput[] | WaveBucketUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: WaveBucketCreateOrConnectWithoutWaveInput | WaveBucketCreateOrConnectWithoutWaveInput[]
    createMany?: WaveBucketCreateManyWaveInputEnvelope
    connect?: WaveBucketWhereUniqueInput | WaveBucketWhereUniqueInput[]
  }

  export type TemplateCreateNestedManyWithoutWaveInput = {
    create?: XOR<TemplateCreateWithoutWaveInput, TemplateUncheckedCreateWithoutWaveInput> | TemplateCreateWithoutWaveInput[] | TemplateUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutWaveInput | TemplateCreateOrConnectWithoutWaveInput[]
    createMany?: TemplateCreateManyWaveInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type MicroActionCreateNestedManyWithoutWaveInput = {
    create?: XOR<MicroActionCreateWithoutWaveInput, MicroActionUncheckedCreateWithoutWaveInput> | MicroActionCreateWithoutWaveInput[] | MicroActionUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutWaveInput | MicroActionCreateOrConnectWithoutWaveInput[]
    createMany?: MicroActionCreateManyWaveInputEnvelope
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
  }

  export type PhraseMapCreateNestedManyWithoutWaveInput = {
    create?: XOR<PhraseMapCreateWithoutWaveInput, PhraseMapUncheckedCreateWithoutWaveInput> | PhraseMapCreateWithoutWaveInput[] | PhraseMapUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: PhraseMapCreateOrConnectWithoutWaveInput | PhraseMapCreateOrConnectWithoutWaveInput[]
    createMany?: PhraseMapCreateManyWaveInputEnvelope
    connect?: PhraseMapWhereUniqueInput | PhraseMapWhereUniqueInput[]
  }

  export type RippleUncheckedCreateNestedManyWithoutWaveInput = {
    create?: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput> | RippleCreateWithoutWaveInput[] | RippleUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: RippleCreateOrConnectWithoutWaveInput | RippleCreateOrConnectWithoutWaveInput[]
    createMany?: RippleCreateManyWaveInputEnvelope
    connect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
  }

  export type ActionLogUncheckedCreateNestedManyWithoutWaveInput = {
    create?: XOR<ActionLogCreateWithoutWaveInput, ActionLogUncheckedCreateWithoutWaveInput> | ActionLogCreateWithoutWaveInput[] | ActionLogUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutWaveInput | ActionLogCreateOrConnectWithoutWaveInput[]
    createMany?: ActionLogCreateManyWaveInputEnvelope
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
  }

  export type WaveBucketUncheckedCreateNestedManyWithoutWaveInput = {
    create?: XOR<WaveBucketCreateWithoutWaveInput, WaveBucketUncheckedCreateWithoutWaveInput> | WaveBucketCreateWithoutWaveInput[] | WaveBucketUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: WaveBucketCreateOrConnectWithoutWaveInput | WaveBucketCreateOrConnectWithoutWaveInput[]
    createMany?: WaveBucketCreateManyWaveInputEnvelope
    connect?: WaveBucketWhereUniqueInput | WaveBucketWhereUniqueInput[]
  }

  export type TemplateUncheckedCreateNestedManyWithoutWaveInput = {
    create?: XOR<TemplateCreateWithoutWaveInput, TemplateUncheckedCreateWithoutWaveInput> | TemplateCreateWithoutWaveInput[] | TemplateUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutWaveInput | TemplateCreateOrConnectWithoutWaveInput[]
    createMany?: TemplateCreateManyWaveInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type MicroActionUncheckedCreateNestedManyWithoutWaveInput = {
    create?: XOR<MicroActionCreateWithoutWaveInput, MicroActionUncheckedCreateWithoutWaveInput> | MicroActionCreateWithoutWaveInput[] | MicroActionUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutWaveInput | MicroActionCreateOrConnectWithoutWaveInput[]
    createMany?: MicroActionCreateManyWaveInputEnvelope
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
  }

  export type PhraseMapUncheckedCreateNestedManyWithoutWaveInput = {
    create?: XOR<PhraseMapCreateWithoutWaveInput, PhraseMapUncheckedCreateWithoutWaveInput> | PhraseMapCreateWithoutWaveInput[] | PhraseMapUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: PhraseMapCreateOrConnectWithoutWaveInput | PhraseMapCreateOrConnectWithoutWaveInput[]
    createMany?: PhraseMapCreateManyWaveInputEnvelope
    connect?: PhraseMapWhereUniqueInput | PhraseMapWhereUniqueInput[]
  }

  export type RippleUpdateManyWithoutWaveNestedInput = {
    create?: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput> | RippleCreateWithoutWaveInput[] | RippleUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: RippleCreateOrConnectWithoutWaveInput | RippleCreateOrConnectWithoutWaveInput[]
    upsert?: RippleUpsertWithWhereUniqueWithoutWaveInput | RippleUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: RippleCreateManyWaveInputEnvelope
    set?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    disconnect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    delete?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    connect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    update?: RippleUpdateWithWhereUniqueWithoutWaveInput | RippleUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: RippleUpdateManyWithWhereWithoutWaveInput | RippleUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: RippleScalarWhereInput | RippleScalarWhereInput[]
  }

  export type ActionLogUpdateManyWithoutWaveNestedInput = {
    create?: XOR<ActionLogCreateWithoutWaveInput, ActionLogUncheckedCreateWithoutWaveInput> | ActionLogCreateWithoutWaveInput[] | ActionLogUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutWaveInput | ActionLogCreateOrConnectWithoutWaveInput[]
    upsert?: ActionLogUpsertWithWhereUniqueWithoutWaveInput | ActionLogUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: ActionLogCreateManyWaveInputEnvelope
    set?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    disconnect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    delete?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    update?: ActionLogUpdateWithWhereUniqueWithoutWaveInput | ActionLogUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: ActionLogUpdateManyWithWhereWithoutWaveInput | ActionLogUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: ActionLogScalarWhereInput | ActionLogScalarWhereInput[]
  }

  export type WaveBucketUpdateManyWithoutWaveNestedInput = {
    create?: XOR<WaveBucketCreateWithoutWaveInput, WaveBucketUncheckedCreateWithoutWaveInput> | WaveBucketCreateWithoutWaveInput[] | WaveBucketUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: WaveBucketCreateOrConnectWithoutWaveInput | WaveBucketCreateOrConnectWithoutWaveInput[]
    upsert?: WaveBucketUpsertWithWhereUniqueWithoutWaveInput | WaveBucketUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: WaveBucketCreateManyWaveInputEnvelope
    set?: WaveBucketWhereUniqueInput | WaveBucketWhereUniqueInput[]
    disconnect?: WaveBucketWhereUniqueInput | WaveBucketWhereUniqueInput[]
    delete?: WaveBucketWhereUniqueInput | WaveBucketWhereUniqueInput[]
    connect?: WaveBucketWhereUniqueInput | WaveBucketWhereUniqueInput[]
    update?: WaveBucketUpdateWithWhereUniqueWithoutWaveInput | WaveBucketUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: WaveBucketUpdateManyWithWhereWithoutWaveInput | WaveBucketUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: WaveBucketScalarWhereInput | WaveBucketScalarWhereInput[]
  }

  export type TemplateUpdateManyWithoutWaveNestedInput = {
    create?: XOR<TemplateCreateWithoutWaveInput, TemplateUncheckedCreateWithoutWaveInput> | TemplateCreateWithoutWaveInput[] | TemplateUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutWaveInput | TemplateCreateOrConnectWithoutWaveInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutWaveInput | TemplateUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: TemplateCreateManyWaveInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutWaveInput | TemplateUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutWaveInput | TemplateUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type MicroActionUpdateManyWithoutWaveNestedInput = {
    create?: XOR<MicroActionCreateWithoutWaveInput, MicroActionUncheckedCreateWithoutWaveInput> | MicroActionCreateWithoutWaveInput[] | MicroActionUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutWaveInput | MicroActionCreateOrConnectWithoutWaveInput[]
    upsert?: MicroActionUpsertWithWhereUniqueWithoutWaveInput | MicroActionUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: MicroActionCreateManyWaveInputEnvelope
    set?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    disconnect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    delete?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    update?: MicroActionUpdateWithWhereUniqueWithoutWaveInput | MicroActionUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: MicroActionUpdateManyWithWhereWithoutWaveInput | MicroActionUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
  }

  export type PhraseMapUpdateManyWithoutWaveNestedInput = {
    create?: XOR<PhraseMapCreateWithoutWaveInput, PhraseMapUncheckedCreateWithoutWaveInput> | PhraseMapCreateWithoutWaveInput[] | PhraseMapUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: PhraseMapCreateOrConnectWithoutWaveInput | PhraseMapCreateOrConnectWithoutWaveInput[]
    upsert?: PhraseMapUpsertWithWhereUniqueWithoutWaveInput | PhraseMapUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: PhraseMapCreateManyWaveInputEnvelope
    set?: PhraseMapWhereUniqueInput | PhraseMapWhereUniqueInput[]
    disconnect?: PhraseMapWhereUniqueInput | PhraseMapWhereUniqueInput[]
    delete?: PhraseMapWhereUniqueInput | PhraseMapWhereUniqueInput[]
    connect?: PhraseMapWhereUniqueInput | PhraseMapWhereUniqueInput[]
    update?: PhraseMapUpdateWithWhereUniqueWithoutWaveInput | PhraseMapUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: PhraseMapUpdateManyWithWhereWithoutWaveInput | PhraseMapUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: PhraseMapScalarWhereInput | PhraseMapScalarWhereInput[]
  }

  export type RippleUncheckedUpdateManyWithoutWaveNestedInput = {
    create?: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput> | RippleCreateWithoutWaveInput[] | RippleUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: RippleCreateOrConnectWithoutWaveInput | RippleCreateOrConnectWithoutWaveInput[]
    upsert?: RippleUpsertWithWhereUniqueWithoutWaveInput | RippleUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: RippleCreateManyWaveInputEnvelope
    set?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    disconnect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    delete?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    connect?: RippleWhereUniqueInput | RippleWhereUniqueInput[]
    update?: RippleUpdateWithWhereUniqueWithoutWaveInput | RippleUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: RippleUpdateManyWithWhereWithoutWaveInput | RippleUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: RippleScalarWhereInput | RippleScalarWhereInput[]
  }

  export type ActionLogUncheckedUpdateManyWithoutWaveNestedInput = {
    create?: XOR<ActionLogCreateWithoutWaveInput, ActionLogUncheckedCreateWithoutWaveInput> | ActionLogCreateWithoutWaveInput[] | ActionLogUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutWaveInput | ActionLogCreateOrConnectWithoutWaveInput[]
    upsert?: ActionLogUpsertWithWhereUniqueWithoutWaveInput | ActionLogUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: ActionLogCreateManyWaveInputEnvelope
    set?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    disconnect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    delete?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    update?: ActionLogUpdateWithWhereUniqueWithoutWaveInput | ActionLogUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: ActionLogUpdateManyWithWhereWithoutWaveInput | ActionLogUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: ActionLogScalarWhereInput | ActionLogScalarWhereInput[]
  }

  export type WaveBucketUncheckedUpdateManyWithoutWaveNestedInput = {
    create?: XOR<WaveBucketCreateWithoutWaveInput, WaveBucketUncheckedCreateWithoutWaveInput> | WaveBucketCreateWithoutWaveInput[] | WaveBucketUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: WaveBucketCreateOrConnectWithoutWaveInput | WaveBucketCreateOrConnectWithoutWaveInput[]
    upsert?: WaveBucketUpsertWithWhereUniqueWithoutWaveInput | WaveBucketUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: WaveBucketCreateManyWaveInputEnvelope
    set?: WaveBucketWhereUniqueInput | WaveBucketWhereUniqueInput[]
    disconnect?: WaveBucketWhereUniqueInput | WaveBucketWhereUniqueInput[]
    delete?: WaveBucketWhereUniqueInput | WaveBucketWhereUniqueInput[]
    connect?: WaveBucketWhereUniqueInput | WaveBucketWhereUniqueInput[]
    update?: WaveBucketUpdateWithWhereUniqueWithoutWaveInput | WaveBucketUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: WaveBucketUpdateManyWithWhereWithoutWaveInput | WaveBucketUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: WaveBucketScalarWhereInput | WaveBucketScalarWhereInput[]
  }

  export type TemplateUncheckedUpdateManyWithoutWaveNestedInput = {
    create?: XOR<TemplateCreateWithoutWaveInput, TemplateUncheckedCreateWithoutWaveInput> | TemplateCreateWithoutWaveInput[] | TemplateUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutWaveInput | TemplateCreateOrConnectWithoutWaveInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutWaveInput | TemplateUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: TemplateCreateManyWaveInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutWaveInput | TemplateUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutWaveInput | TemplateUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type MicroActionUncheckedUpdateManyWithoutWaveNestedInput = {
    create?: XOR<MicroActionCreateWithoutWaveInput, MicroActionUncheckedCreateWithoutWaveInput> | MicroActionCreateWithoutWaveInput[] | MicroActionUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutWaveInput | MicroActionCreateOrConnectWithoutWaveInput[]
    upsert?: MicroActionUpsertWithWhereUniqueWithoutWaveInput | MicroActionUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: MicroActionCreateManyWaveInputEnvelope
    set?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    disconnect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    delete?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    update?: MicroActionUpdateWithWhereUniqueWithoutWaveInput | MicroActionUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: MicroActionUpdateManyWithWhereWithoutWaveInput | MicroActionUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
  }

  export type PhraseMapUncheckedUpdateManyWithoutWaveNestedInput = {
    create?: XOR<PhraseMapCreateWithoutWaveInput, PhraseMapUncheckedCreateWithoutWaveInput> | PhraseMapCreateWithoutWaveInput[] | PhraseMapUncheckedCreateWithoutWaveInput[]
    connectOrCreate?: PhraseMapCreateOrConnectWithoutWaveInput | PhraseMapCreateOrConnectWithoutWaveInput[]
    upsert?: PhraseMapUpsertWithWhereUniqueWithoutWaveInput | PhraseMapUpsertWithWhereUniqueWithoutWaveInput[]
    createMany?: PhraseMapCreateManyWaveInputEnvelope
    set?: PhraseMapWhereUniqueInput | PhraseMapWhereUniqueInput[]
    disconnect?: PhraseMapWhereUniqueInput | PhraseMapWhereUniqueInput[]
    delete?: PhraseMapWhereUniqueInput | PhraseMapWhereUniqueInput[]
    connect?: PhraseMapWhereUniqueInput | PhraseMapWhereUniqueInput[]
    update?: PhraseMapUpdateWithWhereUniqueWithoutWaveInput | PhraseMapUpdateWithWhereUniqueWithoutWaveInput[]
    updateMany?: PhraseMapUpdateManyWithWhereWithoutWaveInput | PhraseMapUpdateManyWithWhereWithoutWaveInput[]
    deleteMany?: PhraseMapScalarWhereInput | PhraseMapScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMembershipsInput = {
    create?: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type RippleCreateNestedOneWithoutMembershipsInput = {
    create?: XOR<RippleCreateWithoutMembershipsInput, RippleUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: RippleCreateOrConnectWithoutMembershipsInput
    connect?: RippleWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembershipsInput
    upsert?: UserUpsertWithoutMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMembershipsInput, UserUpdateWithoutMembershipsInput>, UserUncheckedUpdateWithoutMembershipsInput>
  }

  export type RippleUpdateOneRequiredWithoutMembershipsNestedInput = {
    create?: XOR<RippleCreateWithoutMembershipsInput, RippleUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: RippleCreateOrConnectWithoutMembershipsInput
    upsert?: RippleUpsertWithoutMembershipsInput
    connect?: RippleWhereUniqueInput
    update?: XOR<XOR<RippleUpdateToOneWithWhereWithoutMembershipsInput, RippleUpdateWithoutMembershipsInput>, RippleUncheckedUpdateWithoutMembershipsInput>
  }

  export type RippleCreateNestedOneWithoutRippleActivitiesInput = {
    create?: XOR<RippleCreateWithoutRippleActivitiesInput, RippleUncheckedCreateWithoutRippleActivitiesInput>
    connectOrCreate?: RippleCreateOrConnectWithoutRippleActivitiesInput
    connect?: RippleWhereUniqueInput
  }

  export type RippleUpdateOneRequiredWithoutRippleActivitiesNestedInput = {
    create?: XOR<RippleCreateWithoutRippleActivitiesInput, RippleUncheckedCreateWithoutRippleActivitiesInput>
    connectOrCreate?: RippleCreateOrConnectWithoutRippleActivitiesInput
    upsert?: RippleUpsertWithoutRippleActivitiesInput
    connect?: RippleWhereUniqueInput
    update?: XOR<XOR<RippleUpdateToOneWithWhereWithoutRippleActivitiesInput, RippleUpdateWithoutRippleActivitiesInput>, RippleUncheckedUpdateWithoutRippleActivitiesInput>
  }

  export type RippleCreateNestedOneWithoutRippleSummaryInput = {
    create?: XOR<RippleCreateWithoutRippleSummaryInput, RippleUncheckedCreateWithoutRippleSummaryInput>
    connectOrCreate?: RippleCreateOrConnectWithoutRippleSummaryInput
    connect?: RippleWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RippleUpdateOneRequiredWithoutRippleSummaryNestedInput = {
    create?: XOR<RippleCreateWithoutRippleSummaryInput, RippleUncheckedCreateWithoutRippleSummaryInput>
    connectOrCreate?: RippleCreateOrConnectWithoutRippleSummaryInput
    upsert?: RippleUpsertWithoutRippleSummaryInput
    connect?: RippleWhereUniqueInput
    update?: XOR<XOR<RippleUpdateToOneWithWhereWithoutRippleSummaryInput, RippleUpdateWithoutRippleSummaryInput>, RippleUncheckedUpdateWithoutRippleSummaryInput>
  }

  export type WaveCreateNestedOneWithoutRipplesInput = {
    create?: XOR<WaveCreateWithoutRipplesInput, WaveUncheckedCreateWithoutRipplesInput>
    connectOrCreate?: WaveCreateOrConnectWithoutRipplesInput
    connect?: WaveWhereUniqueInput
  }

  export type MicroActionCreateNestedManyWithoutRippleInput = {
    create?: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput> | MicroActionCreateWithoutRippleInput[] | MicroActionUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutRippleInput | MicroActionCreateOrConnectWithoutRippleInput[]
    createMany?: MicroActionCreateManyRippleInputEnvelope
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
  }

  export type UserRippleCreateNestedManyWithoutRippleInput = {
    create?: XOR<UserRippleCreateWithoutRippleInput, UserRippleUncheckedCreateWithoutRippleInput> | UserRippleCreateWithoutRippleInput[] | UserRippleUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: UserRippleCreateOrConnectWithoutRippleInput | UserRippleCreateOrConnectWithoutRippleInput[]
    createMany?: UserRippleCreateManyRippleInputEnvelope
    connect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
  }

  export type ActionLogCreateNestedManyWithoutRippleInput = {
    create?: XOR<ActionLogCreateWithoutRippleInput, ActionLogUncheckedCreateWithoutRippleInput> | ActionLogCreateWithoutRippleInput[] | ActionLogUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutRippleInput | ActionLogCreateOrConnectWithoutRippleInput[]
    createMany?: ActionLogCreateManyRippleInputEnvelope
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
  }

  export type RippleActivityCreateNestedManyWithoutRippleInput = {
    create?: XOR<RippleActivityCreateWithoutRippleInput, RippleActivityUncheckedCreateWithoutRippleInput> | RippleActivityCreateWithoutRippleInput[] | RippleActivityUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: RippleActivityCreateOrConnectWithoutRippleInput | RippleActivityCreateOrConnectWithoutRippleInput[]
    createMany?: RippleActivityCreateManyRippleInputEnvelope
    connect?: RippleActivityWhereUniqueInput | RippleActivityWhereUniqueInput[]
  }

  export type RippleSummaryCreateNestedOneWithoutRippleInput = {
    create?: XOR<RippleSummaryCreateWithoutRippleInput, RippleSummaryUncheckedCreateWithoutRippleInput>
    connectOrCreate?: RippleSummaryCreateOrConnectWithoutRippleInput
    connect?: RippleSummaryWhereUniqueInput
  }

  export type MicroActionUncheckedCreateNestedManyWithoutRippleInput = {
    create?: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput> | MicroActionCreateWithoutRippleInput[] | MicroActionUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutRippleInput | MicroActionCreateOrConnectWithoutRippleInput[]
    createMany?: MicroActionCreateManyRippleInputEnvelope
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
  }

  export type UserRippleUncheckedCreateNestedManyWithoutRippleInput = {
    create?: XOR<UserRippleCreateWithoutRippleInput, UserRippleUncheckedCreateWithoutRippleInput> | UserRippleCreateWithoutRippleInput[] | UserRippleUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: UserRippleCreateOrConnectWithoutRippleInput | UserRippleCreateOrConnectWithoutRippleInput[]
    createMany?: UserRippleCreateManyRippleInputEnvelope
    connect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
  }

  export type ActionLogUncheckedCreateNestedManyWithoutRippleInput = {
    create?: XOR<ActionLogCreateWithoutRippleInput, ActionLogUncheckedCreateWithoutRippleInput> | ActionLogCreateWithoutRippleInput[] | ActionLogUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutRippleInput | ActionLogCreateOrConnectWithoutRippleInput[]
    createMany?: ActionLogCreateManyRippleInputEnvelope
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
  }

  export type RippleActivityUncheckedCreateNestedManyWithoutRippleInput = {
    create?: XOR<RippleActivityCreateWithoutRippleInput, RippleActivityUncheckedCreateWithoutRippleInput> | RippleActivityCreateWithoutRippleInput[] | RippleActivityUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: RippleActivityCreateOrConnectWithoutRippleInput | RippleActivityCreateOrConnectWithoutRippleInput[]
    createMany?: RippleActivityCreateManyRippleInputEnvelope
    connect?: RippleActivityWhereUniqueInput | RippleActivityWhereUniqueInput[]
  }

  export type RippleSummaryUncheckedCreateNestedOneWithoutRippleInput = {
    create?: XOR<RippleSummaryCreateWithoutRippleInput, RippleSummaryUncheckedCreateWithoutRippleInput>
    connectOrCreate?: RippleSummaryCreateOrConnectWithoutRippleInput
    connect?: RippleSummaryWhereUniqueInput
  }

  export type WaveUpdateOneRequiredWithoutRipplesNestedInput = {
    create?: XOR<WaveCreateWithoutRipplesInput, WaveUncheckedCreateWithoutRipplesInput>
    connectOrCreate?: WaveCreateOrConnectWithoutRipplesInput
    upsert?: WaveUpsertWithoutRipplesInput
    connect?: WaveWhereUniqueInput
    update?: XOR<XOR<WaveUpdateToOneWithWhereWithoutRipplesInput, WaveUpdateWithoutRipplesInput>, WaveUncheckedUpdateWithoutRipplesInput>
  }

  export type MicroActionUpdateManyWithoutRippleNestedInput = {
    create?: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput> | MicroActionCreateWithoutRippleInput[] | MicroActionUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutRippleInput | MicroActionCreateOrConnectWithoutRippleInput[]
    upsert?: MicroActionUpsertWithWhereUniqueWithoutRippleInput | MicroActionUpsertWithWhereUniqueWithoutRippleInput[]
    createMany?: MicroActionCreateManyRippleInputEnvelope
    set?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    disconnect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    delete?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    update?: MicroActionUpdateWithWhereUniqueWithoutRippleInput | MicroActionUpdateWithWhereUniqueWithoutRippleInput[]
    updateMany?: MicroActionUpdateManyWithWhereWithoutRippleInput | MicroActionUpdateManyWithWhereWithoutRippleInput[]
    deleteMany?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
  }

  export type UserRippleUpdateManyWithoutRippleNestedInput = {
    create?: XOR<UserRippleCreateWithoutRippleInput, UserRippleUncheckedCreateWithoutRippleInput> | UserRippleCreateWithoutRippleInput[] | UserRippleUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: UserRippleCreateOrConnectWithoutRippleInput | UserRippleCreateOrConnectWithoutRippleInput[]
    upsert?: UserRippleUpsertWithWhereUniqueWithoutRippleInput | UserRippleUpsertWithWhereUniqueWithoutRippleInput[]
    createMany?: UserRippleCreateManyRippleInputEnvelope
    set?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    disconnect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    delete?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    connect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    update?: UserRippleUpdateWithWhereUniqueWithoutRippleInput | UserRippleUpdateWithWhereUniqueWithoutRippleInput[]
    updateMany?: UserRippleUpdateManyWithWhereWithoutRippleInput | UserRippleUpdateManyWithWhereWithoutRippleInput[]
    deleteMany?: UserRippleScalarWhereInput | UserRippleScalarWhereInput[]
  }

  export type ActionLogUpdateManyWithoutRippleNestedInput = {
    create?: XOR<ActionLogCreateWithoutRippleInput, ActionLogUncheckedCreateWithoutRippleInput> | ActionLogCreateWithoutRippleInput[] | ActionLogUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutRippleInput | ActionLogCreateOrConnectWithoutRippleInput[]
    upsert?: ActionLogUpsertWithWhereUniqueWithoutRippleInput | ActionLogUpsertWithWhereUniqueWithoutRippleInput[]
    createMany?: ActionLogCreateManyRippleInputEnvelope
    set?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    disconnect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    delete?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    update?: ActionLogUpdateWithWhereUniqueWithoutRippleInput | ActionLogUpdateWithWhereUniqueWithoutRippleInput[]
    updateMany?: ActionLogUpdateManyWithWhereWithoutRippleInput | ActionLogUpdateManyWithWhereWithoutRippleInput[]
    deleteMany?: ActionLogScalarWhereInput | ActionLogScalarWhereInput[]
  }

  export type RippleActivityUpdateManyWithoutRippleNestedInput = {
    create?: XOR<RippleActivityCreateWithoutRippleInput, RippleActivityUncheckedCreateWithoutRippleInput> | RippleActivityCreateWithoutRippleInput[] | RippleActivityUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: RippleActivityCreateOrConnectWithoutRippleInput | RippleActivityCreateOrConnectWithoutRippleInput[]
    upsert?: RippleActivityUpsertWithWhereUniqueWithoutRippleInput | RippleActivityUpsertWithWhereUniqueWithoutRippleInput[]
    createMany?: RippleActivityCreateManyRippleInputEnvelope
    set?: RippleActivityWhereUniqueInput | RippleActivityWhereUniqueInput[]
    disconnect?: RippleActivityWhereUniqueInput | RippleActivityWhereUniqueInput[]
    delete?: RippleActivityWhereUniqueInput | RippleActivityWhereUniqueInput[]
    connect?: RippleActivityWhereUniqueInput | RippleActivityWhereUniqueInput[]
    update?: RippleActivityUpdateWithWhereUniqueWithoutRippleInput | RippleActivityUpdateWithWhereUniqueWithoutRippleInput[]
    updateMany?: RippleActivityUpdateManyWithWhereWithoutRippleInput | RippleActivityUpdateManyWithWhereWithoutRippleInput[]
    deleteMany?: RippleActivityScalarWhereInput | RippleActivityScalarWhereInput[]
  }

  export type RippleSummaryUpdateOneWithoutRippleNestedInput = {
    create?: XOR<RippleSummaryCreateWithoutRippleInput, RippleSummaryUncheckedCreateWithoutRippleInput>
    connectOrCreate?: RippleSummaryCreateOrConnectWithoutRippleInput
    upsert?: RippleSummaryUpsertWithoutRippleInput
    disconnect?: RippleSummaryWhereInput | boolean
    delete?: RippleSummaryWhereInput | boolean
    connect?: RippleSummaryWhereUniqueInput
    update?: XOR<XOR<RippleSummaryUpdateToOneWithWhereWithoutRippleInput, RippleSummaryUpdateWithoutRippleInput>, RippleSummaryUncheckedUpdateWithoutRippleInput>
  }

  export type MicroActionUncheckedUpdateManyWithoutRippleNestedInput = {
    create?: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput> | MicroActionCreateWithoutRippleInput[] | MicroActionUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: MicroActionCreateOrConnectWithoutRippleInput | MicroActionCreateOrConnectWithoutRippleInput[]
    upsert?: MicroActionUpsertWithWhereUniqueWithoutRippleInput | MicroActionUpsertWithWhereUniqueWithoutRippleInput[]
    createMany?: MicroActionCreateManyRippleInputEnvelope
    set?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    disconnect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    delete?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    connect?: MicroActionWhereUniqueInput | MicroActionWhereUniqueInput[]
    update?: MicroActionUpdateWithWhereUniqueWithoutRippleInput | MicroActionUpdateWithWhereUniqueWithoutRippleInput[]
    updateMany?: MicroActionUpdateManyWithWhereWithoutRippleInput | MicroActionUpdateManyWithWhereWithoutRippleInput[]
    deleteMany?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
  }

  export type UserRippleUncheckedUpdateManyWithoutRippleNestedInput = {
    create?: XOR<UserRippleCreateWithoutRippleInput, UserRippleUncheckedCreateWithoutRippleInput> | UserRippleCreateWithoutRippleInput[] | UserRippleUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: UserRippleCreateOrConnectWithoutRippleInput | UserRippleCreateOrConnectWithoutRippleInput[]
    upsert?: UserRippleUpsertWithWhereUniqueWithoutRippleInput | UserRippleUpsertWithWhereUniqueWithoutRippleInput[]
    createMany?: UserRippleCreateManyRippleInputEnvelope
    set?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    disconnect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    delete?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    connect?: UserRippleWhereUniqueInput | UserRippleWhereUniqueInput[]
    update?: UserRippleUpdateWithWhereUniqueWithoutRippleInput | UserRippleUpdateWithWhereUniqueWithoutRippleInput[]
    updateMany?: UserRippleUpdateManyWithWhereWithoutRippleInput | UserRippleUpdateManyWithWhereWithoutRippleInput[]
    deleteMany?: UserRippleScalarWhereInput | UserRippleScalarWhereInput[]
  }

  export type ActionLogUncheckedUpdateManyWithoutRippleNestedInput = {
    create?: XOR<ActionLogCreateWithoutRippleInput, ActionLogUncheckedCreateWithoutRippleInput> | ActionLogCreateWithoutRippleInput[] | ActionLogUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutRippleInput | ActionLogCreateOrConnectWithoutRippleInput[]
    upsert?: ActionLogUpsertWithWhereUniqueWithoutRippleInput | ActionLogUpsertWithWhereUniqueWithoutRippleInput[]
    createMany?: ActionLogCreateManyRippleInputEnvelope
    set?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    disconnect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    delete?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    update?: ActionLogUpdateWithWhereUniqueWithoutRippleInput | ActionLogUpdateWithWhereUniqueWithoutRippleInput[]
    updateMany?: ActionLogUpdateManyWithWhereWithoutRippleInput | ActionLogUpdateManyWithWhereWithoutRippleInput[]
    deleteMany?: ActionLogScalarWhereInput | ActionLogScalarWhereInput[]
  }

  export type RippleActivityUncheckedUpdateManyWithoutRippleNestedInput = {
    create?: XOR<RippleActivityCreateWithoutRippleInput, RippleActivityUncheckedCreateWithoutRippleInput> | RippleActivityCreateWithoutRippleInput[] | RippleActivityUncheckedCreateWithoutRippleInput[]
    connectOrCreate?: RippleActivityCreateOrConnectWithoutRippleInput | RippleActivityCreateOrConnectWithoutRippleInput[]
    upsert?: RippleActivityUpsertWithWhereUniqueWithoutRippleInput | RippleActivityUpsertWithWhereUniqueWithoutRippleInput[]
    createMany?: RippleActivityCreateManyRippleInputEnvelope
    set?: RippleActivityWhereUniqueInput | RippleActivityWhereUniqueInput[]
    disconnect?: RippleActivityWhereUniqueInput | RippleActivityWhereUniqueInput[]
    delete?: RippleActivityWhereUniqueInput | RippleActivityWhereUniqueInput[]
    connect?: RippleActivityWhereUniqueInput | RippleActivityWhereUniqueInput[]
    update?: RippleActivityUpdateWithWhereUniqueWithoutRippleInput | RippleActivityUpdateWithWhereUniqueWithoutRippleInput[]
    updateMany?: RippleActivityUpdateManyWithWhereWithoutRippleInput | RippleActivityUpdateManyWithWhereWithoutRippleInput[]
    deleteMany?: RippleActivityScalarWhereInput | RippleActivityScalarWhereInput[]
  }

  export type RippleSummaryUncheckedUpdateOneWithoutRippleNestedInput = {
    create?: XOR<RippleSummaryCreateWithoutRippleInput, RippleSummaryUncheckedCreateWithoutRippleInput>
    connectOrCreate?: RippleSummaryCreateOrConnectWithoutRippleInput
    upsert?: RippleSummaryUpsertWithoutRippleInput
    disconnect?: RippleSummaryWhereInput | boolean
    delete?: RippleSummaryWhereInput | boolean
    connect?: RippleSummaryWhereUniqueInput
    update?: XOR<XOR<RippleSummaryUpdateToOneWithWhereWithoutRippleInput, RippleSummaryUpdateWithoutRippleInput>, RippleSummaryUncheckedUpdateWithoutRippleInput>
  }

  export type RippleCreateNestedOneWithoutMicroActionsInput = {
    create?: XOR<RippleCreateWithoutMicroActionsInput, RippleUncheckedCreateWithoutMicroActionsInput>
    connectOrCreate?: RippleCreateOrConnectWithoutMicroActionsInput
    connect?: RippleWhereUniqueInput
  }

  export type WaveCreateNestedOneWithoutMicroActionsInput = {
    create?: XOR<WaveCreateWithoutMicroActionsInput, WaveUncheckedCreateWithoutMicroActionsInput>
    connectOrCreate?: WaveCreateOrConnectWithoutMicroActionsInput
    connect?: WaveWhereUniqueInput
  }

  export type TemplateCreateNestedOneWithoutMicroActionsInput = {
    create?: XOR<TemplateCreateWithoutMicroActionsInput, TemplateUncheckedCreateWithoutMicroActionsInput>
    connectOrCreate?: TemplateCreateOrConnectWithoutMicroActionsInput
    connect?: TemplateWhereUniqueInput
  }

  export type ActionLogCreateNestedManyWithoutMicroInput = {
    create?: XOR<ActionLogCreateWithoutMicroInput, ActionLogUncheckedCreateWithoutMicroInput> | ActionLogCreateWithoutMicroInput[] | ActionLogUncheckedCreateWithoutMicroInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutMicroInput | ActionLogCreateOrConnectWithoutMicroInput[]
    createMany?: ActionLogCreateManyMicroInputEnvelope
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
  }

  export type WaveBucketCreateNestedOneWithoutMicroActionsInput = {
    create?: XOR<WaveBucketCreateWithoutMicroActionsInput, WaveBucketUncheckedCreateWithoutMicroActionsInput>
    connectOrCreate?: WaveBucketCreateOrConnectWithoutMicroActionsInput
    connect?: WaveBucketWhereUniqueInput
  }

  export type ActionLogUncheckedCreateNestedManyWithoutMicroInput = {
    create?: XOR<ActionLogCreateWithoutMicroInput, ActionLogUncheckedCreateWithoutMicroInput> | ActionLogCreateWithoutMicroInput[] | ActionLogUncheckedCreateWithoutMicroInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutMicroInput | ActionLogCreateOrConnectWithoutMicroInput[]
    createMany?: ActionLogCreateManyMicroInputEnvelope
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
  }

  export type RippleUpdateOneRequiredWithoutMicroActionsNestedInput = {
    create?: XOR<RippleCreateWithoutMicroActionsInput, RippleUncheckedCreateWithoutMicroActionsInput>
    connectOrCreate?: RippleCreateOrConnectWithoutMicroActionsInput
    upsert?: RippleUpsertWithoutMicroActionsInput
    connect?: RippleWhereUniqueInput
    update?: XOR<XOR<RippleUpdateToOneWithWhereWithoutMicroActionsInput, RippleUpdateWithoutMicroActionsInput>, RippleUncheckedUpdateWithoutMicroActionsInput>
  }

  export type WaveUpdateOneRequiredWithoutMicroActionsNestedInput = {
    create?: XOR<WaveCreateWithoutMicroActionsInput, WaveUncheckedCreateWithoutMicroActionsInput>
    connectOrCreate?: WaveCreateOrConnectWithoutMicroActionsInput
    upsert?: WaveUpsertWithoutMicroActionsInput
    connect?: WaveWhereUniqueInput
    update?: XOR<XOR<WaveUpdateToOneWithWhereWithoutMicroActionsInput, WaveUpdateWithoutMicroActionsInput>, WaveUncheckedUpdateWithoutMicroActionsInput>
  }

  export type TemplateUpdateOneWithoutMicroActionsNestedInput = {
    create?: XOR<TemplateCreateWithoutMicroActionsInput, TemplateUncheckedCreateWithoutMicroActionsInput>
    connectOrCreate?: TemplateCreateOrConnectWithoutMicroActionsInput
    upsert?: TemplateUpsertWithoutMicroActionsInput
    disconnect?: TemplateWhereInput | boolean
    delete?: TemplateWhereInput | boolean
    connect?: TemplateWhereUniqueInput
    update?: XOR<XOR<TemplateUpdateToOneWithWhereWithoutMicroActionsInput, TemplateUpdateWithoutMicroActionsInput>, TemplateUncheckedUpdateWithoutMicroActionsInput>
  }

  export type ActionLogUpdateManyWithoutMicroNestedInput = {
    create?: XOR<ActionLogCreateWithoutMicroInput, ActionLogUncheckedCreateWithoutMicroInput> | ActionLogCreateWithoutMicroInput[] | ActionLogUncheckedCreateWithoutMicroInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutMicroInput | ActionLogCreateOrConnectWithoutMicroInput[]
    upsert?: ActionLogUpsertWithWhereUniqueWithoutMicroInput | ActionLogUpsertWithWhereUniqueWithoutMicroInput[]
    createMany?: ActionLogCreateManyMicroInputEnvelope
    set?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    disconnect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    delete?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    update?: ActionLogUpdateWithWhereUniqueWithoutMicroInput | ActionLogUpdateWithWhereUniqueWithoutMicroInput[]
    updateMany?: ActionLogUpdateManyWithWhereWithoutMicroInput | ActionLogUpdateManyWithWhereWithoutMicroInput[]
    deleteMany?: ActionLogScalarWhereInput | ActionLogScalarWhereInput[]
  }

  export type WaveBucketUpdateOneRequiredWithoutMicroActionsNestedInput = {
    create?: XOR<WaveBucketCreateWithoutMicroActionsInput, WaveBucketUncheckedCreateWithoutMicroActionsInput>
    connectOrCreate?: WaveBucketCreateOrConnectWithoutMicroActionsInput
    upsert?: WaveBucketUpsertWithoutMicroActionsInput
    connect?: WaveBucketWhereUniqueInput
    update?: XOR<XOR<WaveBucketUpdateToOneWithWhereWithoutMicroActionsInput, WaveBucketUpdateWithoutMicroActionsInput>, WaveBucketUncheckedUpdateWithoutMicroActionsInput>
  }

  export type ActionLogUncheckedUpdateManyWithoutMicroNestedInput = {
    create?: XOR<ActionLogCreateWithoutMicroInput, ActionLogUncheckedCreateWithoutMicroInput> | ActionLogCreateWithoutMicroInput[] | ActionLogUncheckedCreateWithoutMicroInput[]
    connectOrCreate?: ActionLogCreateOrConnectWithoutMicroInput | ActionLogCreateOrConnectWithoutMicroInput[]
    upsert?: ActionLogUpsertWithWhereUniqueWithoutMicroInput | ActionLogUpsertWithWhereUniqueWithoutMicroInput[]
    createMany?: ActionLogCreateManyMicroInputEnvelope
    set?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    disconnect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    delete?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    connect?: ActionLogWhereUniqueInput | ActionLogWhereUniqueInput[]
    update?: ActionLogUpdateWithWhereUniqueWithoutMicroInput | ActionLogUpdateWithWhereUniqueWithoutMicroInput[]
    updateMany?: ActionLogUpdateManyWithWhereWithoutMicroInput | ActionLogUpdateManyWithWhereWithoutMicroInput[]
    deleteMany?: ActionLogScalarWhereInput | ActionLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutActionLogsInput = {
    create?: XOR<UserCreateWithoutActionLogsInput, UserUncheckedCreateWithoutActionLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActionLogsInput
    connect?: UserWhereUniqueInput
  }

  export type MicroActionCreateNestedOneWithoutActionLogsInput = {
    create?: XOR<MicroActionCreateWithoutActionLogsInput, MicroActionUncheckedCreateWithoutActionLogsInput>
    connectOrCreate?: MicroActionCreateOrConnectWithoutActionLogsInput
    connect?: MicroActionWhereUniqueInput
  }

  export type RippleCreateNestedOneWithoutActionLogsInput = {
    create?: XOR<RippleCreateWithoutActionLogsInput, RippleUncheckedCreateWithoutActionLogsInput>
    connectOrCreate?: RippleCreateOrConnectWithoutActionLogsInput
    connect?: RippleWhereUniqueInput
  }

  export type WaveCreateNestedOneWithoutActionLogsInput = {
    create?: XOR<WaveCreateWithoutActionLogsInput, WaveUncheckedCreateWithoutActionLogsInput>
    connectOrCreate?: WaveCreateOrConnectWithoutActionLogsInput
    connect?: WaveWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActionLogsNestedInput = {
    create?: XOR<UserCreateWithoutActionLogsInput, UserUncheckedCreateWithoutActionLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActionLogsInput
    upsert?: UserUpsertWithoutActionLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActionLogsInput, UserUpdateWithoutActionLogsInput>, UserUncheckedUpdateWithoutActionLogsInput>
  }

  export type MicroActionUpdateOneRequiredWithoutActionLogsNestedInput = {
    create?: XOR<MicroActionCreateWithoutActionLogsInput, MicroActionUncheckedCreateWithoutActionLogsInput>
    connectOrCreate?: MicroActionCreateOrConnectWithoutActionLogsInput
    upsert?: MicroActionUpsertWithoutActionLogsInput
    connect?: MicroActionWhereUniqueInput
    update?: XOR<XOR<MicroActionUpdateToOneWithWhereWithoutActionLogsInput, MicroActionUpdateWithoutActionLogsInput>, MicroActionUncheckedUpdateWithoutActionLogsInput>
  }

  export type RippleUpdateOneRequiredWithoutActionLogsNestedInput = {
    create?: XOR<RippleCreateWithoutActionLogsInput, RippleUncheckedCreateWithoutActionLogsInput>
    connectOrCreate?: RippleCreateOrConnectWithoutActionLogsInput
    upsert?: RippleUpsertWithoutActionLogsInput
    connect?: RippleWhereUniqueInput
    update?: XOR<XOR<RippleUpdateToOneWithWhereWithoutActionLogsInput, RippleUpdateWithoutActionLogsInput>, RippleUncheckedUpdateWithoutActionLogsInput>
  }

  export type WaveUpdateOneRequiredWithoutActionLogsNestedInput = {
    create?: XOR<WaveCreateWithoutActionLogsInput, WaveUncheckedCreateWithoutActionLogsInput>
    connectOrCreate?: WaveCreateOrConnectWithoutActionLogsInput
    upsert?: WaveUpsertWithoutActionLogsInput
    connect?: WaveWhereUniqueInput
    update?: XOR<XOR<WaveUpdateToOneWithWhereWithoutActionLogsInput, WaveUpdateWithoutActionLogsInput>, WaveUncheckedUpdateWithoutActionLogsInput>
  }

  export type WaveCreateNestedOneWithoutPhrasesInput = {
    create?: XOR<WaveCreateWithoutPhrasesInput, WaveUncheckedCreateWithoutPhrasesInput>
    connectOrCreate?: WaveCreateOrConnectWithoutPhrasesInput
    connect?: WaveWhereUniqueInput
  }

  export type WaveUpdateOneWithoutPhrasesNestedInput = {
    create?: XOR<WaveCreateWithoutPhrasesInput, WaveUncheckedCreateWithoutPhrasesInput>
    connectOrCreate?: WaveCreateOrConnectWithoutPhrasesInput
    upsert?: WaveUpsertWithoutPhrasesInput
    disconnect?: WaveWhereInput | boolean
    delete?: WaveWhereInput | boolean
    connect?: WaveWhereUniqueInput
    update?: XOR<XOR<WaveUpdateToOneWithWhereWithoutPhrasesInput, WaveUpdateWithoutPhrasesInput>, WaveUncheckedUpdateWithoutPhrasesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumTemplateStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TemplateStatus | EnumTemplateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TemplateStatus[] | ListEnumTemplateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TemplateStatus[] | ListEnumTemplateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTemplateStatusFilter<$PrismaModel> | $Enums.TemplateStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumTemplateStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TemplateStatus | EnumTemplateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TemplateStatus[] | ListEnumTemplateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TemplateStatus[] | ListEnumTemplateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTemplateStatusWithAggregatesFilter<$PrismaModel> | $Enums.TemplateStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTemplateStatusFilter<$PrismaModel>
    _max?: NestedEnumTemplateStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type WaveCreateWithoutWaveBucketsInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleCreateNestedManyWithoutWaveInput
    actionLogs?: ActionLogCreateNestedManyWithoutWaveInput
    templates?: TemplateCreateNestedManyWithoutWaveInput
    microActions?: MicroActionCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapCreateNestedManyWithoutWaveInput
  }

  export type WaveUncheckedCreateWithoutWaveBucketsInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleUncheckedCreateNestedManyWithoutWaveInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutWaveInput
    templates?: TemplateUncheckedCreateNestedManyWithoutWaveInput
    microActions?: MicroActionUncheckedCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapUncheckedCreateNestedManyWithoutWaveInput
  }

  export type WaveCreateOrConnectWithoutWaveBucketsInput = {
    where: WaveWhereUniqueInput
    create: XOR<WaveCreateWithoutWaveBucketsInput, WaveUncheckedCreateWithoutWaveBucketsInput>
  }

  export type TemplateCreateWithoutWaveBucketInput = {
    id?: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    wave: WaveCreateNestedOneWithoutTemplatesInput
    microActions?: MicroActionCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUncheckedCreateWithoutWaveBucketInput = {
    id?: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    microActions?: MicroActionUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TemplateCreateOrConnectWithoutWaveBucketInput = {
    where: TemplateWhereUniqueInput
    create: XOR<TemplateCreateWithoutWaveBucketInput, TemplateUncheckedCreateWithoutWaveBucketInput>
  }

  export type TemplateCreateManyWaveBucketInputEnvelope = {
    data: TemplateCreateManyWaveBucketInput | TemplateCreateManyWaveBucketInput[]
    skipDuplicates?: boolean
  }

  export type MicroActionCreateWithoutWaveBucketInput = {
    id?: string
    text: string
    status?: string
    createdBy?: string
    createdAt?: Date | string
    ripple: RippleCreateNestedOneWithoutMicroActionsInput
    wave: WaveCreateNestedOneWithoutMicroActionsInput
    template?: TemplateCreateNestedOneWithoutMicroActionsInput
    actionLogs?: ActionLogCreateNestedManyWithoutMicroInput
  }

  export type MicroActionUncheckedCreateWithoutWaveBucketInput = {
    id?: string
    rippleId: string
    text: string
    status?: string
    createdBy?: string
    templateId?: string | null
    createdAt?: Date | string
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutMicroInput
  }

  export type MicroActionCreateOrConnectWithoutWaveBucketInput = {
    where: MicroActionWhereUniqueInput
    create: XOR<MicroActionCreateWithoutWaveBucketInput, MicroActionUncheckedCreateWithoutWaveBucketInput>
  }

  export type MicroActionCreateManyWaveBucketInputEnvelope = {
    data: MicroActionCreateManyWaveBucketInput | MicroActionCreateManyWaveBucketInput[]
    skipDuplicates?: boolean
  }

  export type WaveUpsertWithoutWaveBucketsInput = {
    update: XOR<WaveUpdateWithoutWaveBucketsInput, WaveUncheckedUpdateWithoutWaveBucketsInput>
    create: XOR<WaveCreateWithoutWaveBucketsInput, WaveUncheckedCreateWithoutWaveBucketsInput>
    where?: WaveWhereInput
  }

  export type WaveUpdateToOneWithWhereWithoutWaveBucketsInput = {
    where?: WaveWhereInput
    data: XOR<WaveUpdateWithoutWaveBucketsInput, WaveUncheckedUpdateWithoutWaveBucketsInput>
  }

  export type WaveUpdateWithoutWaveBucketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUpdateManyWithoutWaveNestedInput
    actionLogs?: ActionLogUpdateManyWithoutWaveNestedInput
    templates?: TemplateUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUpdateManyWithoutWaveNestedInput
  }

  export type WaveUncheckedUpdateWithoutWaveBucketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUncheckedUpdateManyWithoutWaveNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutWaveNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUncheckedUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUncheckedUpdateManyWithoutWaveNestedInput
  }

  export type TemplateUpsertWithWhereUniqueWithoutWaveBucketInput = {
    where: TemplateWhereUniqueInput
    update: XOR<TemplateUpdateWithoutWaveBucketInput, TemplateUncheckedUpdateWithoutWaveBucketInput>
    create: XOR<TemplateCreateWithoutWaveBucketInput, TemplateUncheckedCreateWithoutWaveBucketInput>
  }

  export type TemplateUpdateWithWhereUniqueWithoutWaveBucketInput = {
    where: TemplateWhereUniqueInput
    data: XOR<TemplateUpdateWithoutWaveBucketInput, TemplateUncheckedUpdateWithoutWaveBucketInput>
  }

  export type TemplateUpdateManyWithWhereWithoutWaveBucketInput = {
    where: TemplateScalarWhereInput
    data: XOR<TemplateUpdateManyMutationInput, TemplateUncheckedUpdateManyWithoutWaveBucketInput>
  }

  export type TemplateScalarWhereInput = {
    AND?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
    OR?: TemplateScalarWhereInput[]
    NOT?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
    id?: StringFilter<"Template"> | string
    waveId?: StringFilter<"Template"> | string
    bucket?: StringFilter<"Template"> | string
    textPattern?: StringFilter<"Template"> | string
    modifiersJson?: JsonFilter<"Template">
    status?: EnumTemplateStatusFilter<"Template"> | $Enums.TemplateStatus
    createdAt?: DateTimeFilter<"Template"> | Date | string
    updatedAt?: DateTimeFilter<"Template"> | Date | string
  }

  export type MicroActionUpsertWithWhereUniqueWithoutWaveBucketInput = {
    where: MicroActionWhereUniqueInput
    update: XOR<MicroActionUpdateWithoutWaveBucketInput, MicroActionUncheckedUpdateWithoutWaveBucketInput>
    create: XOR<MicroActionCreateWithoutWaveBucketInput, MicroActionUncheckedCreateWithoutWaveBucketInput>
  }

  export type MicroActionUpdateWithWhereUniqueWithoutWaveBucketInput = {
    where: MicroActionWhereUniqueInput
    data: XOR<MicroActionUpdateWithoutWaveBucketInput, MicroActionUncheckedUpdateWithoutWaveBucketInput>
  }

  export type MicroActionUpdateManyWithWhereWithoutWaveBucketInput = {
    where: MicroActionScalarWhereInput
    data: XOR<MicroActionUpdateManyMutationInput, MicroActionUncheckedUpdateManyWithoutWaveBucketInput>
  }

  export type MicroActionScalarWhereInput = {
    AND?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
    OR?: MicroActionScalarWhereInput[]
    NOT?: MicroActionScalarWhereInput | MicroActionScalarWhereInput[]
    id?: StringFilter<"MicroAction"> | string
    rippleId?: StringFilter<"MicroAction"> | string
    text?: StringFilter<"MicroAction"> | string
    bucket?: StringFilter<"MicroAction"> | string
    status?: StringFilter<"MicroAction"> | string
    createdBy?: StringFilter<"MicroAction"> | string
    waveId?: StringFilter<"MicroAction"> | string
    templateId?: StringNullableFilter<"MicroAction"> | string | null
    createdAt?: DateTimeFilter<"MicroAction"> | Date | string
  }

  export type WaveCreateWithoutTemplatesInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleCreateNestedManyWithoutWaveInput
    actionLogs?: ActionLogCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketCreateNestedManyWithoutWaveInput
    microActions?: MicroActionCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapCreateNestedManyWithoutWaveInput
  }

  export type WaveUncheckedCreateWithoutTemplatesInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleUncheckedCreateNestedManyWithoutWaveInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketUncheckedCreateNestedManyWithoutWaveInput
    microActions?: MicroActionUncheckedCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapUncheckedCreateNestedManyWithoutWaveInput
  }

  export type WaveCreateOrConnectWithoutTemplatesInput = {
    where: WaveWhereUniqueInput
    create: XOR<WaveCreateWithoutTemplatesInput, WaveUncheckedCreateWithoutTemplatesInput>
  }

  export type WaveBucketCreateWithoutTemplatesInput = {
    name: string
    weight?: number
    wave: WaveCreateNestedOneWithoutWaveBucketsInput
    microActions?: MicroActionCreateNestedManyWithoutWaveBucketInput
  }

  export type WaveBucketUncheckedCreateWithoutTemplatesInput = {
    waveId: string
    name: string
    weight?: number
    microActions?: MicroActionUncheckedCreateNestedManyWithoutWaveBucketInput
  }

  export type WaveBucketCreateOrConnectWithoutTemplatesInput = {
    where: WaveBucketWhereUniqueInput
    create: XOR<WaveBucketCreateWithoutTemplatesInput, WaveBucketUncheckedCreateWithoutTemplatesInput>
  }

  export type MicroActionCreateWithoutTemplateInput = {
    id?: string
    text: string
    status?: string
    createdBy?: string
    createdAt?: Date | string
    ripple: RippleCreateNestedOneWithoutMicroActionsInput
    wave: WaveCreateNestedOneWithoutMicroActionsInput
    actionLogs?: ActionLogCreateNestedManyWithoutMicroInput
    waveBucket: WaveBucketCreateNestedOneWithoutMicroActionsInput
  }

  export type MicroActionUncheckedCreateWithoutTemplateInput = {
    id?: string
    rippleId: string
    text: string
    bucket: string
    status?: string
    createdBy?: string
    waveId: string
    createdAt?: Date | string
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutMicroInput
  }

  export type MicroActionCreateOrConnectWithoutTemplateInput = {
    where: MicroActionWhereUniqueInput
    create: XOR<MicroActionCreateWithoutTemplateInput, MicroActionUncheckedCreateWithoutTemplateInput>
  }

  export type MicroActionCreateManyTemplateInputEnvelope = {
    data: MicroActionCreateManyTemplateInput | MicroActionCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type WaveUpsertWithoutTemplatesInput = {
    update: XOR<WaveUpdateWithoutTemplatesInput, WaveUncheckedUpdateWithoutTemplatesInput>
    create: XOR<WaveCreateWithoutTemplatesInput, WaveUncheckedCreateWithoutTemplatesInput>
    where?: WaveWhereInput
  }

  export type WaveUpdateToOneWithWhereWithoutTemplatesInput = {
    where?: WaveWhereInput
    data: XOR<WaveUpdateWithoutTemplatesInput, WaveUncheckedUpdateWithoutTemplatesInput>
  }

  export type WaveUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUpdateManyWithoutWaveNestedInput
    actionLogs?: ActionLogUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUpdateManyWithoutWaveNestedInput
  }

  export type WaveUncheckedUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUncheckedUpdateManyWithoutWaveNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUncheckedUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUncheckedUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUncheckedUpdateManyWithoutWaveNestedInput
  }

  export type WaveBucketUpsertWithoutTemplatesInput = {
    update: XOR<WaveBucketUpdateWithoutTemplatesInput, WaveBucketUncheckedUpdateWithoutTemplatesInput>
    create: XOR<WaveBucketCreateWithoutTemplatesInput, WaveBucketUncheckedCreateWithoutTemplatesInput>
    where?: WaveBucketWhereInput
  }

  export type WaveBucketUpdateToOneWithWhereWithoutTemplatesInput = {
    where?: WaveBucketWhereInput
    data: XOR<WaveBucketUpdateWithoutTemplatesInput, WaveBucketUncheckedUpdateWithoutTemplatesInput>
  }

  export type WaveBucketUpdateWithoutTemplatesInput = {
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    wave?: WaveUpdateOneRequiredWithoutWaveBucketsNestedInput
    microActions?: MicroActionUpdateManyWithoutWaveBucketNestedInput
  }

  export type WaveBucketUncheckedUpdateWithoutTemplatesInput = {
    waveId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    microActions?: MicroActionUncheckedUpdateManyWithoutWaveBucketNestedInput
  }

  export type MicroActionUpsertWithWhereUniqueWithoutTemplateInput = {
    where: MicroActionWhereUniqueInput
    update: XOR<MicroActionUpdateWithoutTemplateInput, MicroActionUncheckedUpdateWithoutTemplateInput>
    create: XOR<MicroActionCreateWithoutTemplateInput, MicroActionUncheckedCreateWithoutTemplateInput>
  }

  export type MicroActionUpdateWithWhereUniqueWithoutTemplateInput = {
    where: MicroActionWhereUniqueInput
    data: XOR<MicroActionUpdateWithoutTemplateInput, MicroActionUncheckedUpdateWithoutTemplateInput>
  }

  export type MicroActionUpdateManyWithWhereWithoutTemplateInput = {
    where: MicroActionScalarWhereInput
    data: XOR<MicroActionUpdateManyMutationInput, MicroActionUncheckedUpdateManyWithoutTemplateInput>
  }

  export type UserRippleCreateWithoutUserInput = {
    id?: string
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: Date | string
    ripple: RippleCreateNestedOneWithoutMembershipsInput
  }

  export type UserRippleUncheckedCreateWithoutUserInput = {
    id?: string
    rippleId: string
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type UserRippleCreateOrConnectWithoutUserInput = {
    where: UserRippleWhereUniqueInput
    create: XOR<UserRippleCreateWithoutUserInput, UserRippleUncheckedCreateWithoutUserInput>
  }

  export type UserRippleCreateManyUserInputEnvelope = {
    data: UserRippleCreateManyUserInput | UserRippleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ActionLogCreateWithoutUserInput = {
    id?: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
    micro: MicroActionCreateNestedOneWithoutActionLogsInput
    ripple: RippleCreateNestedOneWithoutActionLogsInput
    wave: WaveCreateNestedOneWithoutActionLogsInput
  }

  export type ActionLogUncheckedCreateWithoutUserInput = {
    id?: string
    microActionId: string
    rippleId: string
    waveId: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
  }

  export type ActionLogCreateOrConnectWithoutUserInput = {
    where: ActionLogWhereUniqueInput
    create: XOR<ActionLogCreateWithoutUserInput, ActionLogUncheckedCreateWithoutUserInput>
  }

  export type ActionLogCreateManyUserInputEnvelope = {
    data: ActionLogCreateManyUserInput | ActionLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRippleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRippleWhereUniqueInput
    update: XOR<UserRippleUpdateWithoutUserInput, UserRippleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRippleCreateWithoutUserInput, UserRippleUncheckedCreateWithoutUserInput>
  }

  export type UserRippleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRippleWhereUniqueInput
    data: XOR<UserRippleUpdateWithoutUserInput, UserRippleUncheckedUpdateWithoutUserInput>
  }

  export type UserRippleUpdateManyWithWhereWithoutUserInput = {
    where: UserRippleScalarWhereInput
    data: XOR<UserRippleUpdateManyMutationInput, UserRippleUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRippleScalarWhereInput = {
    AND?: UserRippleScalarWhereInput | UserRippleScalarWhereInput[]
    OR?: UserRippleScalarWhereInput[]
    NOT?: UserRippleScalarWhereInput | UserRippleScalarWhereInput[]
    id?: StringFilter<"UserRipple"> | string
    userId?: StringFilter<"UserRipple"> | string
    rippleId?: StringFilter<"UserRipple"> | string
    isActive?: BoolFilter<"UserRipple"> | boolean
    isPrimary?: BoolFilter<"UserRipple"> | boolean
    joinedAt?: DateTimeFilter<"UserRipple"> | Date | string
  }

  export type ActionLogUpsertWithWhereUniqueWithoutUserInput = {
    where: ActionLogWhereUniqueInput
    update: XOR<ActionLogUpdateWithoutUserInput, ActionLogUncheckedUpdateWithoutUserInput>
    create: XOR<ActionLogCreateWithoutUserInput, ActionLogUncheckedCreateWithoutUserInput>
  }

  export type ActionLogUpdateWithWhereUniqueWithoutUserInput = {
    where: ActionLogWhereUniqueInput
    data: XOR<ActionLogUpdateWithoutUserInput, ActionLogUncheckedUpdateWithoutUserInput>
  }

  export type ActionLogUpdateManyWithWhereWithoutUserInput = {
    where: ActionLogScalarWhereInput
    data: XOR<ActionLogUpdateManyMutationInput, ActionLogUncheckedUpdateManyWithoutUserInput>
  }

  export type ActionLogScalarWhereInput = {
    AND?: ActionLogScalarWhereInput | ActionLogScalarWhereInput[]
    OR?: ActionLogScalarWhereInput[]
    NOT?: ActionLogScalarWhereInput | ActionLogScalarWhereInput[]
    id?: StringFilter<"ActionLog"> | string
    userId?: StringFilter<"ActionLog"> | string
    microActionId?: StringFilter<"ActionLog"> | string
    rippleId?: StringFilter<"ActionLog"> | string
    waveId?: StringFilter<"ActionLog"> | string
    bucket?: StringFilter<"ActionLog"> | string
    createdAt?: DateTimeFilter<"ActionLog"> | Date | string
    city?: StringNullableFilter<"ActionLog"> | string | null
    noteText?: StringNullableFilter<"ActionLog"> | string | null
    shareAnon?: BoolFilter<"ActionLog"> | boolean
  }

  export type RippleCreateWithoutWaveInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    microActions?: MicroActionCreateNestedManyWithoutRippleInput
    memberships?: UserRippleCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryCreateNestedOneWithoutRippleInput
  }

  export type RippleUncheckedCreateWithoutWaveInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    microActions?: MicroActionUncheckedCreateNestedManyWithoutRippleInput
    memberships?: UserRippleUncheckedCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityUncheckedCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryUncheckedCreateNestedOneWithoutRippleInput
  }

  export type RippleCreateOrConnectWithoutWaveInput = {
    where: RippleWhereUniqueInput
    create: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput>
  }

  export type RippleCreateManyWaveInputEnvelope = {
    data: RippleCreateManyWaveInput | RippleCreateManyWaveInput[]
    skipDuplicates?: boolean
  }

  export type ActionLogCreateWithoutWaveInput = {
    id?: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
    user: UserCreateNestedOneWithoutActionLogsInput
    micro: MicroActionCreateNestedOneWithoutActionLogsInput
    ripple: RippleCreateNestedOneWithoutActionLogsInput
  }

  export type ActionLogUncheckedCreateWithoutWaveInput = {
    id?: string
    userId: string
    microActionId: string
    rippleId: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
  }

  export type ActionLogCreateOrConnectWithoutWaveInput = {
    where: ActionLogWhereUniqueInput
    create: XOR<ActionLogCreateWithoutWaveInput, ActionLogUncheckedCreateWithoutWaveInput>
  }

  export type ActionLogCreateManyWaveInputEnvelope = {
    data: ActionLogCreateManyWaveInput | ActionLogCreateManyWaveInput[]
    skipDuplicates?: boolean
  }

  export type WaveBucketCreateWithoutWaveInput = {
    name: string
    weight?: number
    templates?: TemplateCreateNestedManyWithoutWaveBucketInput
    microActions?: MicroActionCreateNestedManyWithoutWaveBucketInput
  }

  export type WaveBucketUncheckedCreateWithoutWaveInput = {
    name: string
    weight?: number
    templates?: TemplateUncheckedCreateNestedManyWithoutWaveBucketInput
    microActions?: MicroActionUncheckedCreateNestedManyWithoutWaveBucketInput
  }

  export type WaveBucketCreateOrConnectWithoutWaveInput = {
    where: WaveBucketWhereUniqueInput
    create: XOR<WaveBucketCreateWithoutWaveInput, WaveBucketUncheckedCreateWithoutWaveInput>
  }

  export type WaveBucketCreateManyWaveInputEnvelope = {
    data: WaveBucketCreateManyWaveInput | WaveBucketCreateManyWaveInput[]
    skipDuplicates?: boolean
  }

  export type TemplateCreateWithoutWaveInput = {
    id?: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    waveBucket: WaveBucketCreateNestedOneWithoutTemplatesInput
    microActions?: MicroActionCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUncheckedCreateWithoutWaveInput = {
    id?: string
    bucket: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    microActions?: MicroActionUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TemplateCreateOrConnectWithoutWaveInput = {
    where: TemplateWhereUniqueInput
    create: XOR<TemplateCreateWithoutWaveInput, TemplateUncheckedCreateWithoutWaveInput>
  }

  export type TemplateCreateManyWaveInputEnvelope = {
    data: TemplateCreateManyWaveInput | TemplateCreateManyWaveInput[]
    skipDuplicates?: boolean
  }

  export type MicroActionCreateWithoutWaveInput = {
    id?: string
    text: string
    status?: string
    createdBy?: string
    createdAt?: Date | string
    ripple: RippleCreateNestedOneWithoutMicroActionsInput
    template?: TemplateCreateNestedOneWithoutMicroActionsInput
    actionLogs?: ActionLogCreateNestedManyWithoutMicroInput
    waveBucket: WaveBucketCreateNestedOneWithoutMicroActionsInput
  }

  export type MicroActionUncheckedCreateWithoutWaveInput = {
    id?: string
    rippleId: string
    text: string
    bucket: string
    status?: string
    createdBy?: string
    templateId?: string | null
    createdAt?: Date | string
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutMicroInput
  }

  export type MicroActionCreateOrConnectWithoutWaveInput = {
    where: MicroActionWhereUniqueInput
    create: XOR<MicroActionCreateWithoutWaveInput, MicroActionUncheckedCreateWithoutWaveInput>
  }

  export type MicroActionCreateManyWaveInputEnvelope = {
    data: MicroActionCreateManyWaveInput | MicroActionCreateManyWaveInput[]
    skipDuplicates?: boolean
  }

  export type PhraseMapCreateWithoutWaveInput = {
    id?: string
    bucket: string
    phrase: string
    isActive?: boolean
    priority?: number
  }

  export type PhraseMapUncheckedCreateWithoutWaveInput = {
    id?: string
    bucket: string
    phrase: string
    isActive?: boolean
    priority?: number
  }

  export type PhraseMapCreateOrConnectWithoutWaveInput = {
    where: PhraseMapWhereUniqueInput
    create: XOR<PhraseMapCreateWithoutWaveInput, PhraseMapUncheckedCreateWithoutWaveInput>
  }

  export type PhraseMapCreateManyWaveInputEnvelope = {
    data: PhraseMapCreateManyWaveInput | PhraseMapCreateManyWaveInput[]
    skipDuplicates?: boolean
  }

  export type RippleUpsertWithWhereUniqueWithoutWaveInput = {
    where: RippleWhereUniqueInput
    update: XOR<RippleUpdateWithoutWaveInput, RippleUncheckedUpdateWithoutWaveInput>
    create: XOR<RippleCreateWithoutWaveInput, RippleUncheckedCreateWithoutWaveInput>
  }

  export type RippleUpdateWithWhereUniqueWithoutWaveInput = {
    where: RippleWhereUniqueInput
    data: XOR<RippleUpdateWithoutWaveInput, RippleUncheckedUpdateWithoutWaveInput>
  }

  export type RippleUpdateManyWithWhereWithoutWaveInput = {
    where: RippleScalarWhereInput
    data: XOR<RippleUpdateManyMutationInput, RippleUncheckedUpdateManyWithoutWaveInput>
  }

  export type RippleScalarWhereInput = {
    AND?: RippleScalarWhereInput | RippleScalarWhereInput[]
    OR?: RippleScalarWhereInput[]
    NOT?: RippleScalarWhereInput | RippleScalarWhereInput[]
    id?: StringFilter<"Ripple"> | string
    waveId?: StringFilter<"Ripple"> | string
    title?: StringFilter<"Ripple"> | string
    description?: StringNullableFilter<"Ripple"> | string | null
    createdBy?: StringFilter<"Ripple"> | string
    status?: StringFilter<"Ripple"> | string
    isStarter?: BoolFilter<"Ripple"> | boolean
    audience_noun?: StringNullableFilter<"Ripple"> | string | null
    context_label?: StringNullableFilter<"Ripple"> | string | null
    blurb_template?: StringNullableFilter<"Ripple"> | string | null
    default_bucket?: StringNullableFilter<"Ripple"> | string | null
  }

  export type ActionLogUpsertWithWhereUniqueWithoutWaveInput = {
    where: ActionLogWhereUniqueInput
    update: XOR<ActionLogUpdateWithoutWaveInput, ActionLogUncheckedUpdateWithoutWaveInput>
    create: XOR<ActionLogCreateWithoutWaveInput, ActionLogUncheckedCreateWithoutWaveInput>
  }

  export type ActionLogUpdateWithWhereUniqueWithoutWaveInput = {
    where: ActionLogWhereUniqueInput
    data: XOR<ActionLogUpdateWithoutWaveInput, ActionLogUncheckedUpdateWithoutWaveInput>
  }

  export type ActionLogUpdateManyWithWhereWithoutWaveInput = {
    where: ActionLogScalarWhereInput
    data: XOR<ActionLogUpdateManyMutationInput, ActionLogUncheckedUpdateManyWithoutWaveInput>
  }

  export type WaveBucketUpsertWithWhereUniqueWithoutWaveInput = {
    where: WaveBucketWhereUniqueInput
    update: XOR<WaveBucketUpdateWithoutWaveInput, WaveBucketUncheckedUpdateWithoutWaveInput>
    create: XOR<WaveBucketCreateWithoutWaveInput, WaveBucketUncheckedCreateWithoutWaveInput>
  }

  export type WaveBucketUpdateWithWhereUniqueWithoutWaveInput = {
    where: WaveBucketWhereUniqueInput
    data: XOR<WaveBucketUpdateWithoutWaveInput, WaveBucketUncheckedUpdateWithoutWaveInput>
  }

  export type WaveBucketUpdateManyWithWhereWithoutWaveInput = {
    where: WaveBucketScalarWhereInput
    data: XOR<WaveBucketUpdateManyMutationInput, WaveBucketUncheckedUpdateManyWithoutWaveInput>
  }

  export type WaveBucketScalarWhereInput = {
    AND?: WaveBucketScalarWhereInput | WaveBucketScalarWhereInput[]
    OR?: WaveBucketScalarWhereInput[]
    NOT?: WaveBucketScalarWhereInput | WaveBucketScalarWhereInput[]
    waveId?: StringFilter<"WaveBucket"> | string
    name?: StringFilter<"WaveBucket"> | string
    weight?: FloatFilter<"WaveBucket"> | number
  }

  export type TemplateUpsertWithWhereUniqueWithoutWaveInput = {
    where: TemplateWhereUniqueInput
    update: XOR<TemplateUpdateWithoutWaveInput, TemplateUncheckedUpdateWithoutWaveInput>
    create: XOR<TemplateCreateWithoutWaveInput, TemplateUncheckedCreateWithoutWaveInput>
  }

  export type TemplateUpdateWithWhereUniqueWithoutWaveInput = {
    where: TemplateWhereUniqueInput
    data: XOR<TemplateUpdateWithoutWaveInput, TemplateUncheckedUpdateWithoutWaveInput>
  }

  export type TemplateUpdateManyWithWhereWithoutWaveInput = {
    where: TemplateScalarWhereInput
    data: XOR<TemplateUpdateManyMutationInput, TemplateUncheckedUpdateManyWithoutWaveInput>
  }

  export type MicroActionUpsertWithWhereUniqueWithoutWaveInput = {
    where: MicroActionWhereUniqueInput
    update: XOR<MicroActionUpdateWithoutWaveInput, MicroActionUncheckedUpdateWithoutWaveInput>
    create: XOR<MicroActionCreateWithoutWaveInput, MicroActionUncheckedCreateWithoutWaveInput>
  }

  export type MicroActionUpdateWithWhereUniqueWithoutWaveInput = {
    where: MicroActionWhereUniqueInput
    data: XOR<MicroActionUpdateWithoutWaveInput, MicroActionUncheckedUpdateWithoutWaveInput>
  }

  export type MicroActionUpdateManyWithWhereWithoutWaveInput = {
    where: MicroActionScalarWhereInput
    data: XOR<MicroActionUpdateManyMutationInput, MicroActionUncheckedUpdateManyWithoutWaveInput>
  }

  export type PhraseMapUpsertWithWhereUniqueWithoutWaveInput = {
    where: PhraseMapWhereUniqueInput
    update: XOR<PhraseMapUpdateWithoutWaveInput, PhraseMapUncheckedUpdateWithoutWaveInput>
    create: XOR<PhraseMapCreateWithoutWaveInput, PhraseMapUncheckedCreateWithoutWaveInput>
  }

  export type PhraseMapUpdateWithWhereUniqueWithoutWaveInput = {
    where: PhraseMapWhereUniqueInput
    data: XOR<PhraseMapUpdateWithoutWaveInput, PhraseMapUncheckedUpdateWithoutWaveInput>
  }

  export type PhraseMapUpdateManyWithWhereWithoutWaveInput = {
    where: PhraseMapScalarWhereInput
    data: XOR<PhraseMapUpdateManyMutationInput, PhraseMapUncheckedUpdateManyWithoutWaveInput>
  }

  export type PhraseMapScalarWhereInput = {
    AND?: PhraseMapScalarWhereInput | PhraseMapScalarWhereInput[]
    OR?: PhraseMapScalarWhereInput[]
    NOT?: PhraseMapScalarWhereInput | PhraseMapScalarWhereInput[]
    id?: StringFilter<"PhraseMap"> | string
    waveId?: StringNullableFilter<"PhraseMap"> | string | null
    bucket?: StringFilter<"PhraseMap"> | string
    phrase?: StringFilter<"PhraseMap"> | string
    isActive?: BoolFilter<"PhraseMap"> | boolean
    priority?: IntFilter<"PhraseMap"> | number
  }

  export type UserCreateWithoutMembershipsInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    dream?: string | null
    actionLogs?: ActionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMembershipsInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    dream?: string | null
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
  }

  export type RippleCreateWithoutMembershipsInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    wave: WaveCreateNestedOneWithoutRipplesInput
    microActions?: MicroActionCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryCreateNestedOneWithoutRippleInput
  }

  export type RippleUncheckedCreateWithoutMembershipsInput = {
    id?: string
    waveId: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    microActions?: MicroActionUncheckedCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityUncheckedCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryUncheckedCreateNestedOneWithoutRippleInput
  }

  export type RippleCreateOrConnectWithoutMembershipsInput = {
    where: RippleWhereUniqueInput
    create: XOR<RippleCreateWithoutMembershipsInput, RippleUncheckedCreateWithoutMembershipsInput>
  }

  export type UserUpsertWithoutMembershipsInput = {
    update: XOR<UserUpdateWithoutMembershipsInput, UserUncheckedUpdateWithoutMembershipsInput>
    create: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMembershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMembershipsInput, UserUncheckedUpdateWithoutMembershipsInput>
  }

  export type UserUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    actionLogs?: ActionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    actionLogs?: ActionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RippleUpsertWithoutMembershipsInput = {
    update: XOR<RippleUpdateWithoutMembershipsInput, RippleUncheckedUpdateWithoutMembershipsInput>
    create: XOR<RippleCreateWithoutMembershipsInput, RippleUncheckedCreateWithoutMembershipsInput>
    where?: RippleWhereInput
  }

  export type RippleUpdateToOneWithWhereWithoutMembershipsInput = {
    where?: RippleWhereInput
    data: XOR<RippleUpdateWithoutMembershipsInput, RippleUncheckedUpdateWithoutMembershipsInput>
  }

  export type RippleUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    wave?: WaveUpdateOneRequiredWithoutRipplesNestedInput
    microActions?: MicroActionUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUpdateOneWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    microActions?: MicroActionUncheckedUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUncheckedUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUncheckedUpdateOneWithoutRippleNestedInput
  }

  export type RippleCreateWithoutRippleActivitiesInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    wave: WaveCreateNestedOneWithoutRipplesInput
    microActions?: MicroActionCreateNestedManyWithoutRippleInput
    memberships?: UserRippleCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryCreateNestedOneWithoutRippleInput
  }

  export type RippleUncheckedCreateWithoutRippleActivitiesInput = {
    id?: string
    waveId: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    microActions?: MicroActionUncheckedCreateNestedManyWithoutRippleInput
    memberships?: UserRippleUncheckedCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryUncheckedCreateNestedOneWithoutRippleInput
  }

  export type RippleCreateOrConnectWithoutRippleActivitiesInput = {
    where: RippleWhereUniqueInput
    create: XOR<RippleCreateWithoutRippleActivitiesInput, RippleUncheckedCreateWithoutRippleActivitiesInput>
  }

  export type RippleUpsertWithoutRippleActivitiesInput = {
    update: XOR<RippleUpdateWithoutRippleActivitiesInput, RippleUncheckedUpdateWithoutRippleActivitiesInput>
    create: XOR<RippleCreateWithoutRippleActivitiesInput, RippleUncheckedCreateWithoutRippleActivitiesInput>
    where?: RippleWhereInput
  }

  export type RippleUpdateToOneWithWhereWithoutRippleActivitiesInput = {
    where?: RippleWhereInput
    data: XOR<RippleUpdateWithoutRippleActivitiesInput, RippleUncheckedUpdateWithoutRippleActivitiesInput>
  }

  export type RippleUpdateWithoutRippleActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    wave?: WaveUpdateOneRequiredWithoutRipplesNestedInput
    microActions?: MicroActionUpdateManyWithoutRippleNestedInput
    memberships?: UserRippleUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUpdateOneWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateWithoutRippleActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    microActions?: MicroActionUncheckedUpdateManyWithoutRippleNestedInput
    memberships?: UserRippleUncheckedUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUncheckedUpdateOneWithoutRippleNestedInput
  }

  export type RippleCreateWithoutRippleSummaryInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    wave: WaveCreateNestedOneWithoutRipplesInput
    microActions?: MicroActionCreateNestedManyWithoutRippleInput
    memberships?: UserRippleCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityCreateNestedManyWithoutRippleInput
  }

  export type RippleUncheckedCreateWithoutRippleSummaryInput = {
    id?: string
    waveId: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    microActions?: MicroActionUncheckedCreateNestedManyWithoutRippleInput
    memberships?: UserRippleUncheckedCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityUncheckedCreateNestedManyWithoutRippleInput
  }

  export type RippleCreateOrConnectWithoutRippleSummaryInput = {
    where: RippleWhereUniqueInput
    create: XOR<RippleCreateWithoutRippleSummaryInput, RippleUncheckedCreateWithoutRippleSummaryInput>
  }

  export type RippleUpsertWithoutRippleSummaryInput = {
    update: XOR<RippleUpdateWithoutRippleSummaryInput, RippleUncheckedUpdateWithoutRippleSummaryInput>
    create: XOR<RippleCreateWithoutRippleSummaryInput, RippleUncheckedCreateWithoutRippleSummaryInput>
    where?: RippleWhereInput
  }

  export type RippleUpdateToOneWithWhereWithoutRippleSummaryInput = {
    where?: RippleWhereInput
    data: XOR<RippleUpdateWithoutRippleSummaryInput, RippleUncheckedUpdateWithoutRippleSummaryInput>
  }

  export type RippleUpdateWithoutRippleSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    wave?: WaveUpdateOneRequiredWithoutRipplesNestedInput
    microActions?: MicroActionUpdateManyWithoutRippleNestedInput
    memberships?: UserRippleUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUpdateManyWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateWithoutRippleSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    microActions?: MicroActionUncheckedUpdateManyWithoutRippleNestedInput
    memberships?: UserRippleUncheckedUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUncheckedUpdateManyWithoutRippleNestedInput
  }

  export type WaveCreateWithoutRipplesInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    actionLogs?: ActionLogCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketCreateNestedManyWithoutWaveInput
    templates?: TemplateCreateNestedManyWithoutWaveInput
    microActions?: MicroActionCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapCreateNestedManyWithoutWaveInput
  }

  export type WaveUncheckedCreateWithoutRipplesInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketUncheckedCreateNestedManyWithoutWaveInput
    templates?: TemplateUncheckedCreateNestedManyWithoutWaveInput
    microActions?: MicroActionUncheckedCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapUncheckedCreateNestedManyWithoutWaveInput
  }

  export type WaveCreateOrConnectWithoutRipplesInput = {
    where: WaveWhereUniqueInput
    create: XOR<WaveCreateWithoutRipplesInput, WaveUncheckedCreateWithoutRipplesInput>
  }

  export type MicroActionCreateWithoutRippleInput = {
    id?: string
    text: string
    status?: string
    createdBy?: string
    createdAt?: Date | string
    wave: WaveCreateNestedOneWithoutMicroActionsInput
    template?: TemplateCreateNestedOneWithoutMicroActionsInput
    actionLogs?: ActionLogCreateNestedManyWithoutMicroInput
    waveBucket: WaveBucketCreateNestedOneWithoutMicroActionsInput
  }

  export type MicroActionUncheckedCreateWithoutRippleInput = {
    id?: string
    text: string
    bucket: string
    status?: string
    createdBy?: string
    waveId: string
    templateId?: string | null
    createdAt?: Date | string
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutMicroInput
  }

  export type MicroActionCreateOrConnectWithoutRippleInput = {
    where: MicroActionWhereUniqueInput
    create: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput>
  }

  export type MicroActionCreateManyRippleInputEnvelope = {
    data: MicroActionCreateManyRippleInput | MicroActionCreateManyRippleInput[]
    skipDuplicates?: boolean
  }

  export type UserRippleCreateWithoutRippleInput = {
    id?: string
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutMembershipsInput
  }

  export type UserRippleUncheckedCreateWithoutRippleInput = {
    id?: string
    userId: string
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type UserRippleCreateOrConnectWithoutRippleInput = {
    where: UserRippleWhereUniqueInput
    create: XOR<UserRippleCreateWithoutRippleInput, UserRippleUncheckedCreateWithoutRippleInput>
  }

  export type UserRippleCreateManyRippleInputEnvelope = {
    data: UserRippleCreateManyRippleInput | UserRippleCreateManyRippleInput[]
    skipDuplicates?: boolean
  }

  export type ActionLogCreateWithoutRippleInput = {
    id?: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
    user: UserCreateNestedOneWithoutActionLogsInput
    micro: MicroActionCreateNestedOneWithoutActionLogsInput
    wave: WaveCreateNestedOneWithoutActionLogsInput
  }

  export type ActionLogUncheckedCreateWithoutRippleInput = {
    id?: string
    userId: string
    microActionId: string
    waveId: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
  }

  export type ActionLogCreateOrConnectWithoutRippleInput = {
    where: ActionLogWhereUniqueInput
    create: XOR<ActionLogCreateWithoutRippleInput, ActionLogUncheckedCreateWithoutRippleInput>
  }

  export type ActionLogCreateManyRippleInputEnvelope = {
    data: ActionLogCreateManyRippleInput | ActionLogCreateManyRippleInput[]
    skipDuplicates?: boolean
  }

  export type RippleActivityCreateWithoutRippleInput = {
    id?: string
    city?: string | null
    blurb: string
    createdAt?: Date | string
  }

  export type RippleActivityUncheckedCreateWithoutRippleInput = {
    id?: string
    city?: string | null
    blurb: string
    createdAt?: Date | string
  }

  export type RippleActivityCreateOrConnectWithoutRippleInput = {
    where: RippleActivityWhereUniqueInput
    create: XOR<RippleActivityCreateWithoutRippleInput, RippleActivityUncheckedCreateWithoutRippleInput>
  }

  export type RippleActivityCreateManyRippleInputEnvelope = {
    data: RippleActivityCreateManyRippleInput | RippleActivityCreateManyRippleInput[]
    skipDuplicates?: boolean
  }

  export type RippleSummaryCreateWithoutRippleInput = {
    participants: number
    actionsTotal: number
    impactValue: number
    impact30d?: number
    impactUnit: string
    impactSource: string
    updatedAt?: Date | string
  }

  export type RippleSummaryUncheckedCreateWithoutRippleInput = {
    participants: number
    actionsTotal: number
    impactValue: number
    impact30d?: number
    impactUnit: string
    impactSource: string
    updatedAt?: Date | string
  }

  export type RippleSummaryCreateOrConnectWithoutRippleInput = {
    where: RippleSummaryWhereUniqueInput
    create: XOR<RippleSummaryCreateWithoutRippleInput, RippleSummaryUncheckedCreateWithoutRippleInput>
  }

  export type WaveUpsertWithoutRipplesInput = {
    update: XOR<WaveUpdateWithoutRipplesInput, WaveUncheckedUpdateWithoutRipplesInput>
    create: XOR<WaveCreateWithoutRipplesInput, WaveUncheckedCreateWithoutRipplesInput>
    where?: WaveWhereInput
  }

  export type WaveUpdateToOneWithWhereWithoutRipplesInput = {
    where?: WaveWhereInput
    data: XOR<WaveUpdateWithoutRipplesInput, WaveUncheckedUpdateWithoutRipplesInput>
  }

  export type WaveUpdateWithoutRipplesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    actionLogs?: ActionLogUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUpdateManyWithoutWaveNestedInput
    templates?: TemplateUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUpdateManyWithoutWaveNestedInput
  }

  export type WaveUncheckedUpdateWithoutRipplesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    actionLogs?: ActionLogUncheckedUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUncheckedUpdateManyWithoutWaveNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUncheckedUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUncheckedUpdateManyWithoutWaveNestedInput
  }

  export type MicroActionUpsertWithWhereUniqueWithoutRippleInput = {
    where: MicroActionWhereUniqueInput
    update: XOR<MicroActionUpdateWithoutRippleInput, MicroActionUncheckedUpdateWithoutRippleInput>
    create: XOR<MicroActionCreateWithoutRippleInput, MicroActionUncheckedCreateWithoutRippleInput>
  }

  export type MicroActionUpdateWithWhereUniqueWithoutRippleInput = {
    where: MicroActionWhereUniqueInput
    data: XOR<MicroActionUpdateWithoutRippleInput, MicroActionUncheckedUpdateWithoutRippleInput>
  }

  export type MicroActionUpdateManyWithWhereWithoutRippleInput = {
    where: MicroActionScalarWhereInput
    data: XOR<MicroActionUpdateManyMutationInput, MicroActionUncheckedUpdateManyWithoutRippleInput>
  }

  export type UserRippleUpsertWithWhereUniqueWithoutRippleInput = {
    where: UserRippleWhereUniqueInput
    update: XOR<UserRippleUpdateWithoutRippleInput, UserRippleUncheckedUpdateWithoutRippleInput>
    create: XOR<UserRippleCreateWithoutRippleInput, UserRippleUncheckedCreateWithoutRippleInput>
  }

  export type UserRippleUpdateWithWhereUniqueWithoutRippleInput = {
    where: UserRippleWhereUniqueInput
    data: XOR<UserRippleUpdateWithoutRippleInput, UserRippleUncheckedUpdateWithoutRippleInput>
  }

  export type UserRippleUpdateManyWithWhereWithoutRippleInput = {
    where: UserRippleScalarWhereInput
    data: XOR<UserRippleUpdateManyMutationInput, UserRippleUncheckedUpdateManyWithoutRippleInput>
  }

  export type ActionLogUpsertWithWhereUniqueWithoutRippleInput = {
    where: ActionLogWhereUniqueInput
    update: XOR<ActionLogUpdateWithoutRippleInput, ActionLogUncheckedUpdateWithoutRippleInput>
    create: XOR<ActionLogCreateWithoutRippleInput, ActionLogUncheckedCreateWithoutRippleInput>
  }

  export type ActionLogUpdateWithWhereUniqueWithoutRippleInput = {
    where: ActionLogWhereUniqueInput
    data: XOR<ActionLogUpdateWithoutRippleInput, ActionLogUncheckedUpdateWithoutRippleInput>
  }

  export type ActionLogUpdateManyWithWhereWithoutRippleInput = {
    where: ActionLogScalarWhereInput
    data: XOR<ActionLogUpdateManyMutationInput, ActionLogUncheckedUpdateManyWithoutRippleInput>
  }

  export type RippleActivityUpsertWithWhereUniqueWithoutRippleInput = {
    where: RippleActivityWhereUniqueInput
    update: XOR<RippleActivityUpdateWithoutRippleInput, RippleActivityUncheckedUpdateWithoutRippleInput>
    create: XOR<RippleActivityCreateWithoutRippleInput, RippleActivityUncheckedCreateWithoutRippleInput>
  }

  export type RippleActivityUpdateWithWhereUniqueWithoutRippleInput = {
    where: RippleActivityWhereUniqueInput
    data: XOR<RippleActivityUpdateWithoutRippleInput, RippleActivityUncheckedUpdateWithoutRippleInput>
  }

  export type RippleActivityUpdateManyWithWhereWithoutRippleInput = {
    where: RippleActivityScalarWhereInput
    data: XOR<RippleActivityUpdateManyMutationInput, RippleActivityUncheckedUpdateManyWithoutRippleInput>
  }

  export type RippleActivityScalarWhereInput = {
    AND?: RippleActivityScalarWhereInput | RippleActivityScalarWhereInput[]
    OR?: RippleActivityScalarWhereInput[]
    NOT?: RippleActivityScalarWhereInput | RippleActivityScalarWhereInput[]
    id?: StringFilter<"RippleActivity"> | string
    rippleId?: StringFilter<"RippleActivity"> | string
    city?: StringNullableFilter<"RippleActivity"> | string | null
    blurb?: StringFilter<"RippleActivity"> | string
    createdAt?: DateTimeFilter<"RippleActivity"> | Date | string
  }

  export type RippleSummaryUpsertWithoutRippleInput = {
    update: XOR<RippleSummaryUpdateWithoutRippleInput, RippleSummaryUncheckedUpdateWithoutRippleInput>
    create: XOR<RippleSummaryCreateWithoutRippleInput, RippleSummaryUncheckedCreateWithoutRippleInput>
    where?: RippleSummaryWhereInput
  }

  export type RippleSummaryUpdateToOneWithWhereWithoutRippleInput = {
    where?: RippleSummaryWhereInput
    data: XOR<RippleSummaryUpdateWithoutRippleInput, RippleSummaryUncheckedUpdateWithoutRippleInput>
  }

  export type RippleSummaryUpdateWithoutRippleInput = {
    participants?: IntFieldUpdateOperationsInput | number
    actionsTotal?: IntFieldUpdateOperationsInput | number
    impactValue?: FloatFieldUpdateOperationsInput | number
    impact30d?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleSummaryUncheckedUpdateWithoutRippleInput = {
    participants?: IntFieldUpdateOperationsInput | number
    actionsTotal?: IntFieldUpdateOperationsInput | number
    impactValue?: FloatFieldUpdateOperationsInput | number
    impact30d?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleCreateWithoutMicroActionsInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    wave: WaveCreateNestedOneWithoutRipplesInput
    memberships?: UserRippleCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryCreateNestedOneWithoutRippleInput
  }

  export type RippleUncheckedCreateWithoutMicroActionsInput = {
    id?: string
    waveId: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    memberships?: UserRippleUncheckedCreateNestedManyWithoutRippleInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityUncheckedCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryUncheckedCreateNestedOneWithoutRippleInput
  }

  export type RippleCreateOrConnectWithoutMicroActionsInput = {
    where: RippleWhereUniqueInput
    create: XOR<RippleCreateWithoutMicroActionsInput, RippleUncheckedCreateWithoutMicroActionsInput>
  }

  export type WaveCreateWithoutMicroActionsInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleCreateNestedManyWithoutWaveInput
    actionLogs?: ActionLogCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketCreateNestedManyWithoutWaveInput
    templates?: TemplateCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapCreateNestedManyWithoutWaveInput
  }

  export type WaveUncheckedCreateWithoutMicroActionsInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleUncheckedCreateNestedManyWithoutWaveInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketUncheckedCreateNestedManyWithoutWaveInput
    templates?: TemplateUncheckedCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapUncheckedCreateNestedManyWithoutWaveInput
  }

  export type WaveCreateOrConnectWithoutMicroActionsInput = {
    where: WaveWhereUniqueInput
    create: XOR<WaveCreateWithoutMicroActionsInput, WaveUncheckedCreateWithoutMicroActionsInput>
  }

  export type TemplateCreateWithoutMicroActionsInput = {
    id?: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    wave: WaveCreateNestedOneWithoutTemplatesInput
    waveBucket: WaveBucketCreateNestedOneWithoutTemplatesInput
  }

  export type TemplateUncheckedCreateWithoutMicroActionsInput = {
    id?: string
    waveId: string
    bucket: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TemplateCreateOrConnectWithoutMicroActionsInput = {
    where: TemplateWhereUniqueInput
    create: XOR<TemplateCreateWithoutMicroActionsInput, TemplateUncheckedCreateWithoutMicroActionsInput>
  }

  export type ActionLogCreateWithoutMicroInput = {
    id?: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
    user: UserCreateNestedOneWithoutActionLogsInput
    ripple: RippleCreateNestedOneWithoutActionLogsInput
    wave: WaveCreateNestedOneWithoutActionLogsInput
  }

  export type ActionLogUncheckedCreateWithoutMicroInput = {
    id?: string
    userId: string
    rippleId: string
    waveId: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
  }

  export type ActionLogCreateOrConnectWithoutMicroInput = {
    where: ActionLogWhereUniqueInput
    create: XOR<ActionLogCreateWithoutMicroInput, ActionLogUncheckedCreateWithoutMicroInput>
  }

  export type ActionLogCreateManyMicroInputEnvelope = {
    data: ActionLogCreateManyMicroInput | ActionLogCreateManyMicroInput[]
    skipDuplicates?: boolean
  }

  export type WaveBucketCreateWithoutMicroActionsInput = {
    name: string
    weight?: number
    wave: WaveCreateNestedOneWithoutWaveBucketsInput
    templates?: TemplateCreateNestedManyWithoutWaveBucketInput
  }

  export type WaveBucketUncheckedCreateWithoutMicroActionsInput = {
    waveId: string
    name: string
    weight?: number
    templates?: TemplateUncheckedCreateNestedManyWithoutWaveBucketInput
  }

  export type WaveBucketCreateOrConnectWithoutMicroActionsInput = {
    where: WaveBucketWhereUniqueInput
    create: XOR<WaveBucketCreateWithoutMicroActionsInput, WaveBucketUncheckedCreateWithoutMicroActionsInput>
  }

  export type RippleUpsertWithoutMicroActionsInput = {
    update: XOR<RippleUpdateWithoutMicroActionsInput, RippleUncheckedUpdateWithoutMicroActionsInput>
    create: XOR<RippleCreateWithoutMicroActionsInput, RippleUncheckedCreateWithoutMicroActionsInput>
    where?: RippleWhereInput
  }

  export type RippleUpdateToOneWithWhereWithoutMicroActionsInput = {
    where?: RippleWhereInput
    data: XOR<RippleUpdateWithoutMicroActionsInput, RippleUncheckedUpdateWithoutMicroActionsInput>
  }

  export type RippleUpdateWithoutMicroActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    wave?: WaveUpdateOneRequiredWithoutRipplesNestedInput
    memberships?: UserRippleUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUpdateOneWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateWithoutMicroActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    memberships?: UserRippleUncheckedUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUncheckedUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUncheckedUpdateOneWithoutRippleNestedInput
  }

  export type WaveUpsertWithoutMicroActionsInput = {
    update: XOR<WaveUpdateWithoutMicroActionsInput, WaveUncheckedUpdateWithoutMicroActionsInput>
    create: XOR<WaveCreateWithoutMicroActionsInput, WaveUncheckedCreateWithoutMicroActionsInput>
    where?: WaveWhereInput
  }

  export type WaveUpdateToOneWithWhereWithoutMicroActionsInput = {
    where?: WaveWhereInput
    data: XOR<WaveUpdateWithoutMicroActionsInput, WaveUncheckedUpdateWithoutMicroActionsInput>
  }

  export type WaveUpdateWithoutMicroActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUpdateManyWithoutWaveNestedInput
    actionLogs?: ActionLogUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUpdateManyWithoutWaveNestedInput
    templates?: TemplateUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUpdateManyWithoutWaveNestedInput
  }

  export type WaveUncheckedUpdateWithoutMicroActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUncheckedUpdateManyWithoutWaveNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUncheckedUpdateManyWithoutWaveNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUncheckedUpdateManyWithoutWaveNestedInput
  }

  export type TemplateUpsertWithoutMicroActionsInput = {
    update: XOR<TemplateUpdateWithoutMicroActionsInput, TemplateUncheckedUpdateWithoutMicroActionsInput>
    create: XOR<TemplateCreateWithoutMicroActionsInput, TemplateUncheckedCreateWithoutMicroActionsInput>
    where?: TemplateWhereInput
  }

  export type TemplateUpdateToOneWithWhereWithoutMicroActionsInput = {
    where?: TemplateWhereInput
    data: XOR<TemplateUpdateWithoutMicroActionsInput, TemplateUncheckedUpdateWithoutMicroActionsInput>
  }

  export type TemplateUpdateWithoutMicroActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wave?: WaveUpdateOneRequiredWithoutTemplatesNestedInput
    waveBucket?: WaveBucketUpdateOneRequiredWithoutTemplatesNestedInput
  }

  export type TemplateUncheckedUpdateWithoutMicroActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogUpsertWithWhereUniqueWithoutMicroInput = {
    where: ActionLogWhereUniqueInput
    update: XOR<ActionLogUpdateWithoutMicroInput, ActionLogUncheckedUpdateWithoutMicroInput>
    create: XOR<ActionLogCreateWithoutMicroInput, ActionLogUncheckedCreateWithoutMicroInput>
  }

  export type ActionLogUpdateWithWhereUniqueWithoutMicroInput = {
    where: ActionLogWhereUniqueInput
    data: XOR<ActionLogUpdateWithoutMicroInput, ActionLogUncheckedUpdateWithoutMicroInput>
  }

  export type ActionLogUpdateManyWithWhereWithoutMicroInput = {
    where: ActionLogScalarWhereInput
    data: XOR<ActionLogUpdateManyMutationInput, ActionLogUncheckedUpdateManyWithoutMicroInput>
  }

  export type WaveBucketUpsertWithoutMicroActionsInput = {
    update: XOR<WaveBucketUpdateWithoutMicroActionsInput, WaveBucketUncheckedUpdateWithoutMicroActionsInput>
    create: XOR<WaveBucketCreateWithoutMicroActionsInput, WaveBucketUncheckedCreateWithoutMicroActionsInput>
    where?: WaveBucketWhereInput
  }

  export type WaveBucketUpdateToOneWithWhereWithoutMicroActionsInput = {
    where?: WaveBucketWhereInput
    data: XOR<WaveBucketUpdateWithoutMicroActionsInput, WaveBucketUncheckedUpdateWithoutMicroActionsInput>
  }

  export type WaveBucketUpdateWithoutMicroActionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    wave?: WaveUpdateOneRequiredWithoutWaveBucketsNestedInput
    templates?: TemplateUpdateManyWithoutWaveBucketNestedInput
  }

  export type WaveBucketUncheckedUpdateWithoutMicroActionsInput = {
    waveId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    templates?: TemplateUncheckedUpdateManyWithoutWaveBucketNestedInput
  }

  export type UserCreateWithoutActionLogsInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    dream?: string | null
    memberships?: UserRippleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActionLogsInput = {
    id?: string
    email: string
    username: string
    passwordHash: string
    createdAt?: Date | string
    dream?: string | null
    memberships?: UserRippleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActionLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActionLogsInput, UserUncheckedCreateWithoutActionLogsInput>
  }

  export type MicroActionCreateWithoutActionLogsInput = {
    id?: string
    text: string
    status?: string
    createdBy?: string
    createdAt?: Date | string
    ripple: RippleCreateNestedOneWithoutMicroActionsInput
    wave: WaveCreateNestedOneWithoutMicroActionsInput
    template?: TemplateCreateNestedOneWithoutMicroActionsInput
    waveBucket: WaveBucketCreateNestedOneWithoutMicroActionsInput
  }

  export type MicroActionUncheckedCreateWithoutActionLogsInput = {
    id?: string
    rippleId: string
    text: string
    bucket: string
    status?: string
    createdBy?: string
    waveId: string
    templateId?: string | null
    createdAt?: Date | string
  }

  export type MicroActionCreateOrConnectWithoutActionLogsInput = {
    where: MicroActionWhereUniqueInput
    create: XOR<MicroActionCreateWithoutActionLogsInput, MicroActionUncheckedCreateWithoutActionLogsInput>
  }

  export type RippleCreateWithoutActionLogsInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    wave: WaveCreateNestedOneWithoutRipplesInput
    microActions?: MicroActionCreateNestedManyWithoutRippleInput
    memberships?: UserRippleCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryCreateNestedOneWithoutRippleInput
  }

  export type RippleUncheckedCreateWithoutActionLogsInput = {
    id?: string
    waveId: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
    microActions?: MicroActionUncheckedCreateNestedManyWithoutRippleInput
    memberships?: UserRippleUncheckedCreateNestedManyWithoutRippleInput
    rippleActivities?: RippleActivityUncheckedCreateNestedManyWithoutRippleInput
    rippleSummary?: RippleSummaryUncheckedCreateNestedOneWithoutRippleInput
  }

  export type RippleCreateOrConnectWithoutActionLogsInput = {
    where: RippleWhereUniqueInput
    create: XOR<RippleCreateWithoutActionLogsInput, RippleUncheckedCreateWithoutActionLogsInput>
  }

  export type WaveCreateWithoutActionLogsInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketCreateNestedManyWithoutWaveInput
    templates?: TemplateCreateNestedManyWithoutWaveInput
    microActions?: MicroActionCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapCreateNestedManyWithoutWaveInput
  }

  export type WaveUncheckedCreateWithoutActionLogsInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleUncheckedCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketUncheckedCreateNestedManyWithoutWaveInput
    templates?: TemplateUncheckedCreateNestedManyWithoutWaveInput
    microActions?: MicroActionUncheckedCreateNestedManyWithoutWaveInput
    phrases?: PhraseMapUncheckedCreateNestedManyWithoutWaveInput
  }

  export type WaveCreateOrConnectWithoutActionLogsInput = {
    where: WaveWhereUniqueInput
    create: XOR<WaveCreateWithoutActionLogsInput, WaveUncheckedCreateWithoutActionLogsInput>
  }

  export type UserUpsertWithoutActionLogsInput = {
    update: XOR<UserUpdateWithoutActionLogsInput, UserUncheckedUpdateWithoutActionLogsInput>
    create: XOR<UserCreateWithoutActionLogsInput, UserUncheckedCreateWithoutActionLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActionLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActionLogsInput, UserUncheckedUpdateWithoutActionLogsInput>
  }

  export type UserUpdateWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    memberships?: UserRippleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    memberships?: UserRippleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MicroActionUpsertWithoutActionLogsInput = {
    update: XOR<MicroActionUpdateWithoutActionLogsInput, MicroActionUncheckedUpdateWithoutActionLogsInput>
    create: XOR<MicroActionCreateWithoutActionLogsInput, MicroActionUncheckedCreateWithoutActionLogsInput>
    where?: MicroActionWhereInput
  }

  export type MicroActionUpdateToOneWithWhereWithoutActionLogsInput = {
    where?: MicroActionWhereInput
    data: XOR<MicroActionUpdateWithoutActionLogsInput, MicroActionUncheckedUpdateWithoutActionLogsInput>
  }

  export type MicroActionUpdateWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ripple?: RippleUpdateOneRequiredWithoutMicroActionsNestedInput
    wave?: WaveUpdateOneRequiredWithoutMicroActionsNestedInput
    template?: TemplateUpdateOneWithoutMicroActionsNestedInput
    waveBucket?: WaveBucketUpdateOneRequiredWithoutMicroActionsNestedInput
  }

  export type MicroActionUncheckedUpdateWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleUpsertWithoutActionLogsInput = {
    update: XOR<RippleUpdateWithoutActionLogsInput, RippleUncheckedUpdateWithoutActionLogsInput>
    create: XOR<RippleCreateWithoutActionLogsInput, RippleUncheckedCreateWithoutActionLogsInput>
    where?: RippleWhereInput
  }

  export type RippleUpdateToOneWithWhereWithoutActionLogsInput = {
    where?: RippleWhereInput
    data: XOR<RippleUpdateWithoutActionLogsInput, RippleUncheckedUpdateWithoutActionLogsInput>
  }

  export type RippleUpdateWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    wave?: WaveUpdateOneRequiredWithoutRipplesNestedInput
    microActions?: MicroActionUpdateManyWithoutRippleNestedInput
    memberships?: UserRippleUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUpdateOneWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    microActions?: MicroActionUncheckedUpdateManyWithoutRippleNestedInput
    memberships?: UserRippleUncheckedUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUncheckedUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUncheckedUpdateOneWithoutRippleNestedInput
  }

  export type WaveUpsertWithoutActionLogsInput = {
    update: XOR<WaveUpdateWithoutActionLogsInput, WaveUncheckedUpdateWithoutActionLogsInput>
    create: XOR<WaveCreateWithoutActionLogsInput, WaveUncheckedCreateWithoutActionLogsInput>
    where?: WaveWhereInput
  }

  export type WaveUpdateToOneWithWhereWithoutActionLogsInput = {
    where?: WaveWhereInput
    data: XOR<WaveUpdateWithoutActionLogsInput, WaveUncheckedUpdateWithoutActionLogsInput>
  }

  export type WaveUpdateWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUpdateManyWithoutWaveNestedInput
    templates?: TemplateUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUpdateManyWithoutWaveNestedInput
  }

  export type WaveUncheckedUpdateWithoutActionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUncheckedUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUncheckedUpdateManyWithoutWaveNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUncheckedUpdateManyWithoutWaveNestedInput
    phrases?: PhraseMapUncheckedUpdateManyWithoutWaveNestedInput
  }

  export type WaveCreateWithoutPhrasesInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleCreateNestedManyWithoutWaveInput
    actionLogs?: ActionLogCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketCreateNestedManyWithoutWaveInput
    templates?: TemplateCreateNestedManyWithoutWaveInput
    microActions?: MicroActionCreateNestedManyWithoutWaveInput
  }

  export type WaveUncheckedCreateWithoutPhrasesInput = {
    id?: string
    name: string
    description: string
    icon?: string | null
    color?: string
    impactCoef: number
    impactUnit: string
    impactSource: string
    impactVersion?: string
    allowedBuckets: string
    ripples?: RippleUncheckedCreateNestedManyWithoutWaveInput
    actionLogs?: ActionLogUncheckedCreateNestedManyWithoutWaveInput
    waveBuckets?: WaveBucketUncheckedCreateNestedManyWithoutWaveInput
    templates?: TemplateUncheckedCreateNestedManyWithoutWaveInput
    microActions?: MicroActionUncheckedCreateNestedManyWithoutWaveInput
  }

  export type WaveCreateOrConnectWithoutPhrasesInput = {
    where: WaveWhereUniqueInput
    create: XOR<WaveCreateWithoutPhrasesInput, WaveUncheckedCreateWithoutPhrasesInput>
  }

  export type WaveUpsertWithoutPhrasesInput = {
    update: XOR<WaveUpdateWithoutPhrasesInput, WaveUncheckedUpdateWithoutPhrasesInput>
    create: XOR<WaveCreateWithoutPhrasesInput, WaveUncheckedCreateWithoutPhrasesInput>
    where?: WaveWhereInput
  }

  export type WaveUpdateToOneWithWhereWithoutPhrasesInput = {
    where?: WaveWhereInput
    data: XOR<WaveUpdateWithoutPhrasesInput, WaveUncheckedUpdateWithoutPhrasesInput>
  }

  export type WaveUpdateWithoutPhrasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUpdateManyWithoutWaveNestedInput
    actionLogs?: ActionLogUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUpdateManyWithoutWaveNestedInput
    templates?: TemplateUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUpdateManyWithoutWaveNestedInput
  }

  export type WaveUncheckedUpdateWithoutPhrasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    impactCoef?: FloatFieldUpdateOperationsInput | number
    impactUnit?: StringFieldUpdateOperationsInput | string
    impactSource?: StringFieldUpdateOperationsInput | string
    impactVersion?: StringFieldUpdateOperationsInput | string
    allowedBuckets?: StringFieldUpdateOperationsInput | string
    ripples?: RippleUncheckedUpdateManyWithoutWaveNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutWaveNestedInput
    waveBuckets?: WaveBucketUncheckedUpdateManyWithoutWaveNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutWaveNestedInput
    microActions?: MicroActionUncheckedUpdateManyWithoutWaveNestedInput
  }

  export type TemplateCreateManyWaveBucketInput = {
    id?: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MicroActionCreateManyWaveBucketInput = {
    id?: string
    rippleId: string
    text: string
    status?: string
    createdBy?: string
    templateId?: string | null
    createdAt?: Date | string
  }

  export type TemplateUpdateWithoutWaveBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wave?: WaveUpdateOneRequiredWithoutTemplatesNestedInput
    microActions?: MicroActionUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateWithoutWaveBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    microActions?: MicroActionUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateManyWithoutWaveBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MicroActionUpdateWithoutWaveBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ripple?: RippleUpdateOneRequiredWithoutMicroActionsNestedInput
    wave?: WaveUpdateOneRequiredWithoutMicroActionsNestedInput
    template?: TemplateUpdateOneWithoutMicroActionsNestedInput
    actionLogs?: ActionLogUpdateManyWithoutMicroNestedInput
  }

  export type MicroActionUncheckedUpdateWithoutWaveBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUncheckedUpdateManyWithoutMicroNestedInput
  }

  export type MicroActionUncheckedUpdateManyWithoutWaveBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MicroActionCreateManyTemplateInput = {
    id?: string
    rippleId: string
    text: string
    bucket: string
    status?: string
    createdBy?: string
    waveId: string
    createdAt?: Date | string
  }

  export type MicroActionUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ripple?: RippleUpdateOneRequiredWithoutMicroActionsNestedInput
    wave?: WaveUpdateOneRequiredWithoutMicroActionsNestedInput
    actionLogs?: ActionLogUpdateManyWithoutMicroNestedInput
    waveBucket?: WaveBucketUpdateOneRequiredWithoutMicroActionsNestedInput
  }

  export type MicroActionUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUncheckedUpdateManyWithoutMicroNestedInput
  }

  export type MicroActionUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRippleCreateManyUserInput = {
    id?: string
    rippleId: string
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type ActionLogCreateManyUserInput = {
    id?: string
    microActionId: string
    rippleId: string
    waveId: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
  }

  export type UserRippleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ripple?: RippleUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type UserRippleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRippleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
    micro?: MicroActionUpdateOneRequiredWithoutActionLogsNestedInput
    ripple?: RippleUpdateOneRequiredWithoutActionLogsNestedInput
    wave?: WaveUpdateOneRequiredWithoutActionLogsNestedInput
  }

  export type ActionLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    microActionId?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActionLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    microActionId?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RippleCreateManyWaveInput = {
    id?: string
    title: string
    description?: string | null
    createdBy?: string
    status?: string
    isStarter?: boolean
    audience_noun?: string | null
    context_label?: string | null
    blurb_template?: string | null
    default_bucket?: string | null
  }

  export type ActionLogCreateManyWaveInput = {
    id?: string
    userId: string
    microActionId: string
    rippleId: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
  }

  export type WaveBucketCreateManyWaveInput = {
    name: string
    weight?: number
  }

  export type TemplateCreateManyWaveInput = {
    id?: string
    bucket: string
    textPattern: string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: $Enums.TemplateStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MicroActionCreateManyWaveInput = {
    id?: string
    rippleId: string
    text: string
    bucket: string
    status?: string
    createdBy?: string
    templateId?: string | null
    createdAt?: Date | string
  }

  export type PhraseMapCreateManyWaveInput = {
    id?: string
    bucket: string
    phrase: string
    isActive?: boolean
    priority?: number
  }

  export type RippleUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    microActions?: MicroActionUpdateManyWithoutRippleNestedInput
    memberships?: UserRippleUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUpdateOneWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
    microActions?: MicroActionUncheckedUpdateManyWithoutRippleNestedInput
    memberships?: UserRippleUncheckedUpdateManyWithoutRippleNestedInput
    actionLogs?: ActionLogUncheckedUpdateManyWithoutRippleNestedInput
    rippleActivities?: RippleActivityUncheckedUpdateManyWithoutRippleNestedInput
    rippleSummary?: RippleSummaryUncheckedUpdateOneWithoutRippleNestedInput
  }

  export type RippleUncheckedUpdateManyWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isStarter?: BoolFieldUpdateOperationsInput | boolean
    audience_noun?: NullableStringFieldUpdateOperationsInput | string | null
    context_label?: NullableStringFieldUpdateOperationsInput | string | null
    blurb_template?: NullableStringFieldUpdateOperationsInput | string | null
    default_bucket?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActionLogUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutActionLogsNestedInput
    micro?: MicroActionUpdateOneRequiredWithoutActionLogsNestedInput
    ripple?: RippleUpdateOneRequiredWithoutActionLogsNestedInput
  }

  export type ActionLogUncheckedUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    microActionId?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActionLogUncheckedUpdateManyWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    microActionId?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WaveBucketUpdateWithoutWaveInput = {
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    templates?: TemplateUpdateManyWithoutWaveBucketNestedInput
    microActions?: MicroActionUpdateManyWithoutWaveBucketNestedInput
  }

  export type WaveBucketUncheckedUpdateWithoutWaveInput = {
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    templates?: TemplateUncheckedUpdateManyWithoutWaveBucketNestedInput
    microActions?: MicroActionUncheckedUpdateManyWithoutWaveBucketNestedInput
  }

  export type WaveBucketUncheckedUpdateManyWithoutWaveInput = {
    name?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
  }

  export type TemplateUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    waveBucket?: WaveBucketUpdateOneRequiredWithoutTemplatesNestedInput
    microActions?: MicroActionUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    microActions?: MicroActionUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateManyWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    textPattern?: StringFieldUpdateOperationsInput | string
    modifiersJson?: JsonNullValueInput | InputJsonValue
    status?: EnumTemplateStatusFieldUpdateOperationsInput | $Enums.TemplateStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MicroActionUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ripple?: RippleUpdateOneRequiredWithoutMicroActionsNestedInput
    template?: TemplateUpdateOneWithoutMicroActionsNestedInput
    actionLogs?: ActionLogUpdateManyWithoutMicroNestedInput
    waveBucket?: WaveBucketUpdateOneRequiredWithoutMicroActionsNestedInput
  }

  export type MicroActionUncheckedUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUncheckedUpdateManyWithoutMicroNestedInput
  }

  export type MicroActionUncheckedUpdateManyWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhraseMapUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    phrase?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type PhraseMapUncheckedUpdateWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    phrase?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type PhraseMapUncheckedUpdateManyWithoutWaveInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    phrase?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type MicroActionCreateManyRippleInput = {
    id?: string
    text: string
    bucket: string
    status?: string
    createdBy?: string
    waveId: string
    templateId?: string | null
    createdAt?: Date | string
  }

  export type UserRippleCreateManyRippleInput = {
    id?: string
    userId: string
    isActive?: boolean
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type ActionLogCreateManyRippleInput = {
    id?: string
    userId: string
    microActionId: string
    waveId: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
  }

  export type RippleActivityCreateManyRippleInput = {
    id?: string
    city?: string | null
    blurb: string
    createdAt?: Date | string
  }

  export type MicroActionUpdateWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wave?: WaveUpdateOneRequiredWithoutMicroActionsNestedInput
    template?: TemplateUpdateOneWithoutMicroActionsNestedInput
    actionLogs?: ActionLogUpdateManyWithoutMicroNestedInput
    waveBucket?: WaveBucketUpdateOneRequiredWithoutMicroActionsNestedInput
  }

  export type MicroActionUncheckedUpdateWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionLogs?: ActionLogUncheckedUpdateManyWithoutMicroNestedInput
  }

  export type MicroActionUncheckedUpdateManyWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRippleUpdateWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type UserRippleUncheckedUpdateWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRippleUncheckedUpdateManyWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogUpdateWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutActionLogsNestedInput
    micro?: MicroActionUpdateOneRequiredWithoutActionLogsNestedInput
    wave?: WaveUpdateOneRequiredWithoutActionLogsNestedInput
  }

  export type ActionLogUncheckedUpdateWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    microActionId?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActionLogUncheckedUpdateManyWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    microActionId?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RippleActivityUpdateWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    blurb?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleActivityUncheckedUpdateWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    blurb?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RippleActivityUncheckedUpdateManyWithoutRippleInput = {
    id?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    blurb?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionLogCreateManyMicroInput = {
    id?: string
    userId: string
    rippleId: string
    waveId: string
    bucket: string
    createdAt?: Date | string
    city?: string | null
    noteText?: string | null
    shareAnon?: boolean
  }

  export type ActionLogUpdateWithoutMicroInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutActionLogsNestedInput
    ripple?: RippleUpdateOneRequiredWithoutActionLogsNestedInput
    wave?: WaveUpdateOneRequiredWithoutActionLogsNestedInput
  }

  export type ActionLogUncheckedUpdateWithoutMicroInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActionLogUncheckedUpdateManyWithoutMicroInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rippleId?: StringFieldUpdateOperationsInput | string
    waveId?: StringFieldUpdateOperationsInput | string
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    noteText?: NullableStringFieldUpdateOperationsInput | string | null
    shareAnon?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}